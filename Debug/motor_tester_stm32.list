
motor_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000291c  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008728  08008728  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008728  08008728  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008728  08008728  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200000a8  080087d8  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  080087d8  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d04  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e4  00000000  00000000  00031dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000343c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001931a  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012839  00000000  00000000  0004f75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009035f  00000000  00000000  00061f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f22f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a8c  00000000  00000000  000f2344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08005df4 	.word	0x08005df4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08005df4 	.word	0x08005df4

0800014c <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 8000154:	6878      	ldr	r0, [r7, #4]
 8000156:	f004 fd2c 	bl	8004bb2 <HAL_UART_GetError>
 800015a:	61f8      	str	r0, [r7, #28]
	switch (er) {
 800015c:	69fb      	ldr	r3, [r7, #28]
 800015e:	3b01      	subs	r3, #1
 8000160:	2b0f      	cmp	r3, #15
 8000162:	d863      	bhi.n	800022c <HAL_UART_ErrorCallback+0xe0>
 8000164:	a201      	add	r2, pc, #4	; (adr r2, 800016c <HAL_UART_ErrorCallback+0x20>)
 8000166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016a:	bf00      	nop
 800016c:	080001ad 	.word	0x080001ad
 8000170:	080001cb 	.word	0x080001cb
 8000174:	0800022d 	.word	0x0800022d
 8000178:	080001e9 	.word	0x080001e9
 800017c:	0800022d 	.word	0x0800022d
 8000180:	0800022d 	.word	0x0800022d
 8000184:	0800022d 	.word	0x0800022d
 8000188:	08000207 	.word	0x08000207
 800018c:	0800022d 	.word	0x0800022d
 8000190:	0800022d 	.word	0x0800022d
 8000194:	0800022d 	.word	0x0800022d
 8000198:	0800022d 	.word	0x0800022d
 800019c:	0800022d 	.word	0x0800022d
 80001a0:	0800022d 	.word	0x0800022d
 80001a4:	0800022d 	.word	0x0800022d
 80001a8:	08000225 	.word	0x08000225
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 80001ac:	2300      	movs	r3, #0
 80001ae:	61bb      	str	r3, [r7, #24]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	61bb      	str	r3, [r7, #24]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	61bb      	str	r3, [r7, #24]
 80001c0:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2200      	movs	r2, #0
 80001c6:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80001c8:	e031      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 80001ca:	2300      	movs	r3, #0
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80001e6:	e022      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 80001e8:	2300      	movs	r3, #0
 80001ea:	613b      	str	r3, [r7, #16]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	613b      	str	r3, [r7, #16]
 80001fc:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000204:	e013      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000222:	e004      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 800022a:	e000      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 800022c:	bf00      	nop
		}
	if (huart->Instance == USART1) {
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <HAL_UART_ErrorCallback+0x114>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d10f      	bne.n	8000258 <HAL_UART_ErrorCallback+0x10c>
		new_bms_data = 1;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_UART_ErrorCallback+0x118>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 800023e:	2264      	movs	r2, #100	; 0x64
 8000240:	4909      	ldr	r1, [pc, #36]	; (8000268 <HAL_UART_ErrorCallback+0x11c>)
 8000242:	480a      	ldr	r0, [pc, #40]	; (800026c <HAL_UART_ErrorCallback+0x120>)
 8000244:	f004 f9ab 	bl	800459e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_UART_ErrorCallback+0x124>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_UART_ErrorCallback+0x124>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f022 0204 	bic.w	r2, r2, #4
 8000256:	601a      	str	r2, [r3, #0]
	}
}
 8000258:	bf00      	nop
 800025a:	3720      	adds	r7, #32
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40013800 	.word	0x40013800
 8000264:	20000284 	.word	0x20000284
 8000268:	20000220 	.word	0x20000220
 800026c:	2000018c 	.word	0x2000018c
 8000270:	200001d4 	.word	0x200001d4

08000274 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d10f      	bne.n	80002aa <HAL_UARTEx_RxEventCallback+0x36>
		new_bms_data = 1;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <HAL_UARTEx_RxEventCallback+0x44>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000290:	2264      	movs	r2, #100	; 0x64
 8000292:	490a      	ldr	r1, [pc, #40]	; (80002bc <HAL_UARTEx_RxEventCallback+0x48>)
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000296:	f004 f982 	bl	800459e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <HAL_UARTEx_RxEventCallback+0x50>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <HAL_UARTEx_RxEventCallback+0x50>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f022 0204 	bic.w	r2, r2, #4
 80002a8:	601a      	str	r2, [r3, #0]
	}
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40013800 	.word	0x40013800
 80002b8:	20000284 	.word	0x20000284
 80002bc:	20000220 	.word	0x20000220
 80002c0:	2000018c 	.word	0x2000018c
 80002c4:	200001d4 	.word	0x200001d4

080002c8 <CanMsgSend>:

	return 1;
}


uint8_t CanMsgSend(CanDataSendTypeDef *canDataSend) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

	TxHeader.StdId = canDataSend->canId;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a1e      	ldr	r2, [pc, #120]	; (8000350 <CanMsgSend+0x88>)
 80002d6:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = canDataSend->canExtId;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <CanMsgSend+0x88>)
 80002de:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = canDataSend->canRTR;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <CanMsgSend+0x88>)
 80002e6:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <CanMsgSend+0x88>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <CanMsgSend+0x88>)
 80002f0:	2208      	movs	r2, #8
 80002f2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <CanMsgSend+0x88>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	751a      	strb	r2, [r3, #20]
	//globData.can_mutex = 0;
	for (int i = 0; i < sizeof(TxData); i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	e00c      	b.n	800031a <CanMsgSend+0x52>
		TxData[i] = canDataSend->canData[i];
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	330c      	adds	r3, #12
 8000308:	7819      	ldrb	r1, [r3, #0]
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <CanMsgSend+0x8c>)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	460a      	mov	r2, r1
 8000312:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TxData); i++) {
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b07      	cmp	r3, #7
 800031e:	d9ef      	bls.n	8000300 <CanMsgSend+0x38>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8000320:	bf00      	nop
 8000322:	480d      	ldr	r0, [pc, #52]	; (8000358 <CanMsgSend+0x90>)
 8000324:	f002 fa19 	bl	800275a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <CanMsgSend+0x5a>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <CanMsgSend+0x94>)
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <CanMsgSend+0x8c>)
 8000332:	4907      	ldr	r1, [pc, #28]	; (8000350 <CanMsgSend+0x88>)
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <CanMsgSend+0x90>)
 8000336:	f002 f941 	bl	80025bc <HAL_CAN_AddTxMessage>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <CanMsgSend+0x7c>
		//HAL_UART_Transmit(&huart, (uint8_t*) "no_trans\r\n", 10, 100);
		return 0;
 8000340:	2300      	movs	r3, #0
 8000342:	e000      	b.n	8000346 <CanMsgSend+0x7e>
	}
	return 1;
 8000344:	2301      	movs	r3, #1
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000298 	.word	0x20000298
 8000354:	200002b0 	.word	0x200002b0
 8000358:	200000c4 	.word	0x200000c4
 800035c:	200002b8 	.word	0x200002b8

08000360 <Moving>:

void Moving() {
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

	CanDataSendTypeDef canDataSend;

	static int move_axis_en = 0;
	static int lift_axis_en = 0;
	if (start_stop) {
 8000366:	4b63      	ldr	r3, [pc, #396]	; (80004f4 <Moving+0x194>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	f000 808a 	beq.w	8000484 <Moving+0x124>
			canDataSend.canExtId = DRIVER_MOVE_ID + 0x06000000;
 8000370:	4b61      	ldr	r3, [pc, #388]	; (80004f8 <Moving+0x198>)
 8000372:	60bb      	str	r3, [r7, #8]
			canDataSend.canRTR = CAN_RTR_DATA;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
			if (!move_axis_en) {
 8000378:	4b60      	ldr	r3, [pc, #384]	; (80004fc <Moving+0x19c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d119      	bne.n	80003b4 <Moving+0x54>
				move_axis_en = 1;
 8000380:	4b5e      	ldr	r3, [pc, #376]	; (80004fc <Moving+0x19c>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8000386:	2323      	movs	r3, #35	; 0x23
 8000388:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 800038a:	230d      	movs	r3, #13
 800038c:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 800038e:	2320      	movs	r3, #32
 8000390:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x01;
 8000392:	2301      	movs	r3, #1
 8000394:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8000396:	2300      	movs	r3, #0
 8000398:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 800039a:	2300      	movs	r3, #0
 800039c:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 800039e:	2300      	movs	r3, #0
 80003a0:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff8d 	bl	80002c8 <CanMsgSend>
				HAL_Delay(10);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f001 fed8 	bl	8002164 <HAL_Delay>
			}
			if (!lift_axis_en) {
 80003b4:	4b52      	ldr	r3, [pc, #328]	; (8000500 <Moving+0x1a0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d119      	bne.n	80003f0 <Moving+0x90>
				lift_axis_en = 1;
 80003bc:	4b50      	ldr	r3, [pc, #320]	; (8000500 <Moving+0x1a0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 80003c2:	2323      	movs	r3, #35	; 0x23
 80003c4:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 80003c6:	230d      	movs	r3, #13
 80003c8:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 80003ca:	2320      	movs	r3, #32
 80003cc:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x02;
 80003ce:	2302      	movs	r3, #2
 80003d0:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 80003d2:	2300      	movs	r3, #0
 80003d4:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 80003d6:	2300      	movs	r3, #0
 80003d8:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 80003da:	2300      	movs	r3, #0
 80003dc:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80003de:	2300      	movs	r3, #0
 80003e0:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff6f 	bl	80002c8 <CanMsgSend>
				HAL_Delay(10);
 80003ea:	200a      	movs	r0, #10
 80003ec:	f001 feba 	bl	8002164 <HAL_Delay>
			}
			static int32_t ch_velocity = 0;
			//if (motor1_speed) { //(l_current_move_comm == MOVE_FORW) {
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)"can_send\r\n", 10, 100);
			canDataSend.canData[0] = 0x23;
 80003f0:	2323      	movs	r3, #35	; 0x23
 80003f2:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80003f8:	2320      	movs	r3, #32
 80003fa:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 80003fc:	2301      	movs	r3, #1
 80003fe:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 8000400:	4b40      	ldr	r3, [pc, #256]	; (8000504 <Moving+0x1a4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a40      	ldr	r2, [pc, #256]	; (8000508 <Moving+0x1a8>)
 8000406:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8000408:	4b3f      	ldr	r3, [pc, #252]	; (8000508 <Moving+0x1a8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	161b      	asrs	r3, r3, #24
 800040e:	b2db      	uxtb	r3, r3
 8000410:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8000412:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <Moving+0x1a8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	141b      	asrs	r3, r3, #16
 8000418:	b2db      	uxtb	r3, r3
 800041a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 800041c:	4b3a      	ldr	r3, [pc, #232]	; (8000508 <Moving+0x1a8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	121b      	asrs	r3, r3, #8
 8000422:	b2db      	uxtb	r3, r3
 8000424:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <Moving+0x1a8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff49 	bl	80002c8 <CanMsgSend>
			HAL_Delay(2);
 8000436:	2002      	movs	r0, #2
 8000438:	f001 fe94 	bl	8002164 <HAL_Delay>
			//}
			//else if (motor2_speed) {
			canDataSend.canData[0] = 0x23;
 800043c:	2323      	movs	r3, #35	; 0x23
 800043e:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8000440:	2300      	movs	r3, #0
 8000442:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8000444:	2320      	movs	r3, #32
 8000446:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8000448:	2302      	movs	r3, #2
 800044a:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <Moving+0x1a4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <Moving+0x1a8>)
 8000452:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <Moving+0x1a8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	161b      	asrs	r3, r3, #24
 800045a:	b2db      	uxtb	r3, r3
 800045c:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <Moving+0x1a8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	141b      	asrs	r3, r3, #16
 8000464:	b2db      	uxtb	r3, r3
 8000466:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <Moving+0x1a8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	121b      	asrs	r3, r3, #8
 800046e:	b2db      	uxtb	r3, r3
 8000470:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <Moving+0x1a8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff23 	bl	80002c8 <CanMsgSend>
 8000482:	e030      	b.n	80004e6 <Moving+0x186>
			//}
		}
		else
		{
			canDataSend.canData[0] = 0x23;
 8000484:	2323      	movs	r3, #35	; 0x23
 8000486:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8000488:	2300      	movs	r3, #0
 800048a:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 800048c:	2320      	movs	r3, #32
 800048e:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8000490:	2301      	movs	r3, #1
 8000492:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8000494:	2300      	movs	r3, #0
 8000496:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 8000498:	2300      	movs	r3, #0
 800049a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 800049c:	2300      	movs	r3, #0
 800049e:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80004a0:	2300      	movs	r3, #0
 80004a2:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff0e 	bl	80002c8 <CanMsgSend>
			HAL_Delay(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f001 fe59 	bl	8002164 <HAL_Delay>
			canDataSend.canData[0] = 0x23;
 80004b2:	2323      	movs	r3, #35	; 0x23
 80004b4:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80004ba:	2320      	movs	r3, #32
 80004bc:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 80004be:	2302      	movs	r3, #2
 80004c0:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 80004ca:	2300      	movs	r3, #0
 80004cc:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fef7 	bl	80002c8 <CanMsgSend>
			move_axis_en = 0;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <Moving+0x19c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
			lift_axis_en = 0;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <Moving+0x1a0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(5);
 80004e6:	2005      	movs	r0, #5
 80004e8:	f001 fe3c 	bl	8002164 <HAL_Delay>
}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000290 	.word	0x20000290
 80004f8:	06000001 	.word	0x06000001
 80004fc:	20000340 	.word	0x20000340
 8000500:	20000344 	.word	0x20000344
 8000504:	20000294 	.word	0x20000294
 8000508:	20000348 	.word	0x20000348

0800050c <get_bms_data>:

void get_bms_data()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if (!bms_detected) {
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <get_bms_data+0x50>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d109      	bne.n	800052c <get_bms_data+0x20>
		//HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
		HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2207      	movs	r2, #7
 800051c:	4910      	ldr	r1, [pc, #64]	; (8000560 <get_bms_data+0x54>)
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <get_bms_data+0x58>)
 8000520:	f003 ffba 	bl	8004498 <HAL_UART_Transmit>
		bms_detected = 1;
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <get_bms_data+0x50>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	e010      	b.n	800054e <get_bms_data+0x42>
	}
	else {
		if (smart_bms) HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <get_bms_data+0x5c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d006      	beq.n	8000542 <get_bms_data+0x36>
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	220d      	movs	r2, #13
 8000538:	490c      	ldr	r1, [pc, #48]	; (800056c <get_bms_data+0x60>)
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <get_bms_data+0x58>)
 800053c:	f003 ffac 	bl	8004498 <HAL_UART_Transmit>
 8000540:	e005      	b.n	800054e <get_bms_data+0x42>
		else HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	2207      	movs	r2, #7
 8000546:	4906      	ldr	r1, [pc, #24]	; (8000560 <get_bms_data+0x54>)
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <get_bms_data+0x58>)
 800054a:	f003 ffa5 	bl	8004498 <HAL_UART_Transmit>
	}
	bms_req_time = HAL_GetTick();
 800054e:	f001 fdff 	bl	8002150 <HAL_GetTick>
 8000552:	4603      	mov	r3, r0
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <get_bms_data+0x64>)
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000285 	.word	0x20000285
 8000560:	20000000 	.word	0x20000000
 8000564:	2000018c 	.word	0x2000018c
 8000568:	20000286 	.word	0x20000286
 800056c:	20000010 	.word	0x20000010
 8000570:	20000288 	.word	0x20000288

08000574 <read_bms_uart>:
void read_bms_uart() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	if (new_bms_data)
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <read_bms_uart+0x5c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d004      	beq.n	800058a <read_bms_uart+0x16>
	{
		new_bms_data = 0;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <read_bms_uart+0x5c>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
		//bms_err = 0;
		rcGetBattery();
 8000586:	f000 f82f 	bl	80005e8 <rcGetBattery>
	}
	if (bms_detected && batteryMsg.bms_type == BMS_NONE)
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <read_bms_uart+0x60>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d01b      	beq.n	80005ca <read_bms_uart+0x56>
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <read_bms_uart+0x64>)
 8000594:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000598:	2b00      	cmp	r3, #0
 800059a:	d116      	bne.n	80005ca <read_bms_uart+0x56>
	{
		if (HAL_GetTick() - bms_req_time > 1000) {
 800059c:	f001 fdd8 	bl	8002150 <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <read_bms_uart+0x68>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	1ad3      	subs	r3, r2, r3
 80005a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005ac:	d90d      	bls.n	80005ca <read_bms_uart+0x56>
			bms_req_time = HAL_GetTick();
 80005ae:	f001 fdcf 	bl	8002150 <HAL_GetTick>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a09      	ldr	r2, [pc, #36]	; (80005dc <read_bms_uart+0x68>)
 80005b6:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	220d      	movs	r2, #13
 80005bc:	4908      	ldr	r1, [pc, #32]	; (80005e0 <read_bms_uart+0x6c>)
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <read_bms_uart+0x70>)
 80005c0:	f003 ff6a 	bl	8004498 <HAL_UART_Transmit>
			bms_detected = 0;
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <read_bms_uart+0x60>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000284 	.word	0x20000284
 80005d4:	20000285 	.word	0x20000285
 80005d8:	200002c0 	.word	0x200002c0
 80005dc:	20000288 	.word	0x20000288
 80005e0:	20000010 	.word	0x20000010
 80005e4:	2000018c 	.word	0x2000018c

080005e8 <rcGetBattery>:

void rcGetBattery() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	if (bms_uart_buff[0] == 0xDD) smart_bms = 0;
 80005ee:	4b87      	ldr	r3, [pc, #540]	; (800080c <rcGetBattery+0x224>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2bdd      	cmp	r3, #221	; 0xdd
 80005f4:	d103      	bne.n	80005fe <rcGetBattery+0x16>
 80005f6:	4b86      	ldr	r3, [pc, #536]	; (8000810 <rcGetBattery+0x228>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e006      	b.n	800060c <rcGetBattery+0x24>
	else if (bms_uart_buff[0] == 0xA5) smart_bms = 1;
 80005fe:	4b83      	ldr	r3, [pc, #524]	; (800080c <rcGetBattery+0x224>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2ba5      	cmp	r3, #165	; 0xa5
 8000604:	d102      	bne.n	800060c <rcGetBattery+0x24>
 8000606:	4b82      	ldr	r3, [pc, #520]	; (8000810 <rcGetBattery+0x228>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	if (smart_bms)
 800060c:	4b80      	ldr	r3, [pc, #512]	; (8000810 <rcGetBattery+0x228>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	f000 819f 	beq.w	8000954 <rcGetBattery+0x36c>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 8000616:	4b7d      	ldr	r3, [pc, #500]	; (800080c <rcGetBattery+0x224>)
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b90      	cmp	r3, #144	; 0x90
 8000620:	d133      	bne.n	800068a <rcGetBattery+0xa2>
		{
			batteryMsg.bms_type = BMS_SMART;
 8000622:	4b7c      	ldr	r3, [pc, #496]	; (8000814 <rcGetBattery+0x22c>)
 8000624:	2201      	movs	r2, #1
 8000626:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 800062a:	4b78      	ldr	r3, [pc, #480]	; (800080c <rcGetBattery+0x224>)
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	b29b      	uxth	r3, r3
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b75      	ldr	r3, [pc, #468]	; (800080c <rcGetBattery+0x224>)
 8000636:	795b      	ldrb	r3, [r3, #5]
 8000638:	b29b      	uxth	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b75      	ldr	r3, [pc, #468]	; (8000814 <rcGetBattery+0x22c>)
 8000640:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8000642:	4b72      	ldr	r3, [pc, #456]	; (800080c <rcGetBattery+0x224>)
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	b29b      	uxth	r3, r3
 8000648:	021b      	lsls	r3, r3, #8
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b6f      	ldr	r3, [pc, #444]	; (800080c <rcGetBattery+0x224>)
 800064e:	7a5b      	ldrb	r3, [r3, #9]
 8000650:	b29b      	uxth	r3, r3
 8000652:	4413      	add	r3, r2
 8000654:	b29b      	uxth	r3, r3
 8000656:	b21a      	sxth	r2, r3
 8000658:	4b6e      	ldr	r3, [pc, #440]	; (8000814 <rcGetBattery+0x22c>)
 800065a:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 800065c:	4b6b      	ldr	r3, [pc, #428]	; (800080c <rcGetBattery+0x224>)
 800065e:	7a9b      	ldrb	r3, [r3, #10]
 8000660:	b29b      	uxth	r3, r3
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <rcGetBattery+0x224>)
 8000668:	7adb      	ldrb	r3, [r3, #11]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4413      	add	r3, r2
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b68      	ldr	r3, [pc, #416]	; (8000814 <rcGetBattery+0x22c>)
 8000672:	835a      	strh	r2, [r3, #26]
			battery_capacity = batteryMsg.capacity_percent/10;
 8000674:	4b67      	ldr	r3, [pc, #412]	; (8000814 <rcGetBattery+0x22c>)
 8000676:	8b5b      	ldrh	r3, [r3, #26]
 8000678:	4a67      	ldr	r2, [pc, #412]	; (8000818 <rcGetBattery+0x230>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	b29b      	uxth	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	4b65      	ldr	r3, [pc, #404]	; (800081c <rcGetBattery+0x234>)
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	e146      	b.n	8000918 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x91)
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	2b91      	cmp	r3, #145	; 0x91
 800068e:	d118      	bne.n	80006c2 <rcGetBattery+0xda>
		{
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8000690:	4b5e      	ldr	r3, [pc, #376]	; (800080c <rcGetBattery+0x224>)
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	b29b      	uxth	r3, r3
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b5c      	ldr	r3, [pc, #368]	; (800080c <rcGetBattery+0x224>)
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	b29b      	uxth	r3, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b5b      	ldr	r3, [pc, #364]	; (8000814 <rcGetBattery+0x22c>)
 80006a6:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 80006a8:	4b58      	ldr	r3, [pc, #352]	; (800080c <rcGetBattery+0x224>)
 80006aa:	79db      	ldrb	r3, [r3, #7]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b56      	ldr	r3, [pc, #344]	; (800080c <rcGetBattery+0x224>)
 80006b4:	7a1b      	ldrb	r3, [r3, #8]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	4413      	add	r3, r2
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b55      	ldr	r3, [pc, #340]	; (8000814 <rcGetBattery+0x22c>)
 80006be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80006c0:	e12a      	b.n	8000918 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x92)
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	2b92      	cmp	r3, #146	; 0x92
 80006c6:	f000 8127 	beq.w	8000918 <rcGetBattery+0x330>
		{

		}
		else if (battery_comm == 0x93)
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b93      	cmp	r3, #147	; 0x93
 80006ce:	d111      	bne.n	80006f4 <rcGetBattery+0x10c>
		{
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 80006d0:	4b4e      	ldr	r3, [pc, #312]	; (800080c <rcGetBattery+0x224>)
 80006d2:	7a1b      	ldrb	r3, [r3, #8]
 80006d4:	061a      	lsls	r2, r3, #24
 80006d6:	4b4d      	ldr	r3, [pc, #308]	; (800080c <rcGetBattery+0x224>)
 80006d8:	7a5b      	ldrb	r3, [r3, #9]
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	441a      	add	r2, r3
 80006de:	4b4b      	ldr	r3, [pc, #300]	; (800080c <rcGetBattery+0x224>)
 80006e0:	7a9b      	ldrb	r3, [r3, #10]
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	4413      	add	r3, r2
 80006e6:	4a49      	ldr	r2, [pc, #292]	; (800080c <rcGetBattery+0x224>)
 80006e8:	7ad2      	ldrb	r2, [r2, #11]
 80006ea:	4413      	add	r3, r2
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b49      	ldr	r3, [pc, #292]	; (8000814 <rcGetBattery+0x22c>)
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	e111      	b.n	8000918 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x94)
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b94      	cmp	r3, #148	; 0x94
 80006f8:	d108      	bne.n	800070c <rcGetBattery+0x124>
		{
			batteryMsg.num_of_battery = bms_uart_buff[4];
 80006fa:	4b44      	ldr	r3, [pc, #272]	; (800080c <rcGetBattery+0x224>)
 80006fc:	791a      	ldrb	r2, [r3, #4]
 80006fe:	4b45      	ldr	r3, [pc, #276]	; (8000814 <rcGetBattery+0x22c>)
 8000700:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 8000702:	4b42      	ldr	r3, [pc, #264]	; (800080c <rcGetBattery+0x224>)
 8000704:	795a      	ldrb	r2, [r3, #5]
 8000706:	4b43      	ldr	r3, [pc, #268]	; (8000814 <rcGetBattery+0x22c>)
 8000708:	77da      	strb	r2, [r3, #31]
 800070a:	e105      	b.n	8000918 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x95)
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	2b95      	cmp	r3, #149	; 0x95
 8000710:	f040 80f5 	bne.w	80008fe <rcGetBattery+0x316>
		{
			if (bms_uart_buff[4] == 0x01)
 8000714:	4b3d      	ldr	r3, [pc, #244]	; (800080c <rcGetBattery+0x224>)
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d124      	bne.n	8000766 <rcGetBattery+0x17e>
			{
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 800071c:	4b3b      	ldr	r3, [pc, #236]	; (800080c <rcGetBattery+0x224>)
 800071e:	795b      	ldrb	r3, [r3, #5]
 8000720:	b29b      	uxth	r3, r3
 8000722:	021b      	lsls	r3, r3, #8
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <rcGetBattery+0x224>)
 8000728:	799b      	ldrb	r3, [r3, #6]
 800072a:	b29b      	uxth	r3, r3
 800072c:	4413      	add	r3, r2
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <rcGetBattery+0x22c>)
 8000732:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000734:	4b35      	ldr	r3, [pc, #212]	; (800080c <rcGetBattery+0x224>)
 8000736:	79db      	ldrb	r3, [r3, #7]
 8000738:	b29b      	uxth	r3, r3
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b33      	ldr	r3, [pc, #204]	; (800080c <rcGetBattery+0x224>)
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	b29b      	uxth	r3, r3
 8000744:	4413      	add	r3, r2
 8000746:	b29a      	uxth	r2, r3
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <rcGetBattery+0x22c>)
 800074a:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 800074c:	4b2f      	ldr	r3, [pc, #188]	; (800080c <rcGetBattery+0x224>)
 800074e:	7a5b      	ldrb	r3, [r3, #9]
 8000750:	b29b      	uxth	r3, r3
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <rcGetBattery+0x224>)
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	b29b      	uxth	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <rcGetBattery+0x22c>)
 8000762:	861a      	strh	r2, [r3, #48]	; 0x30
 8000764:	e0c4      	b.n	80008f0 <rcGetBattery+0x308>
			}
			else if (bms_uart_buff[4] == 0x02)
 8000766:	4b29      	ldr	r3, [pc, #164]	; (800080c <rcGetBattery+0x224>)
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d124      	bne.n	80007b8 <rcGetBattery+0x1d0>
			{
				batteryMsg.cell_3 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 800076e:	4b27      	ldr	r3, [pc, #156]	; (800080c <rcGetBattery+0x224>)
 8000770:	795b      	ldrb	r3, [r3, #5]
 8000772:	b29b      	uxth	r3, r3
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <rcGetBattery+0x224>)
 800077a:	799b      	ldrb	r3, [r3, #6]
 800077c:	b29b      	uxth	r3, r3
 800077e:	4413      	add	r3, r2
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <rcGetBattery+0x22c>)
 8000784:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <rcGetBattery+0x224>)
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	b29b      	uxth	r3, r3
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <rcGetBattery+0x224>)
 8000792:	7a1b      	ldrb	r3, [r3, #8]
 8000794:	b29b      	uxth	r3, r3
 8000796:	4413      	add	r3, r2
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <rcGetBattery+0x22c>)
 800079c:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <rcGetBattery+0x224>)
 80007a0:	7a5b      	ldrb	r3, [r3, #9]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <rcGetBattery+0x224>)
 80007aa:	7a9b      	ldrb	r3, [r3, #10]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <rcGetBattery+0x22c>)
 80007b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80007b6:	e09b      	b.n	80008f0 <rcGetBattery+0x308>
				//batteryMsg.cell_3 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
				//batteryMsg.cell_4 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
				//batteryMsg.cell_5 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
			}
			else if (bms_uart_buff[4] == 0x03)
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <rcGetBattery+0x224>)
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d12f      	bne.n	8000820 <rcGetBattery+0x238>
			{
				batteryMsg.cell_6 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <rcGetBattery+0x224>)
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <rcGetBattery+0x224>)
 80007cc:	799b      	ldrb	r3, [r3, #6]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4413      	add	r3, r2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <rcGetBattery+0x22c>)
 80007d6:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <rcGetBattery+0x224>)
 80007da:	79db      	ldrb	r3, [r3, #7]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <rcGetBattery+0x224>)
 80007e4:	7a1b      	ldrb	r3, [r3, #8]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4413      	add	r3, r2
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <rcGetBattery+0x22c>)
 80007ee:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <rcGetBattery+0x224>)
 80007f2:	7a5b      	ldrb	r3, [r3, #9]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <rcGetBattery+0x224>)
 80007fc:	7a9b      	ldrb	r3, [r3, #10]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4413      	add	r3, r2
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <rcGetBattery+0x22c>)
 8000806:	879a      	strh	r2, [r3, #60]	; 0x3c
 8000808:	e072      	b.n	80008f0 <rcGetBattery+0x308>
 800080a:	bf00      	nop
 800080c:	20000220 	.word	0x20000220
 8000810:	20000286 	.word	0x20000286
 8000814:	200002c0 	.word	0x200002c0
 8000818:	cccccccd 	.word	0xcccccccd
 800081c:	2000028c 	.word	0x2000028c
				//batteryMsg.cell_6 = (bms_uart_buff[27] << 8) + bms_uart_buff[28];
				//batteryMsg.cell_7 = (bms_uart_buff[29] << 8) + bms_uart_buff[30];
				//batteryMsg.cell_8 = (bms_uart_buff[31] << 8) + bms_uart_buff[32];
			}
			else if (bms_uart_buff[4] == 0x04)
 8000820:	4b49      	ldr	r3, [pc, #292]	; (8000948 <rcGetBattery+0x360>)
 8000822:	791b      	ldrb	r3, [r3, #4]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d126      	bne.n	8000876 <rcGetBattery+0x28e>
			{
				batteryMsg.cell_9 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8000828:	4b47      	ldr	r3, [pc, #284]	; (8000948 <rcGetBattery+0x360>)
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	b29b      	uxth	r3, r3
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b45      	ldr	r3, [pc, #276]	; (8000948 <rcGetBattery+0x360>)
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	b29b      	uxth	r3, r3
 8000838:	4413      	add	r3, r2
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b43      	ldr	r3, [pc, #268]	; (800094c <rcGetBattery+0x364>)
 800083e:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000840:	4b41      	ldr	r3, [pc, #260]	; (8000948 <rcGetBattery+0x360>)
 8000842:	79db      	ldrb	r3, [r3, #7]
 8000844:	b29b      	uxth	r3, r3
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <rcGetBattery+0x360>)
 800084c:	7a1b      	ldrb	r3, [r3, #8]
 800084e:	b29b      	uxth	r3, r3
 8000850:	4413      	add	r3, r2
 8000852:	b29a      	uxth	r2, r3
 8000854:	4b3d      	ldr	r3, [pc, #244]	; (800094c <rcGetBattery+0x364>)
 8000856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <rcGetBattery+0x360>)
 800085c:	7a5b      	ldrb	r3, [r3, #9]
 800085e:	b29b      	uxth	r3, r3
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	b29a      	uxth	r2, r3
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <rcGetBattery+0x360>)
 8000866:	7a9b      	ldrb	r3, [r3, #10]
 8000868:	b29b      	uxth	r3, r3
 800086a:	4413      	add	r3, r2
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <rcGetBattery+0x364>)
 8000870:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8000874:	e03c      	b.n	80008f0 <rcGetBattery+0x308>
				//batteryMsg.cell_9 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
				//batteryMsg.cell_10 = (bms_uart_buff[36] << 8) + bms_uart_buff[37];
				//batteryMsg.cell_11 = (bms_uart_buff[38] << 8) + bms_uart_buff[39];
			}
			else if (bms_uart_buff[4] == 0x05)
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <rcGetBattery+0x360>)
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	2b05      	cmp	r3, #5
 800087c:	d127      	bne.n	80008ce <rcGetBattery+0x2e6>
			{
				batteryMsg.cell_12 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <rcGetBattery+0x360>)
 8000880:	795b      	ldrb	r3, [r3, #5]
 8000882:	b29b      	uxth	r3, r3
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <rcGetBattery+0x360>)
 800088a:	799b      	ldrb	r3, [r3, #6]
 800088c:	b29b      	uxth	r3, r3
 800088e:	4413      	add	r3, r2
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <rcGetBattery+0x364>)
 8000894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000898:	4b2b      	ldr	r3, [pc, #172]	; (8000948 <rcGetBattery+0x360>)
 800089a:	79db      	ldrb	r3, [r3, #7]
 800089c:	b29b      	uxth	r3, r3
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <rcGetBattery+0x360>)
 80008a4:	7a1b      	ldrb	r3, [r3, #8]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4413      	add	r3, r2
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <rcGetBattery+0x364>)
 80008ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <rcGetBattery+0x360>)
 80008b4:	7a5b      	ldrb	r3, [r3, #9]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <rcGetBattery+0x360>)
 80008be:	7a9b      	ldrb	r3, [r3, #10]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <rcGetBattery+0x364>)
 80008c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80008cc:	e010      	b.n	80008f0 <rcGetBattery+0x308>
				//batteryMsg.cell_12 = (bms_uart_buff[40] << 8) + bms_uart_buff[41];
				//batteryMsg.cell_13 = (bms_uart_buff[42] << 8) + bms_uart_buff[43];
				//batteryMsg.cell_14 = (bms_uart_buff[44] << 8) + bms_uart_buff[45];
			}
			else if (bms_uart_buff[4] == 0x06)
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <rcGetBattery+0x360>)
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d10c      	bne.n	80008f0 <rcGetBattery+0x308>
			{
				batteryMsg.cell_15 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <rcGetBattery+0x360>)
 80008d8:	795b      	ldrb	r3, [r3, #5]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	b29a      	uxth	r2, r3
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <rcGetBattery+0x360>)
 80008e2:	799b      	ldrb	r3, [r3, #6]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	4413      	add	r3, r2
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <rcGetBattery+0x364>)
 80008ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				//batteryMsg.cell_15 = (bms_uart_buff[47] << 8) + bms_uart_buff[48];
			}
			bms_smart_request_msg[2] = 0x95;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <rcGetBattery+0x368>)
 80008f2:	2295      	movs	r2, #149	; 0x95
 80008f4:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <rcGetBattery+0x368>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	731a      	strb	r2, [r3, #12]
 80008fc:	e00c      	b.n	8000918 <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x96)
 80008fe:	79bb      	ldrb	r3, [r7, #6]
 8000900:	2b96      	cmp	r3, #150	; 0x96
 8000902:	d109      	bne.n	8000918 <rcGetBattery+0x330>
		{
			batteryMsg.temp1 = bms_uart_buff[5]; //-40 to convert
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <rcGetBattery+0x360>)
 8000906:	795b      	ldrb	r3, [r3, #5]
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <rcGetBattery+0x364>)
 800090c:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = bms_uart_buff[6];
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <rcGetBattery+0x360>)
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	b29a      	uxth	r2, r3
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <rcGetBattery+0x364>)
 8000916:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		bms_smart_request_msg[2]++;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <rcGetBattery+0x368>)
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	3301      	adds	r3, #1
 800091e:	b2da      	uxtb	r2, r3
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <rcGetBattery+0x368>)
 8000922:	709a      	strb	r2, [r3, #2]
		bms_smart_request_msg[12]++;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <rcGetBattery+0x368>)
 8000926:	7b1b      	ldrb	r3, [r3, #12]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <rcGetBattery+0x368>)
 800092e:	731a      	strb	r2, [r3, #12]
		if (bms_smart_request_msg[2] > 0x96)
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <rcGetBattery+0x368>)
 8000932:	789b      	ldrb	r3, [r3, #2]
 8000934:	2b96      	cmp	r3, #150	; 0x96
 8000936:	f240 818e 	bls.w	8000c56 <rcGetBattery+0x66e>
		{
			bms_smart_request_msg[2] = 0x90;
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <rcGetBattery+0x368>)
 800093c:	2290      	movs	r2, #144	; 0x90
 800093e:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x7D;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <rcGetBattery+0x368>)
 8000942:	227d      	movs	r2, #125	; 0x7d
 8000944:	731a      	strb	r2, [r3, #12]
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
		}
	}
}
 8000946:	e186      	b.n	8000c56 <rcGetBattery+0x66e>
 8000948:	20000220 	.word	0x20000220
 800094c:	200002c0 	.word	0x200002c0
 8000950:	20000010 	.word	0x20000010
		uint8_t battery_comm = bms_uart_buff[1];
 8000954:	4b51      	ldr	r3, [pc, #324]	; (8000a9c <rcGetBattery+0x4b4>)
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b03      	cmp	r3, #3
 800095e:	f040 80a7 	bne.w	8000ab0 <rcGetBattery+0x4c8>
			batteryMsg.bms_type = BMS_JBD;
 8000962:	4b4f      	ldr	r3, [pc, #316]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000964:	2202      	movs	r2, #2
 8000966:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <rcGetBattery+0x4b4>)
 800096c:	791b      	ldrb	r3, [r3, #4]
 800096e:	b29b      	uxth	r3, r3
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	b29a      	uxth	r2, r3
 8000974:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <rcGetBattery+0x4b4>)
 8000976:	795b      	ldrb	r3, [r3, #5]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	b29a      	uxth	r2, r3
 800097e:	4b48      	ldr	r3, [pc, #288]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000980:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000984:	2200      	movs	r2, #0
 8000986:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <rcGetBattery+0x4b4>)
 800098a:	7a1b      	ldrb	r3, [r3, #8]
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <rcGetBattery+0x4b4>)
 8000990:	7a52      	ldrb	r2, [r2, #9]
 8000992:	4413      	add	r3, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000998:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <rcGetBattery+0x4b4>)
 800099c:	7a9b      	ldrb	r3, [r3, #10]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <rcGetBattery+0x4b4>)
 80009a6:	7adb      	ldrb	r3, [r3, #11]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4413      	add	r3, r2
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <rcGetBattery+0x4b8>)
 80009b0:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <rcGetBattery+0x4b4>)
 80009b4:	7b1b      	ldrb	r3, [r3, #12]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <rcGetBattery+0x4b4>)
 80009be:	7b5b      	ldrb	r3, [r3, #13]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	4413      	add	r3, r2
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <rcGetBattery+0x4b8>)
 80009c8:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <rcGetBattery+0x4b4>)
 80009cc:	7b9b      	ldrb	r3, [r3, #14]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <rcGetBattery+0x4b4>)
 80009d6:	7bdb      	ldrb	r3, [r3, #15]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4413      	add	r3, r2
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <rcGetBattery+0x4b8>)
 80009e0:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <rcGetBattery+0x4b4>)
 80009e4:	7c1b      	ldrb	r3, [r3, #16]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <rcGetBattery+0x4b4>)
 80009ee:	7c5b      	ldrb	r3, [r3, #17]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4413      	add	r3, r2
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <rcGetBattery+0x4b8>)
 80009f8:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <rcGetBattery+0x4b4>)
 80009fc:	7c9b      	ldrb	r3, [r3, #18]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	021b      	lsls	r3, r3, #8
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a06:	7cdb      	ldrb	r3, [r3, #19]
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a10:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a14:	7d1b      	ldrb	r3, [r3, #20]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a1e:	7d5b      	ldrb	r3, [r3, #21]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a28:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a2c:	7d9a      	ldrb	r2, [r3, #22]
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a30:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a34:	7ddb      	ldrb	r3, [r3, #23]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a3a:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a3e:	7e1a      	ldrb	r2, [r3, #24]
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a42:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a46:	7e5a      	ldrb	r2, [r3, #25]
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a4a:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a4e:	7e9a      	ldrb	r2, [r3, #26]
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a52:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a56:	7edb      	ldrb	r3, [r3, #27]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a60:	7f1b      	ldrb	r3, [r3, #28]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4413      	add	r3, r2
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a6a:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a6e:	7f5b      	ldrb	r3, [r3, #29]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	021b      	lsls	r3, r3, #8
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <rcGetBattery+0x4b4>)
 8000a78:	7f9b      	ldrb	r3, [r3, #30]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a82:	845a      	strh	r2, [r3, #34]	; 0x22
			battery_capacity = batteryMsg.capacity_percent;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <rcGetBattery+0x4b8>)
 8000a86:	8b5b      	ldrh	r3, [r3, #26]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <rcGetBattery+0x4bc>)
 8000a8c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	2207      	movs	r2, #7
 8000a92:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <rcGetBattery+0x4c0>)
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <rcGetBattery+0x4c4>)
 8000a96:	f003 fcff 	bl	8004498 <HAL_UART_Transmit>
}
 8000a9a:	e0dc      	b.n	8000c56 <rcGetBattery+0x66e>
 8000a9c:	20000220 	.word	0x20000220
 8000aa0:	200002c0 	.word	0x200002c0
 8000aa4:	2000028c 	.word	0x2000028c
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	2000018c 	.word	0x2000018c
		else if (battery_comm == 0x04)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	f040 80cf 	bne.w	8000c56 <rcGetBattery+0x66e>
			batteryMsg.battery_pack = bms_uart_buff[3];
 8000ab8:	4b69      	ldr	r3, [pc, #420]	; (8000c60 <rcGetBattery+0x678>)
 8000aba:	78da      	ldrb	r2, [r3, #3]
 8000abc:	4b69      	ldr	r3, [pc, #420]	; (8000c64 <rcGetBattery+0x67c>)
 8000abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8000ac2:	4b67      	ldr	r3, [pc, #412]	; (8000c60 <rcGetBattery+0x678>)
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	021b      	lsls	r3, r3, #8
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b64      	ldr	r3, [pc, #400]	; (8000c60 <rcGetBattery+0x678>)
 8000ace:	795b      	ldrb	r3, [r3, #5]
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b63      	ldr	r3, [pc, #396]	; (8000c64 <rcGetBattery+0x67c>)
 8000ad8:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8000ada:	4b61      	ldr	r3, [pc, #388]	; (8000c60 <rcGetBattery+0x678>)
 8000adc:	799b      	ldrb	r3, [r3, #6]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b5e      	ldr	r3, [pc, #376]	; (8000c60 <rcGetBattery+0x678>)
 8000ae6:	79db      	ldrb	r3, [r3, #7]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	4b5d      	ldr	r3, [pc, #372]	; (8000c64 <rcGetBattery+0x67c>)
 8000af0:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8000af2:	4b5b      	ldr	r3, [pc, #364]	; (8000c60 <rcGetBattery+0x678>)
 8000af4:	7a1b      	ldrb	r3, [r3, #8]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b58      	ldr	r3, [pc, #352]	; (8000c60 <rcGetBattery+0x678>)
 8000afe:	7a5b      	ldrb	r3, [r3, #9]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b57      	ldr	r3, [pc, #348]	; (8000c64 <rcGetBattery+0x67c>)
 8000b08:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8000b0a:	4b55      	ldr	r3, [pc, #340]	; (8000c60 <rcGetBattery+0x678>)
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	021b      	lsls	r3, r3, #8
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b52      	ldr	r3, [pc, #328]	; (8000c60 <rcGetBattery+0x678>)
 8000b16:	7adb      	ldrb	r3, [r3, #11]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b51      	ldr	r3, [pc, #324]	; (8000c64 <rcGetBattery+0x67c>)
 8000b20:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 8000b22:	4b4f      	ldr	r3, [pc, #316]	; (8000c60 <rcGetBattery+0x678>)
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	021b      	lsls	r3, r3, #8
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	; (8000c60 <rcGetBattery+0x678>)
 8000b2e:	7b5b      	ldrb	r3, [r3, #13]
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4413      	add	r3, r2
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <rcGetBattery+0x67c>)
 8000b38:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8000b3a:	4b49      	ldr	r3, [pc, #292]	; (8000c60 <rcGetBattery+0x678>)
 8000b3c:	7b9b      	ldrb	r3, [r3, #14]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	4b46      	ldr	r3, [pc, #280]	; (8000c60 <rcGetBattery+0x678>)
 8000b46:	7bdb      	ldrb	r3, [r3, #15]
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	4b45      	ldr	r3, [pc, #276]	; (8000c64 <rcGetBattery+0x67c>)
 8000b50:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 8000b52:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <rcGetBattery+0x678>)
 8000b54:	7c1b      	ldrb	r3, [r3, #16]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b40      	ldr	r3, [pc, #256]	; (8000c60 <rcGetBattery+0x678>)
 8000b5e:	7c5b      	ldrb	r3, [r3, #17]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	4b3f      	ldr	r3, [pc, #252]	; (8000c64 <rcGetBattery+0x67c>)
 8000b68:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8000b6a:	4b3d      	ldr	r3, [pc, #244]	; (8000c60 <rcGetBattery+0x678>)
 8000b6c:	7c9b      	ldrb	r3, [r3, #18]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <rcGetBattery+0x678>)
 8000b76:	7cdb      	ldrb	r3, [r3, #19]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <rcGetBattery+0x67c>)
 8000b80:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8000b82:	4b37      	ldr	r3, [pc, #220]	; (8000c60 <rcGetBattery+0x678>)
 8000b84:	7d1b      	ldrb	r3, [r3, #20]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <rcGetBattery+0x678>)
 8000b8e:	7d5b      	ldrb	r3, [r3, #21]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <rcGetBattery+0x67c>)
 8000b98:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 8000b9a:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <rcGetBattery+0x678>)
 8000b9c:	7d9b      	ldrb	r3, [r3, #22]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <rcGetBattery+0x678>)
 8000ba6:	7ddb      	ldrb	r3, [r3, #23]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	4413      	add	r3, r2
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <rcGetBattery+0x67c>)
 8000bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <rcGetBattery+0x678>)
 8000bb4:	7e1b      	ldrb	r3, [r3, #24]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <rcGetBattery+0x678>)
 8000bbe:	7e5b      	ldrb	r3, [r3, #25]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <rcGetBattery+0x67c>)
 8000bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <rcGetBattery+0x678>)
 8000bce:	7e9b      	ldrb	r3, [r3, #26]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <rcGetBattery+0x678>)
 8000bd8:	7edb      	ldrb	r3, [r3, #27]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	4413      	add	r3, r2
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <rcGetBattery+0x67c>)
 8000be2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 8000be6:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <rcGetBattery+0x678>)
 8000be8:	7f1b      	ldrb	r3, [r3, #28]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <rcGetBattery+0x678>)
 8000bf2:	7f5b      	ldrb	r3, [r3, #29]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <rcGetBattery+0x67c>)
 8000bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <rcGetBattery+0x678>)
 8000c02:	7f9b      	ldrb	r3, [r3, #30]
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <rcGetBattery+0x678>)
 8000c0c:	7fdb      	ldrb	r3, [r3, #31]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <rcGetBattery+0x67c>)
 8000c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <rcGetBattery+0x678>)
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <rcGetBattery+0x678>)
 8000c28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <rcGetBattery+0x67c>)
 8000c34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <rcGetBattery+0x678>)
 8000c3a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <rcGetBattery+0x678>)
 8000c46:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <rcGetBattery+0x67c>)
 8000c52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000220 	.word	0x20000220
 8000c64:	200002c0 	.word	0x200002c0

08000c68 <unwrap_encoder>:

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000c7a:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000c8c:	425a      	negs	r2, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b292      	uxth	r2, r2
 8000c92:	bf58      	it	pl
 8000c94:	4253      	negpl	r3, r2
 8000c96:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000c9a:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000ca2:	da03      	bge.n	8000cac <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000caa:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <getEncoder>:

void getEncoder()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	int currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <getEncoder+0x28>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	607b      	str	r3, [r7, #4]
	enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <getEncoder+0x2c>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ffc1 	bl	8000c68 <unwrap_encoder>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <getEncoder+0x30>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000144 	.word	0x20000144
 8000cf8:	20000218 	.word	0x20000218
 8000cfc:	2000021c 	.word	0x2000021c

08000d00 <buttons_Init>:

void buttons_Init()
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
	stButtons[0].button_port = BUTTON1_GPIO_Port;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <buttons_Init+0x44>)
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <buttons_Init+0x48>)
 8000d08:	601a      	str	r2, [r3, #0]
	stButtons[0].button_pin = BUTTON1_Pin;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <buttons_Init+0x44>)
 8000d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d10:	809a      	strh	r2, [r3, #4]
	stButtons[1].button_port = BUTTON2_GPIO_Port;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <buttons_Init+0x44>)
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <buttons_Init+0x48>)
 8000d16:	60da      	str	r2, [r3, #12]
	stButtons[1].button_pin = BUTTON2_Pin;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <buttons_Init+0x44>)
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	821a      	strh	r2, [r3, #16]
	stButtons[2].button_port = BUTTON3_GPIO_Port;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <buttons_Init+0x44>)
 8000d22:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <buttons_Init+0x48>)
 8000d24:	619a      	str	r2, [r3, #24]
	stButtons[2].button_pin = BUTTON3_Pin;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <buttons_Init+0x44>)
 8000d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2c:	839a      	strh	r2, [r3, #28]
	stButtons[3].button_port = BUTTON4_GPIO_Port;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <buttons_Init+0x44>)
 8000d30:	4a05      	ldr	r2, [pc, #20]	; (8000d48 <buttons_Init+0x48>)
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
	stButtons[3].button_pin = BUTTON4_Pin;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <buttons_Init+0x44>)
 8000d36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d3a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr
 8000d44:	20000310 	.word	0x20000310
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <getButton>:
uint8_t short_state = 0;
uint8_t long_state = 0;
uint32_t time_key1 = 0;

void getButton()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	e121      	b.n	8000f9c <getButton+0x250>
	{
		uint32_t ms = HAL_GetTick();
 8000d58:	f001 f9fa 	bl	8002150 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
		uint8_t key_state = HAL_GPIO_ReadPin(stButtons[i].button_port, stButtons[i].button_pin);
 8000d5e:	4994      	ldr	r1, [pc, #592]	; (8000fb0 <getButton+0x264>)
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	440b      	add	r3, r1
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	4990      	ldr	r1, [pc, #576]	; (8000fb0 <getButton+0x264>)
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f002 fa77 	bl	8003274 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
		if(key_state == 0 && !stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d136      	bne.n	8000dfe <getButton+0xb2>
 8000d90:	4987      	ldr	r1, [pc, #540]	; (8000fb0 <getButton+0x264>)
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3306      	adds	r3, #6
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d12b      	bne.n	8000dfe <getButton+0xb2>
 8000da6:	4982      	ldr	r1, [pc, #520]	; (8000fb0 <getButton+0x264>)
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	3308      	adds	r3, #8
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b32      	cmp	r3, #50	; 0x32
 8000dbe:	d91e      	bls.n	8000dfe <getButton+0xb2>
		{
			stButtons[i].short_state = 1;
 8000dc0:	497b      	ldr	r1, [pc, #492]	; (8000fb0 <getButton+0x264>)
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	440b      	add	r3, r1
 8000dce:	3306      	adds	r3, #6
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
			stButtons[i].long_state = 0;
 8000dd4:	4976      	ldr	r1, [pc, #472]	; (8000fb0 <getButton+0x264>)
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	3307      	adds	r3, #7
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8000de8:	4971      	ldr	r1, [pc, #452]	; (8000fb0 <getButton+0x264>)
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	3308      	adds	r3, #8
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e0cb      	b.n	8000f96 <getButton+0x24a>
		}
		else if(key_state == 0 && !stButtons[i].long_state && (ms - stButtons[i].time_key) > 1000)
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d13b      	bne.n	8000e7c <getButton+0x130>
 8000e04:	496a      	ldr	r1, [pc, #424]	; (8000fb0 <getButton+0x264>)
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3307      	adds	r3, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d130      	bne.n	8000e7c <getButton+0x130>
 8000e1a:	4965      	ldr	r1, [pc, #404]	; (8000fb0 <getButton+0x264>)
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	3308      	adds	r3, #8
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e34:	d922      	bls.n	8000e7c <getButton+0x130>
		{
			stButtons[i].long_state = 1;
 8000e36:	495e      	ldr	r1, [pc, #376]	; (8000fb0 <getButton+0x264>)
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	4413      	add	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	440b      	add	r3, r1
 8000e44:	3307      	adds	r3, #7
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
			//long press
			if (i==0)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f040 80a1 	bne.w	8000f94 <getButton+0x248>
			{
				curr_menu++;
 8000e52:	4b58      	ldr	r3, [pc, #352]	; (8000fb4 <getButton+0x268>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a56      	ldr	r2, [pc, #344]	; (8000fb4 <getButton+0x268>)
 8000e5a:	6013      	str	r3, [r2, #0]
				if (curr_menu>=MENU_MAX)
 8000e5c:	4b55      	ldr	r3, [pc, #340]	; (8000fb4 <getButton+0x268>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	dd02      	ble.n	8000e6a <getButton+0x11e>
				{
					curr_menu = 0;
 8000e64:	4b53      	ldr	r3, [pc, #332]	; (8000fb4 <getButton+0x268>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
				}
				if (start_stop)
 8000e6a:	4b53      	ldr	r3, [pc, #332]	; (8000fb8 <getButton+0x26c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8090 	beq.w	8000f94 <getButton+0x248>
				{
					start_stop = 0;
 8000e74:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <getButton+0x26c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
			if (i==0)
 8000e7a:	e08b      	b.n	8000f94 <getButton+0x248>
				}
			}
		}
		else if(key_state == 1 && stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	f040 8089 	bne.w	8000f96 <getButton+0x24a>
 8000e84:	494a      	ldr	r1, [pc, #296]	; (8000fb0 <getButton+0x264>)
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	440b      	add	r3, r1
 8000e92:	3306      	adds	r3, #6
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d07d      	beq.n	8000f96 <getButton+0x24a>
 8000e9a:	4945      	ldr	r1, [pc, #276]	; (8000fb0 <getButton+0x264>)
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b32      	cmp	r3, #50	; 0x32
 8000eb2:	d970      	bls.n	8000f96 <getButton+0x24a>
		{
			stButtons[i].short_state = 0;
 8000eb4:	493e      	ldr	r1, [pc, #248]	; (8000fb0 <getButton+0x264>)
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	3306      	adds	r3, #6
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8000ec8:	4939      	ldr	r1, [pc, #228]	; (8000fb0 <getButton+0x264>)
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	601a      	str	r2, [r3, #0]

		  if(!stButtons[i].long_state)
 8000edc:	4934      	ldr	r1, [pc, #208]	; (8000fb0 <getButton+0x264>)
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	3307      	adds	r3, #7
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d151      	bne.n	8000f96 <getButton+0x24a>
		  {
			//short press
			  if (curr_menu == MENU_BMS)
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <getButton+0x268>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d105      	bne.n	8000f06 <getButton+0x1ba>
			  {
				  if (i == 0)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14a      	bne.n	8000f96 <getButton+0x24a>
				  {
					  get_bms_data();
 8000f00:	f7ff fb04 	bl	800050c <get_bms_data>
 8000f04:	e047      	b.n	8000f96 <getButton+0x24a>
				  }
			  }
			  else if (curr_menu == MENU_DRIVER)
 8000f06:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <getButton+0x268>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d143      	bne.n	8000f96 <getButton+0x24a>
			  {
				  if (i == 0)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d111      	bne.n	8000f38 <getButton+0x1ec>
				  {
					  start_stop = !start_stop;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <getButton+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <getButton+0x26c>)
 8000f26:	601a      	str	r2, [r3, #0]
					  if (!start_stop)
 8000f28:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <getButton+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d132      	bne.n	8000f96 <getButton+0x24a>
					  {
						  motor_speed = 0;
 8000f30:	4b22      	ldr	r3, [pc, #136]	; (8000fbc <getButton+0x270>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	e02e      	b.n	8000f96 <getButton+0x24a>
					  }
				  }
				  else if (i == 1 && start_stop)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d114      	bne.n	8000f68 <getButton+0x21c>
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <getButton+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d010      	beq.n	8000f68 <getButton+0x21c>
				  {
					  motor_speed += 1000;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <getButton+0x270>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <getButton+0x270>)
 8000f50:	6013      	str	r3, [r2, #0]
					  if (motor_speed>10000) motor_speed = 10000;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <getButton+0x270>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	dd1b      	ble.n	8000f96 <getButton+0x24a>
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <getButton+0x270>)
 8000f60:	f242 7210 	movw	r2, #10000	; 0x2710
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e016      	b.n	8000f96 <getButton+0x24a>
				  }
				  else if (i == 2 && start_stop)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d113      	bne.n	8000f96 <getButton+0x24a>
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <getButton+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00f      	beq.n	8000f96 <getButton+0x24a>
				  {
					  motor_speed -= 1000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <getButton+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <getButton+0x270>)
 8000f80:	6013      	str	r3, [r2, #0]
				  	  if (motor_speed<-10000) motor_speed = -10000;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <getButton+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <getButton+0x274>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	da04      	bge.n	8000f96 <getButton+0x24a>
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <getButton+0x270>)
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <getButton+0x274>)
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	e000      	b.n	8000f96 <getButton+0x24a>
			if (i==0)
 8000f94:	bf00      	nop
	for (int i=0; i<4; i++)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	f77f aeda 	ble.w	8000d58 <getButton+0xc>
				  }
			  }
		  }
		}
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000310 	.word	0x20000310
 8000fb4:	200002bc 	.word	0x200002bc
 8000fb8:	20000290 	.word	0x20000290
 8000fbc:	20000294 	.word	0x20000294
 8000fc0:	ffffd8f0 	.word	0xffffd8f0

08000fc4 <menu_update>:

void menu_update()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
	SSD1306_COLOR color1 = White;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	SSD1306_COLOR color2 = White;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	SSD1306_COLOR color3 = White;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	if (curr_menu == MENU_ENC)
 8000fdc:	4b9c      	ldr	r3, [pc, #624]	; (8001250 <menu_update+0x28c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d132      	bne.n	800104a <menu_update+0x86>
	{
		char str [12];
		snprintf(str, sizeof str, "%d", (int)enc_idle_tick);
 8000fe4:	4b9b      	ldr	r3, [pc, #620]	; (8001254 <menu_update+0x290>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000fec:	4a9a      	ldr	r2, [pc, #616]	; (8001258 <menu_update+0x294>)
 8000fee:	210c      	movs	r1, #12
 8000ff0:	f004 fa9a 	bl	8005528 <sniprintf>
		ssd1306_Fill(Black);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fe89 	bl	8001d0c <ssd1306_Fill>
		color1 = Black;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		ssd1306_SetCursor(2, 18);
 8001000:	2112      	movs	r1, #18
 8001002:	2002      	movs	r0, #2
 8001004:	f000 ffdc 	bl	8001fc0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x26, White);
 8001008:	4a94      	ldr	r2, [pc, #592]	; (800125c <menu_update+0x298>)
 800100a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800100e:	2301      	movs	r3, #1
 8001010:	ca06      	ldmia	r2, {r1, r2}
 8001012:	f000 ffaf 	bl	8001f74 <ssd1306_WriteString>
		if (enc_idle_tick == 0)
 8001016:	4b8f      	ldr	r3, [pc, #572]	; (8001254 <menu_update+0x290>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80f1 	bne.w	8001202 <menu_update+0x23e>
		{
			ssd1306_SetCursor(2, 42);
 8001020:	212a      	movs	r1, #42	; 0x2a
 8001022:	2002      	movs	r0, #2
 8001024:	f000 ffcc 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("Long press OK", Font_7x10, White);
 8001028:	4a8d      	ldr	r2, [pc, #564]	; (8001260 <menu_update+0x29c>)
 800102a:	2301      	movs	r3, #1
 800102c:	ca06      	ldmia	r2, {r1, r2}
 800102e:	488d      	ldr	r0, [pc, #564]	; (8001264 <menu_update+0x2a0>)
 8001030:	f000 ffa0 	bl	8001f74 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 8001034:	2135      	movs	r1, #53	; 0x35
 8001036:	2002      	movs	r0, #2
 8001038:	f000 ffc2 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("to select", Font_7x10, White);
 800103c:	4a88      	ldr	r2, [pc, #544]	; (8001260 <menu_update+0x29c>)
 800103e:	2301      	movs	r3, #1
 8001040:	ca06      	ldmia	r2, {r1, r2}
 8001042:	4889      	ldr	r0, [pc, #548]	; (8001268 <menu_update+0x2a4>)
 8001044:	f000 ff96 	bl	8001f74 <ssd1306_WriteString>
 8001048:	e0db      	b.n	8001202 <menu_update+0x23e>
		}
	}
	else if (curr_menu == MENU_BMS)
 800104a:	4b81      	ldr	r3, [pc, #516]	; (8001250 <menu_update+0x28c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d15d      	bne.n	800110e <menu_update+0x14a>
	{
		ssd1306_Fill(Black);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 fe5a 	bl	8001d0c <ssd1306_Fill>
		color2 = Black;
 8001058:	2300      	movs	r3, #0
 800105a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (bms_detected == 0)
 800105e:	4b83      	ldr	r3, [pc, #524]	; (800126c <menu_update+0x2a8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d114      	bne.n	8001090 <menu_update+0xcc>
		{
			ssd1306_SetCursor(2, 42);
 8001066:	212a      	movs	r1, #42	; 0x2a
 8001068:	2002      	movs	r0, #2
 800106a:	f000 ffa9 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("Press OK", Font_7x10, White);
 800106e:	4a7c      	ldr	r2, [pc, #496]	; (8001260 <menu_update+0x29c>)
 8001070:	2301      	movs	r3, #1
 8001072:	ca06      	ldmia	r2, {r1, r2}
 8001074:	487e      	ldr	r0, [pc, #504]	; (8001270 <menu_update+0x2ac>)
 8001076:	f000 ff7d 	bl	8001f74 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 800107a:	2135      	movs	r1, #53	; 0x35
 800107c:	2002      	movs	r0, #2
 800107e:	f000 ff9f 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("to start test", Font_7x10, White);
 8001082:	4a77      	ldr	r2, [pc, #476]	; (8001260 <menu_update+0x29c>)
 8001084:	2301      	movs	r3, #1
 8001086:	ca06      	ldmia	r2, {r1, r2}
 8001088:	487a      	ldr	r0, [pc, #488]	; (8001274 <menu_update+0x2b0>)
 800108a:	f000 ff73 	bl	8001f74 <ssd1306_WriteString>
 800108e:	e0b8      	b.n	8001202 <menu_update+0x23e>
		}
		else
		{
			if (batteryMsg.bms_type == BMS_SMART || batteryMsg.bms_type == BMS_JBD)
 8001090:	4b79      	ldr	r3, [pc, #484]	; (8001278 <menu_update+0x2b4>)
 8001092:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <menu_update+0xe0>
 800109a:	4b77      	ldr	r3, [pc, #476]	; (8001278 <menu_update+0x2b4>)
 800109c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d129      	bne.n	80010f8 <menu_update+0x134>
			{
				char str [6];
				snprintf(str, sizeof str, "%d", (int)battery_capacity);
 80010a4:	4b75      	ldr	r3, [pc, #468]	; (800127c <menu_update+0x2b8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f107 001c 	add.w	r0, r7, #28
 80010ac:	4a6a      	ldr	r2, [pc, #424]	; (8001258 <menu_update+0x294>)
 80010ae:	2106      	movs	r1, #6
 80010b0:	f004 fa3a 	bl	8005528 <sniprintf>
				ssd1306_SetCursor(2, 18);
 80010b4:	2112      	movs	r1, #18
 80010b6:	2002      	movs	r0, #2
 80010b8:	f000 ff82 	bl	8001fc0 <ssd1306_SetCursor>
				ssd1306_WriteString(str, Font_16x26, White);
 80010bc:	4a67      	ldr	r2, [pc, #412]	; (800125c <menu_update+0x298>)
 80010be:	f107 001c 	add.w	r0, r7, #28
 80010c2:	2301      	movs	r3, #1
 80010c4:	ca06      	ldmia	r2, {r1, r2}
 80010c6:	f000 ff55 	bl	8001f74 <ssd1306_WriteString>
				ssd1306_SetCursor(2, 45);
 80010ca:	212d      	movs	r1, #45	; 0x2d
 80010cc:	2002      	movs	r0, #2
 80010ce:	f000 ff77 	bl	8001fc0 <ssd1306_SetCursor>
				if (batteryMsg.bms_type == BMS_SMART )
 80010d2:	4b69      	ldr	r3, [pc, #420]	; (8001278 <menu_update+0x2b4>)
 80010d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d106      	bne.n	80010ea <menu_update+0x126>
				{
					ssd1306_WriteString("SMART", Font_11x18, White);
 80010dc:	4a68      	ldr	r2, [pc, #416]	; (8001280 <menu_update+0x2bc>)
 80010de:	2301      	movs	r3, #1
 80010e0:	ca06      	ldmia	r2, {r1, r2}
 80010e2:	4868      	ldr	r0, [pc, #416]	; (8001284 <menu_update+0x2c0>)
 80010e4:	f000 ff46 	bl	8001f74 <ssd1306_WriteString>
			{
 80010e8:	e08b      	b.n	8001202 <menu_update+0x23e>
				}
				else
				{
					ssd1306_WriteString("JBD", Font_11x18, White);
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <menu_update+0x2bc>)
 80010ec:	2301      	movs	r3, #1
 80010ee:	ca06      	ldmia	r2, {r1, r2}
 80010f0:	4865      	ldr	r0, [pc, #404]	; (8001288 <menu_update+0x2c4>)
 80010f2:	f000 ff3f 	bl	8001f74 <ssd1306_WriteString>
			{
 80010f6:	e084      	b.n	8001202 <menu_update+0x23e>
				}
			}
			else
			{
				ssd1306_SetCursor(2, 53);
 80010f8:	2135      	movs	r1, #53	; 0x35
 80010fa:	2002      	movs	r0, #2
 80010fc:	f000 ff60 	bl	8001fc0 <ssd1306_SetCursor>
				ssd1306_WriteString("Reading bms data...", Font_7x10, White);
 8001100:	4a57      	ldr	r2, [pc, #348]	; (8001260 <menu_update+0x29c>)
 8001102:	2301      	movs	r3, #1
 8001104:	ca06      	ldmia	r2, {r1, r2}
 8001106:	4861      	ldr	r0, [pc, #388]	; (800128c <menu_update+0x2c8>)
 8001108:	f000 ff34 	bl	8001f74 <ssd1306_WriteString>
 800110c:	e079      	b.n	8001202 <menu_update+0x23e>
			}
		}
	}
	else if (curr_menu == MENU_DRIVER)
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <menu_update+0x28c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d175      	bne.n	8001202 <menu_update+0x23e>
	{
		static uint8_t a = 0;
		ssd1306_Fill(Black);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fdf8 	bl	8001d0c <ssd1306_Fill>
		if (a)
 800111c:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <menu_update+0x2cc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <menu_update+0x168>
		{
			color3 = White;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800112a:	e002      	b.n	8001132 <menu_update+0x16e>
		}
		else
		{
			color3 = Black;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		}
		if (!start_stop)
 8001132:	4b58      	ldr	r3, [pc, #352]	; (8001294 <menu_update+0x2d0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d117      	bne.n	800116a <menu_update+0x1a6>
		{
			ssd1306_SetCursor(2, 42);
 800113a:	212a      	movs	r1, #42	; 0x2a
 800113c:	2002      	movs	r0, #2
 800113e:	f000 ff3f 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("OK - start/stop", Font_7x10, White);
 8001142:	4a47      	ldr	r2, [pc, #284]	; (8001260 <menu_update+0x29c>)
 8001144:	2301      	movs	r3, #1
 8001146:	ca06      	ldmia	r2, {r1, r2}
 8001148:	4853      	ldr	r0, [pc, #332]	; (8001298 <menu_update+0x2d4>)
 800114a:	f000 ff13 	bl	8001f74 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 800114e:	2135      	movs	r1, #53	; 0x35
 8001150:	2002      	movs	r0, #2
 8001152:	f000 ff35 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString("up/down - speed", Font_7x10, White);
 8001156:	4a42      	ldr	r2, [pc, #264]	; (8001260 <menu_update+0x29c>)
 8001158:	2301      	movs	r3, #1
 800115a:	ca06      	ldmia	r2, {r1, r2}
 800115c:	484f      	ldr	r0, [pc, #316]	; (800129c <menu_update+0x2d8>)
 800115e:	f000 ff09 	bl	8001f74 <ssd1306_WriteString>
			a = 0;
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <menu_update+0x2cc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e04b      	b.n	8001202 <menu_update+0x23e>
		}
		else
		{
			static uint32_t blink_t = 0;
			char str_act[10] = "Activated!";
 800116a:	4a4d      	ldr	r2, [pc, #308]	; (80012a0 <menu_update+0x2dc>)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	ca07      	ldmia	r2, {r0, r1, r2}
 8001172:	c303      	stmia	r3!, {r0, r1}
 8001174:	801a      	strh	r2, [r3, #0]
			uint32_t ms = HAL_GetTick();
 8001176:	f000 ffeb 	bl	8002150 <HAL_GetTick>
 800117a:	6338      	str	r0, [r7, #48]	; 0x30
			char str [12];
			snprintf(str, sizeof str, "%d", (int)motor_speed/20);
 800117c:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <menu_update+0x2e0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a49      	ldr	r2, [pc, #292]	; (80012a8 <menu_update+0x2e4>)
 8001182:	fb82 1203 	smull	r1, r2, r2, r3
 8001186:	10d2      	asrs	r2, r2, #3
 8001188:	17db      	asrs	r3, r3, #31
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	1d38      	adds	r0, r7, #4
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <menu_update+0x294>)
 8001190:	210c      	movs	r1, #12
 8001192:	f004 f9c9 	bl	8005528 <sniprintf>
			ssd1306_SetCursor(2, 18);
 8001196:	2112      	movs	r1, #18
 8001198:	2002      	movs	r0, #2
 800119a:	f000 ff11 	bl	8001fc0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_16x26, White);
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <menu_update+0x298>)
 80011a0:	1d38      	adds	r0, r7, #4
 80011a2:	2301      	movs	r3, #1
 80011a4:	ca06      	ldmia	r2, {r1, r2}
 80011a6:	f000 fee5 	bl	8001f74 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 45);
 80011aa:	212d      	movs	r1, #45	; 0x2d
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 ff07 	bl	8001fc0 <ssd1306_SetCursor>
			if (a)
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <menu_update+0x2cc>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d007      	beq.n	80011ca <menu_update+0x206>
			{
				ssd1306_WriteString(str_act, Font_11x18, White);
 80011ba:	4a31      	ldr	r2, [pc, #196]	; (8001280 <menu_update+0x2bc>)
 80011bc:	f107 0010 	add.w	r0, r7, #16
 80011c0:	2301      	movs	r3, #1
 80011c2:	ca06      	ldmia	r2, {r1, r2}
 80011c4:	f000 fed6 	bl	8001f74 <ssd1306_WriteString>
 80011c8:	e006      	b.n	80011d8 <menu_update+0x214>
			}
			else
			{
				ssd1306_WriteString(str_act, Font_11x18, Black);
 80011ca:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <menu_update+0x2bc>)
 80011cc:	f107 0010 	add.w	r0, r7, #16
 80011d0:	2300      	movs	r3, #0
 80011d2:	ca06      	ldmia	r2, {r1, r2}
 80011d4:	f000 fece 	bl	8001f74 <ssd1306_WriteString>
			}
			if (ms - blink_t > 100)
 80011d8:	4b34      	ldr	r3, [pc, #208]	; (80012ac <menu_update+0x2e8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b64      	cmp	r3, #100	; 0x64
 80011e2:	d90e      	bls.n	8001202 <menu_update+0x23e>
			{
				a = !a;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <menu_update+0x2cc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <menu_update+0x2cc>)
 80011f6:	701a      	strb	r2, [r3, #0]
				blink_t = HAL_GetTick();
 80011f8:	f000 ffaa 	bl	8002150 <HAL_GetTick>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a2b      	ldr	r2, [pc, #172]	; (80012ac <menu_update+0x2e8>)
 8001200:	6013      	str	r3, [r2, #0]
			}
		}
	}
	ssd1306_SetCursor(2, 1);
 8001202:	2101      	movs	r1, #1
 8001204:	2002      	movs	r0, #2
 8001206:	f000 fedb 	bl	8001fc0 <ssd1306_SetCursor>
	ssd1306_WriteString("Encoder", Font_7x10, color1);
 800120a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <menu_update+0x29c>)
 8001210:	ca06      	ldmia	r2, {r1, r2}
 8001212:	4827      	ldr	r0, [pc, #156]	; (80012b0 <menu_update+0x2ec>)
 8001214:	f000 feae 	bl	8001f74 <ssd1306_WriteString>
	ssd1306_SetCursor(55, 1);
 8001218:	2101      	movs	r1, #1
 800121a:	2037      	movs	r0, #55	; 0x37
 800121c:	f000 fed0 	bl	8001fc0 <ssd1306_SetCursor>
	ssd1306_WriteString("BMS", Font_7x10, color2);
 8001220:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <menu_update+0x29c>)
 8001226:	ca06      	ldmia	r2, {r1, r2}
 8001228:	4822      	ldr	r0, [pc, #136]	; (80012b4 <menu_update+0x2f0>)
 800122a:	f000 fea3 	bl	8001f74 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 1);
 800122e:	2101      	movs	r1, #1
 8001230:	2050      	movs	r0, #80	; 0x50
 8001232:	f000 fec5 	bl	8001fc0 <ssd1306_SetCursor>
	ssd1306_WriteString("Driver", Font_7x10, color3);
 8001236:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <menu_update+0x29c>)
 800123c:	ca06      	ldmia	r2, {r1, r2}
 800123e:	481e      	ldr	r0, [pc, #120]	; (80012b8 <menu_update+0x2f4>)
 8001240:	f000 fe98 	bl	8001f74 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001244:	f000 fd84 	bl	8001d50 <ssd1306_UpdateScreen>
}
 8001248:	bf00      	nop
 800124a:	3738      	adds	r7, #56	; 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200002bc 	.word	0x200002bc
 8001254:	2000021c 	.word	0x2000021c
 8001258:	08005e0c 	.word	0x08005e0c
 800125c:	20000034 	.word	0x20000034
 8001260:	20000024 	.word	0x20000024
 8001264:	08005e10 	.word	0x08005e10
 8001268:	08005e20 	.word	0x08005e20
 800126c:	20000285 	.word	0x20000285
 8001270:	08005e2c 	.word	0x08005e2c
 8001274:	08005e38 	.word	0x08005e38
 8001278:	200002c0 	.word	0x200002c0
 800127c:	2000028c 	.word	0x2000028c
 8001280:	2000002c 	.word	0x2000002c
 8001284:	08005e48 	.word	0x08005e48
 8001288:	08005e50 	.word	0x08005e50
 800128c:	08005e54 	.word	0x08005e54
 8001290:	2000034c 	.word	0x2000034c
 8001294:	20000290 	.word	0x20000290
 8001298:	08005e68 	.word	0x08005e68
 800129c:	08005e78 	.word	0x08005e78
 80012a0:	08005e9c 	.word	0x08005e9c
 80012a4:	20000294 	.word	0x20000294
 80012a8:	66666667 	.word	0x66666667
 80012ac:	20000350 	.word	0x20000350
 80012b0:	08005e88 	.word	0x08005e88
 80012b4:	08005e90 	.word	0x08005e90
 80012b8:	08005e94 	.word	0x08005e94

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f000 feee 	bl	80020a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f858 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 f9d8 	bl	800167c <MX_GPIO_Init>
  MX_DMA_Init();
 80012cc:	f000 f9b8 	bl	8001640 <MX_DMA_Init>
  MX_SPI1_Init();
 80012d0:	f000 f900 	bl	80014d4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80012d4:	f000 f936 	bl	8001544 <MX_TIM4_Init>
  MX_CAN_Init();
 80012d8:	f000 f894 	bl	8001404 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80012dc:	f000 f986 	bl	80015ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 80012e0:	2264      	movs	r2, #100	; 0x64
 80012e2:	491e      	ldr	r1, [pc, #120]	; (800135c <main+0xa0>)
 80012e4:	481e      	ldr	r0, [pc, #120]	; (8001360 <main+0xa4>)
 80012e6:	f003 f95a 	bl	800459e <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <main+0xa8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <main+0xa8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0204 	bic.w	r2, r2, #4
 80012f8:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80012fa:	213c      	movs	r1, #60	; 0x3c
 80012fc:	481a      	ldr	r0, [pc, #104]	; (8001368 <main+0xac>)
 80012fe:	f002 ff09 	bl	8004114 <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8001302:	f000 fc99 	bl	8001c38 <ssd1306_Init>
  buttons_Init();
 8001306:	f7ff fcfb 	bl	8000d00 <buttons_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(2, 2);
 800130a:	2102      	movs	r1, #2
 800130c:	2002      	movs	r0, #2
 800130e:	f000 fe57 	bl	8001fc0 <ssd1306_SetCursor>
  ssd1306_Fill(Black);
 8001312:	2000      	movs	r0, #0
 8001314:	f000 fcfa 	bl	8001d0c <ssd1306_Fill>
  ssd1306_WriteString("Start...", Font_16x26, White);
 8001318:	4a14      	ldr	r2, [pc, #80]	; (800136c <main+0xb0>)
 800131a:	2301      	movs	r3, #1
 800131c:	ca06      	ldmia	r2, {r1, r2}
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <main+0xb4>)
 8001320:	f000 fe28 	bl	8001f74 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001324:	f000 fd14 	bl	8001d50 <ssd1306_UpdateScreen>

  while (1)
  {
	  getButton();
 8001328:	f7ff fd10 	bl	8000d4c <getButton>
	  if(curr_menu == MENU_ENC)
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <main+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <main+0x7e>
	  {
		  getEncoder();
 8001334:	f7ff fcca 	bl	8000ccc <getEncoder>
 8001338:	e00c      	b.n	8001354 <main+0x98>
	  }
	  else if (curr_menu == MENU_BMS)
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <main+0xb8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d102      	bne.n	8001348 <main+0x8c>
	  {
		  read_bms_uart();
 8001342:	f7ff f917 	bl	8000574 <read_bms_uart>
 8001346:	e005      	b.n	8001354 <main+0x98>
	  }
	  else if (curr_menu == MENU_DRIVER)
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <main+0xb8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d101      	bne.n	8001354 <main+0x98>
	  {
		  Moving();
 8001350:	f7ff f806 	bl	8000360 <Moving>
	  }
	  menu_update();
 8001354:	f7ff fe36 	bl	8000fc4 <menu_update>
	  getButton();
 8001358:	e7e6      	b.n	8001328 <main+0x6c>
 800135a:	bf00      	nop
 800135c:	20000220 	.word	0x20000220
 8001360:	2000018c 	.word	0x2000018c
 8001364:	200001d4 	.word	0x200001d4
 8001368:	20000144 	.word	0x20000144
 800136c:	20000034 	.word	0x20000034
 8001370:	08005ea8 	.word	0x08005ea8
 8001374:	200002bc 	.word	0x200002bc

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2228      	movs	r2, #40	; 0x28
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f8c6 	bl	8005518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800139a:	2301      	movs	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800139e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 ff87 	bl	80032d4 <HAL_RCC_OscConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013cc:	f000 f9c2 	bl	8001754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	230f      	movs	r3, #15
 80013d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d4:	2302      	movs	r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2102      	movs	r1, #2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f002 f9f4 	bl	80037d8 <HAL_RCC_ClockConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013f6:	f000 f9ad 	bl	8001754 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3740      	adds	r7, #64	; 0x40
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MX_CAN_Init+0xc8>)
 800140c:	4a30      	ldr	r2, [pc, #192]	; (80014d0 <MX_CAN_Init+0xcc>)
 800140e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <MX_CAN_Init+0xc8>)
 8001412:	2204      	movs	r2, #4
 8001414:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_CAN_Init+0xc8>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_CAN_Init+0xc8>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <MX_CAN_Init+0xc8>)
 8001424:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001428:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_CAN_Init+0xc8>)
 800142c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001430:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_CAN_Init+0xc8>)
 8001434:	2200      	movs	r2, #0
 8001436:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_CAN_Init+0xc8>)
 800143a:	2201      	movs	r2, #1
 800143c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_CAN_Init+0xc8>)
 8001440:	2200      	movs	r2, #0
 8001442:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <MX_CAN_Init+0xc8>)
 8001446:	2200      	movs	r2, #0
 8001448:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_CAN_Init+0xc8>)
 800144c:	2200      	movs	r2, #0
 800144e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <MX_CAN_Init+0xc8>)
 8001452:	2201      	movs	r2, #1
 8001454:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <MX_CAN_Init+0xc8>)
 8001458:	f000 fea8 	bl	80021ac <HAL_CAN_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001462:	f000 f977 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  sFilterConfig.FilterBank = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
      sFilterConfig.FilterIdHigh = 0x0000;
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterMaskIdHigh = 0x0000;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterActivation = ENABLE;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
      //sFilterConfig.SlaveStartFilterBank = 14;

      if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	480f      	ldr	r0, [pc, #60]	; (80014cc <MX_CAN_Init+0xc8>)
 8001490:	f000 ff87 	bl	80023a2 <HAL_CAN_ConfigFilter>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_CAN_Init+0x9a>
      {
      	Error_Handler();
 800149a:	f000 f95b 	bl	8001754 <Error_Handler>
      }
      if (HAL_CAN_Start(&hcan) != HAL_OK) {
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <MX_CAN_Init+0xc8>)
 80014a0:	f001 f848 	bl	8002534 <HAL_CAN_Start>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_CAN_Init+0xaa>
    	Error_Handler();
 80014aa:	f000 f953 	bl	8001754 <Error_Handler>
      }
      if (HAL_CAN_ActivateNotification(&hcan,
 80014ae:	f648 4102 	movw	r1, #35842	; 0x8c02
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_CAN_Init+0xc8>)
 80014b4:	f001 f985 	bl	80027c2 <HAL_CAN_ActivateNotification>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_CAN_Init+0xbe>
    		  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			  	  | CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
    	Error_Handler();
 80014be:	f000 f949 	bl	8001754 <Error_Handler>
      }
  /* USER CODE END CAN_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000c4 	.word	0x200000c4
 80014d0:	40006400 	.word	0x40006400

080014d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_SPI1_Init+0x68>)
 80014da:	4a19      	ldr	r2, [pc, #100]	; (8001540 <MX_SPI1_Init+0x6c>)
 80014dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_SPI1_Init+0x68>)
 80014e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_SPI1_Init+0x68>)
 80014e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014ec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_SPI1_Init+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_SPI1_Init+0x68>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_SPI1_Init+0x68>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_SPI1_Init+0x68>)
 8001502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001506:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_SPI1_Init+0x68>)
 800150a:	2230      	movs	r2, #48	; 0x30
 800150c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <MX_SPI1_Init+0x68>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_SPI1_Init+0x68>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <MX_SPI1_Init+0x68>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_SPI1_Init+0x68>)
 8001522:	220a      	movs	r2, #10
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_SPI1_Init+0x68>)
 8001528:	f002 fae4 	bl	8003af4 <HAL_SPI_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001532:	f000 f90f 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200000ec 	.word	0x200000ec
 8001540:	40013000 	.word	0x40013000

08001544 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f003 ffe0 	bl	8005518 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MX_TIM4_Init+0xa0>)
 8001562:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <MX_TIM4_Init+0xa4>)
 8001564:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001566:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <MX_TIM4_Init+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM4_Init+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <MX_TIM4_Init+0xa0>)
 8001574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001578:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_TIM4_Init+0xa0>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_TIM4_Init+0xa0>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001586:	2301      	movs	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800158e:	2301      	movs	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800159e:	2301      	movs	r3, #1
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_TIM4_Init+0xa0>)
 80015b2:	f002 fd0d 	bl	8003fd0 <HAL_TIM_Encoder_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80015bc:	f000 f8ca 	bl	8001754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_TIM4_Init+0xa0>)
 80015ce:	f002 feb5 	bl	800433c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80015d8:	f000 f8bc 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3730      	adds	r7, #48	; 0x30
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000144 	.word	0x20000144
 80015e8:	40000800 	.word	0x40000800

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_USART1_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART1_UART_Init+0x4c>)
 8001624:	f002 fee8 	bl	80043f8 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 f891 	bl	8001754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000018c 	.word	0x2000018c
 800163c:	40013800 	.word	0x40013800

08001640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_DMA_Init+0x38>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <MX_DMA_Init+0x38>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_DMA_Init+0x38>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	200f      	movs	r0, #15
 8001664:	f001 f9a9 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001668:	200f      	movs	r0, #15
 800166a:	f001 f9c2 	bl	80029f2 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001690:	4b2d      	ldr	r3, [pc, #180]	; (8001748 <MX_GPIO_Init+0xcc>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <MX_GPIO_Init+0xcc>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <MX_GPIO_Init+0xcc>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a20      	ldr	r2, [pc, #128]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_GPIO_Init+0xcc>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	; 0x40
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <MX_GPIO_Init+0xd0>)
 80016de:	f001 fde0 	bl	80032a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2103      	movs	r1, #3
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_GPIO_Init+0xd4>)
 80016e8:	f001 fddb 	bl	80032a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	4812      	ldr	r0, [pc, #72]	; (800174c <MX_GPIO_Init+0xd0>)
 8001704:	f001 fc32 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 8001708:	2303      	movs	r3, #3
 800170a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_GPIO_Init+0xd4>)
 8001720:	f001 fc24 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8001724:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_GPIO_Init+0xd4>)
 800173a:	f001 fc17 	bl	8002f6c <HAL_GPIO_Init>

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00

08001754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800175c:	e7fe      	b.n	800175c <Error_Handler+0x8>
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_MspInit+0x5c>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	4a14      	ldr	r2, [pc, #80]	; (80017bc <HAL_MspInit+0x5c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6193      	str	r3, [r2, #24]
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_MspInit+0x5c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_MspInit+0x5c>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <HAL_MspInit+0x5c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_MspInit+0x5c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_MspInit+0x60>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_MspInit+0x60>)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000

080017c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a25      	ldr	r2, [pc, #148]	; (8001874 <HAL_CAN_MspInit+0xb0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d143      	bne.n	800186c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 80017ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017ee:	61d3      	str	r3, [r2, #28]
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_CAN_MspInit+0xb4>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <HAL_CAN_MspInit+0xb8>)
 800182a:	f001 fb9f 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <HAL_CAN_MspInit+0xb8>)
 8001844:	f001 fb92 	bl	8002f6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_CAN_MspInit+0xbc>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_CAN_MspInit+0xbc>)
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40006400 	.word	0x40006400
 8001878:	40021000 	.word	0x40021000
 800187c:	40010c00 	.word	0x40010c00
 8001880:	40010000 	.word	0x40010000

08001884 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_SPI_MspInit+0x70>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d123      	bne.n	80018ec <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_SPI_MspInit+0x74>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018d4:	23a0      	movs	r3, #160	; 0xa0
 80018d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018dc:	2303      	movs	r3, #3
 80018de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <HAL_SPI_MspInit+0x78>)
 80018e8:	f001 fb40 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018ec:	bf00      	nop
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40013000 	.word	0x40013000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010800 	.word	0x40010800

08001900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_TIM_Encoder_MspInit+0x70>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d123      	bne.n	8001968 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	61d3      	str	r3, [r2, #28]
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_TIM_Encoder_MspInit+0x74>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23c0      	movs	r3, #192	; 0xc0
 8001952:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_TIM_Encoder_MspInit+0x78>)
 8001964:	f001 fb02 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40000800 	.word	0x40000800
 8001974:	40021000 	.word	0x40021000
 8001978:	40010c00 	.word	0x40010c00

0800197c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a33      	ldr	r2, [pc, #204]	; (8001a64 <HAL_UART_MspInit+0xe8>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d15f      	bne.n	8001a5c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <HAL_UART_MspInit+0xec>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a31      	ldr	r2, [pc, #196]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b2f      	ldr	r3, [pc, #188]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a2b      	ldr	r2, [pc, #172]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_UART_MspInit+0xec>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4619      	mov	r1, r3
 80019e0:	4822      	ldr	r0, [pc, #136]	; (8001a6c <HAL_UART_MspInit+0xf0>)
 80019e2:	f001 fac3 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	481c      	ldr	r0, [pc, #112]	; (8001a6c <HAL_UART_MspInit+0xf0>)
 80019fc:	f001 fab6 	bl	8002f6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_UART_MspInit+0xf8>)
 8001a04:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a1e:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a30:	480f      	ldr	r0, [pc, #60]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a32:	f000 fff9 	bl	8002a28 <HAL_DMA_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001a3c:	f7ff fe8a 	bl	8001754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a44:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_UART_MspInit+0xf4>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2025      	movs	r0, #37	; 0x25
 8001a52:	f000 ffb2 	bl	80029ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a56:	2025      	movs	r0, #37	; 0x25
 8001a58:	f000 ffcb 	bl	80029f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	200001d4 	.word	0x200001d4
 8001a74:	40020058 	.word	0x40020058

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abe:	f000 fb35 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <DMA1_Channel5_IRQHandler+0x10>)
 8001ace:	f001 f919 	bl	8002d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001d4 	.word	0x200001d4

08001adc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <USART1_IRQHandler+0x10>)
 8001ae2:	f002 fdb9 	bl	8004658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000018c 	.word	0x2000018c

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f003 fca8 	bl	8005474 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20005000 	.word	0x20005000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000354 	.word	0x20000354
 8001b58:	20000788 	.word	0x20000788

08001b5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2102      	movs	r1, #2
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <ssd1306_Reset+0x34>)
 8001b72:	f001 fb96 	bl	80032a2 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4808      	ldr	r0, [pc, #32]	; (8001b9c <ssd1306_Reset+0x34>)
 8001b7c:	f001 fb91 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001b80:	200a      	movs	r0, #10
 8001b82:	f000 faef 	bl	8002164 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <ssd1306_Reset+0x34>)
 8001b8c:	f001 fb89 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001b90:	200a      	movs	r0, #10
 8001b92:	f000 fae7 	bl	8002164 <HAL_Delay>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40010c00 	.word	0x40010c00

08001ba0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001baa:	2200      	movs	r2, #0
 8001bac:	2102      	movs	r1, #2
 8001bae:	480c      	ldr	r0, [pc, #48]	; (8001be0 <ssd1306_WriteCommand+0x40>)
 8001bb0:	f001 fb77 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	480a      	ldr	r0, [pc, #40]	; (8001be4 <ssd1306_WriteCommand+0x44>)
 8001bba:	f001 fb72 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001bbe:	1df9      	adds	r1, r7, #7
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4808      	ldr	r0, [pc, #32]	; (8001be8 <ssd1306_WriteCommand+0x48>)
 8001bc8:	f002 f818 	bl	8003bfc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2102      	movs	r1, #2
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <ssd1306_WriteCommand+0x40>)
 8001bd2:	f001 fb66 	bl	80032a2 <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	40010800 	.word	0x40010800
 8001be8:	200000ec 	.word	0x200000ec

08001bec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <ssd1306_WriteData+0x40>)
 8001bfc:	f001 fb51 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001c00:	2201      	movs	r2, #1
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <ssd1306_WriteData+0x44>)
 8001c06:	f001 fb4c 	bl	80032a2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4807      	ldr	r0, [pc, #28]	; (8001c34 <ssd1306_WriteData+0x48>)
 8001c16:	f001 fff1 	bl	8003bfc <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4803      	ldr	r0, [pc, #12]	; (8001c2c <ssd1306_WriteData+0x40>)
 8001c20:	f001 fb3f 	bl	80032a2 <HAL_GPIO_WritePin>
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010c00 	.word	0x40010c00
 8001c30:	40010800 	.word	0x40010800
 8001c34:	200000ec 	.word	0x200000ec

08001c38 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001c3c:	f7ff ff94 	bl	8001b68 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001c40:	2064      	movs	r0, #100	; 0x64
 8001c42:	f000 fa8f 	bl	8002164 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 f9e6 	bl	8002018 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001c4c:	2020      	movs	r0, #32
 8001c4e:	f7ff ffa7 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff ffa4 	bl	8001ba0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001c58:	20b0      	movs	r0, #176	; 0xb0
 8001c5a:	f7ff ffa1 	bl	8001ba0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001c5e:	20c8      	movs	r0, #200	; 0xc8
 8001c60:	f7ff ff9e 	bl	8001ba0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff ff9b 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001c6a:	2010      	movs	r0, #16
 8001c6c:	f7ff ff98 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001c70:	2040      	movs	r0, #64	; 0x40
 8001c72:	f7ff ff95 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001c76:	20ff      	movs	r0, #255	; 0xff
 8001c78:	f000 f9ba 	bl	8001ff0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001c7c:	20a1      	movs	r0, #161	; 0xa1
 8001c7e:	f7ff ff8f 	bl	8001ba0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001c82:	20a6      	movs	r0, #166	; 0xa6
 8001c84:	f7ff ff8c 	bl	8001ba0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001c88:	20a8      	movs	r0, #168	; 0xa8
 8001c8a:	f7ff ff89 	bl	8001ba0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001c8e:	203f      	movs	r0, #63	; 0x3f
 8001c90:	f7ff ff86 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c94:	20a4      	movs	r0, #164	; 0xa4
 8001c96:	f7ff ff83 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001c9a:	20d3      	movs	r0, #211	; 0xd3
 8001c9c:	f7ff ff80 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff ff7d 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ca6:	20d5      	movs	r0, #213	; 0xd5
 8001ca8:	f7ff ff7a 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001cac:	20f0      	movs	r0, #240	; 0xf0
 8001cae:	f7ff ff77 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001cb2:	20d9      	movs	r0, #217	; 0xd9
 8001cb4:	f7ff ff74 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001cb8:	2022      	movs	r0, #34	; 0x22
 8001cba:	f7ff ff71 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001cbe:	20da      	movs	r0, #218	; 0xda
 8001cc0:	f7ff ff6e 	bl	8001ba0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001cc4:	2012      	movs	r0, #18
 8001cc6:	f7ff ff6b 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001cca:	20db      	movs	r0, #219	; 0xdb
 8001ccc:	f7ff ff68 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001cd0:	2020      	movs	r0, #32
 8001cd2:	f7ff ff65 	bl	8001ba0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001cd6:	208d      	movs	r0, #141	; 0x8d
 8001cd8:	f7ff ff62 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001cdc:	2014      	movs	r0, #20
 8001cde:	f7ff ff5f 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f000 f998 	bl	8002018 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f000 f80f 	bl	8001d0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001cee:	f000 f82f 	bl	8001d50 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <ssd1306_Init+0xd0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <ssd1306_Init+0xd0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001cfe:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <ssd1306_Init+0xd0>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	711a      	strb	r2, [r3, #4]
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000768 	.word	0x20000768

08001d0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e00d      	b.n	8001d38 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <ssd1306_Fill+0x1a>
 8001d22:	2100      	movs	r1, #0
 8001d24:	e000      	b.n	8001d28 <ssd1306_Fill+0x1c>
 8001d26:	21ff      	movs	r1, #255	; 0xff
 8001d28:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <ssd1306_Fill+0x40>)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3301      	adds	r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001d3e:	d3ed      	bcc.n	8001d1c <ssd1306_Fill+0x10>
    }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000358 	.word	0x20000358

08001d50 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	e01a      	b.n	8001d92 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	3b50      	subs	r3, #80	; 0x50
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff1c 	bl	8001ba0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7ff ff19 	bl	8001ba0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001d6e:	2010      	movs	r0, #16
 8001d70:	f7ff ff16 	bl	8001ba0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001d74:	79fa      	ldrb	r2, [r7, #7]
 8001d76:	4613      	mov	r3, r2
 8001d78:	019b      	lsls	r3, r3, #6
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <ssd1306_UpdateScreen+0x54>)
 8001d82:	4413      	add	r3, r2
 8001d84:	2182      	movs	r1, #130	; 0x82
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff30 	bl	8001bec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d9e1      	bls.n	8001d5c <ssd1306_UpdateScreen+0xc>
    }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000358 	.word	0x20000358

08001da8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001da8:	b490      	push	{r4, r7}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
 8001db2:	460b      	mov	r3, r1
 8001db4:	71bb      	strb	r3, [r7, #6]
 8001db6:	4613      	mov	r3, r2
 8001db8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	2b81      	cmp	r3, #129	; 0x81
 8001dbe:	d849      	bhi.n	8001e54 <ssd1306_DrawPixel+0xac>
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	2b3f      	cmp	r3, #63	; 0x3f
 8001dc4:	d846      	bhi.n	8001e54 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d120      	bne.n	8001e0e <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	440b      	add	r3, r1
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <ssd1306_DrawPixel+0xb8>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b25c      	sxtb	r4, r3
 8001df8:	79fa      	ldrb	r2, [r7, #7]
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	019b      	lsls	r3, r3, #6
 8001e00:	440b      	add	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	b2e1      	uxtb	r1, r4
 8001e08:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <ssd1306_DrawPixel+0xb8>)
 8001e0a:	54d1      	strb	r1, [r2, r3]
 8001e0c:	e023      	b.n	8001e56 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e0e:	79fa      	ldrb	r2, [r7, #7]
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	b2d8      	uxtb	r0, r3
 8001e16:	4601      	mov	r1, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	440b      	add	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <ssd1306_DrawPixel+0xb8>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	b25a      	sxtb	r2, r3
 8001e28:	79bb      	ldrb	r3, [r7, #6]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	b25b      	sxtb	r3, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	b25c      	sxtb	r4, r3
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	4601      	mov	r1, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	440b      	add	r3, r1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2e1      	uxtb	r1, r4
 8001e4e:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <ssd1306_DrawPixel+0xb8>)
 8001e50:	54d1      	strb	r1, [r2, r3]
 8001e52:	e000      	b.n	8001e56 <ssd1306_DrawPixel+0xae>
        return;
 8001e54:	bf00      	nop
    }
}
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc90      	pop	{r4, r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000358 	.word	0x20000358

08001e64 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	1d38      	adds	r0, r7, #4
 8001e6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e72:	461a      	mov	r2, r3
 8001e74:	4623      	mov	r3, r4
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b1f      	cmp	r3, #31
 8001e80:	d902      	bls.n	8001e88 <ssd1306_WriteChar+0x24>
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	2b7e      	cmp	r3, #126	; 0x7e
 8001e86:	d901      	bls.n	8001e8c <ssd1306_WriteChar+0x28>
        return 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e06d      	b.n	8001f68 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	793b      	ldrb	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	2b82      	cmp	r3, #130	; 0x82
 8001e98:	dc06      	bgt.n	8001ea8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001e9c:	885b      	ldrh	r3, [r3, #2]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	797b      	ldrb	r3, [r7, #5]
 8001ea2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	dd01      	ble.n	8001eac <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e05d      	b.n	8001f68 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
 8001eb0:	e04c      	b.n	8001f4c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	3b20      	subs	r3, #32
 8001eb8:	7979      	ldrb	r1, [r7, #5]
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	440b      	add	r3, r1
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	e034      	b.n	8001f3c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d012      	beq.n	8001f08 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	b2d8      	uxtb	r0, r3
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	7bba      	ldrb	r2, [r7, #14]
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7ff ff51 	bl	8001da8 <ssd1306_DrawPixel>
 8001f06:	e016      	b.n	8001f36 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	b2d8      	uxtb	r0, r3
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b2d9      	uxtb	r1, r3
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf0c      	ite	eq
 8001f2a:	2301      	moveq	r3, #1
 8001f2c:	2300      	movne	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	f7ff ff39 	bl	8001da8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	793b      	ldrb	r3, [r7, #4]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d3c5      	bcc.n	8001ed2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	797b      	ldrb	r3, [r7, #5]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d3ad      	bcc.n	8001eb2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001f58:	881a      	ldrh	r2, [r3, #0]
 8001f5a:	793b      	ldrb	r3, [r7, #4]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <ssd1306_WriteChar+0x10c>)
 8001f64:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3724      	adds	r7, #36	; 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	20000768 	.word	0x20000768

08001f74 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	1d38      	adds	r0, r7, #4
 8001f7e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f82:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001f84:	e012      	b.n	8001fac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	7818      	ldrb	r0, [r3, #0]
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	1d3a      	adds	r2, r7, #4
 8001f8e:	ca06      	ldmia	r2, {r1, r2}
 8001f90:	f7ff ff68 	bl	8001e64 <ssd1306_WriteChar>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d002      	beq.n	8001fa6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	e008      	b.n	8001fb8 <ssd1306_WriteString+0x44>
        }
        str++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e8      	bne.n	8001f86 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <ssd1306_SetCursor+0x2c>)
 8001fd6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fd8:	79bb      	ldrb	r3, [r7, #6]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <ssd1306_SetCursor+0x2c>)
 8001fde:	805a      	strh	r2, [r3, #2]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000768 	.word	0x20000768

08001ff0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ffa:	2381      	movs	r3, #129	; 0x81
 8001ffc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fdcd 	bl	8001ba0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fdc9 	bl	8001ba0 <ssd1306_WriteCommand>
}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002028:	23af      	movs	r3, #175	; 0xaf
 800202a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <ssd1306_SetDisplayOn+0x38>)
 800202e:	2201      	movs	r2, #1
 8002030:	715a      	strb	r2, [r3, #5]
 8002032:	e004      	b.n	800203e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002034:	23ae      	movs	r3, #174	; 0xae
 8002036:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <ssd1306_SetDisplayOn+0x38>)
 800203a:	2200      	movs	r2, #0
 800203c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fdad 	bl	8001ba0 <ssd1306_WriteCommand>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000768 	.word	0x20000768

08002054 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002054:	f7ff fd82 	bl	8001b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800205a:	490c      	ldr	r1, [pc, #48]	; (800208c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800205c:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <LoopFillZerobss+0x16>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002070:	4c09      	ldr	r4, [pc, #36]	; (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 f9ff 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7ff f91b 	bl	80012bc <main>
  bx lr
 8002086:	4770      	bx	lr
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8002090:	08008730 	.word	0x08008730
  ldr r2, =_sbss
 8002094:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002098:	20000784 	.word	0x20000784

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>
	...

080020a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x28>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x28>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 fc77 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	200f      	movs	r0, #15
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fb50 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fc8f 	bl	8002a0e <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 fc57 	bl	80029ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000020 	.word	0x20000020
 8002124:	20000040 	.word	0x20000040
 8002128:	2000003c 	.word	0x2000003c

0800212c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_IncTick+0x1c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_IncTick+0x20>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_IncTick+0x20>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000040 	.word	0x20000040
 800214c:	20000770 	.word	0x20000770

08002150 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return uwTick;
 8002154:	4b02      	ldr	r3, [pc, #8]	; (8002160 <HAL_GetTick+0x10>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000770 	.word	0x20000770

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff fff0 	bl	8002150 <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffe0 	bl	8002150 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000040 	.word	0x20000040

080021ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0ed      	b.n	800239a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fafa 	bl	80017c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e0:	f7ff ffb6 	bl	8002150 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021e6:	e012      	b.n	800220e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e8:	f7ff ffb2 	bl	8002150 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d90b      	bls.n	800220e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2205      	movs	r2, #5
 8002206:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0c5      	b.n	800239a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0e5      	beq.n	80021e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0202 	bic.w	r2, r2, #2
 800222a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800222c:	f7ff ff90 	bl	8002150 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002232:	e012      	b.n	800225a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002234:	f7ff ff8c 	bl	8002150 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b0a      	cmp	r3, #10
 8002240:	d90b      	bls.n	800225a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09f      	b.n	800239a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e5      	bne.n	8002234 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e007      	b.n	8002292 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e5b      	ldrb	r3, [r3, #25]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e007      	b.n	80022bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e9b      	ldrb	r3, [r3, #26]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e007      	b.n	80022e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0220 	bic.w	r2, r2, #32
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7edb      	ldrb	r3, [r3, #27]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d108      	bne.n	8002300 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0210 	bic.w	r2, r2, #16
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7f1b      	ldrb	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e007      	b.n	800233a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0208 	bic.w	r2, r2, #8
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7f5b      	ldrb	r3, [r3, #29]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	ea42 0103 	orr.w	r1, r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b087      	sub	sp, #28
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d003      	beq.n	80023c8 <HAL_CAN_ConfigFilter+0x26>
 80023c0:	7cfb      	ldrb	r3, [r7, #19]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	f040 80aa 	bne.w	800251c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2201      	movs	r2, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d123      	bne.n	800244a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002424:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	3248      	adds	r2, #72	; 0x48
 800242a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800243e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002440:	6979      	ldr	r1, [r7, #20]
 8002442:	3348      	adds	r3, #72	; 0x48
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	440b      	add	r3, r1
 8002448:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d122      	bne.n	8002498 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	431a      	orrs	r2, r3
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002472:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3248      	adds	r2, #72	; 0x48
 8002478:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800248c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	3348      	adds	r3, #72	; 0x48
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024b2:	e007      	b.n	80024c4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	431a      	orrs	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024de:	e007      	b.n	80024f0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d107      	bne.n	8002508 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	431a      	orrs	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800250e:	f023 0201 	bic.w	r2, r3, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e006      	b.n	800252a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d12e      	bne.n	80025a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002560:	f7ff fdf6 	bl	8002150 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002566:	e012      	b.n	800258e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002568:	f7ff fdf2 	bl	8002150 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d90b      	bls.n	800258e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2205      	movs	r2, #5
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e012      	b.n	80025b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e006      	b.n	80025b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025da:	7ffb      	ldrb	r3, [r7, #31]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d003      	beq.n	80025e8 <HAL_CAN_AddTxMessage+0x2c>
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	f040 80ad 	bne.w	8002742 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8095 	beq.w	8002732 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	0e1b      	lsrs	r3, r3, #24
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002612:	2201      	movs	r2, #1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10d      	bne.n	8002640 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800262e:	68f9      	ldr	r1, [r7, #12]
 8002630:	6809      	ldr	r1, [r1, #0]
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3318      	adds	r3, #24
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	440b      	add	r3, r1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e00f      	b.n	8002660 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800264a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002654:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3318      	adds	r3, #24
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	440b      	add	r3, r1
 800265e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6819      	ldr	r1, [r3, #0]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	3318      	adds	r3, #24
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	440b      	add	r3, r1
 8002670:	3304      	adds	r3, #4
 8002672:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	7d1b      	ldrb	r3, [r3, #20]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d111      	bne.n	80026a0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3318      	adds	r3, #24
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	6811      	ldr	r1, [r2, #0]
 8002690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3318      	adds	r3, #24
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	440b      	add	r3, r1
 800269c:	3304      	adds	r3, #4
 800269e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3307      	adds	r3, #7
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	061a      	lsls	r2, r3, #24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3306      	adds	r3, #6
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3305      	adds	r3, #5
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	4313      	orrs	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3204      	adds	r2, #4
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	4610      	mov	r0, r2
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	6811      	ldr	r1, [r2, #0]
 80026c8:	ea43 0200 	orr.w	r2, r3, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	440b      	add	r3, r1
 80026d2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3303      	adds	r3, #3
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	061a      	lsls	r2, r3, #24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3302      	adds	r3, #2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	041b      	lsls	r3, r3, #16
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3301      	adds	r3, #1
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	4313      	orrs	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	4610      	mov	r0, r2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	ea43 0200 	orr.w	r2, r3, r0
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	440b      	add	r3, r1
 8002708:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800270c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3318      	adds	r3, #24
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	f043 0201 	orr.w	r2, r3, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3318      	adds	r3, #24
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	440b      	add	r3, r1
 800272c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	e00e      	b.n	8002750 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e006      	b.n	8002750 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
  }
}
 8002750:	4618      	mov	r0, r3
 8002752:	3724      	adds	r7, #36	; 0x24
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d002      	beq.n	800277a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d11d      	bne.n	80027b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	3301      	adds	r3, #1
 800278c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d002      	beq.n	80027e0 <HAL_CAN_ActivateNotification+0x1e>
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d109      	bne.n	80027f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6959      	ldr	r1, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e006      	b.n	8002802 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4906      	ldr	r1, [pc, #24]	; (80028a4 <__NVIC_EnableIRQ+0x34>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100

080028a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	db0a      	blt.n	80028d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	490c      	ldr	r1, [pc, #48]	; (80028f4 <__NVIC_SetPriority+0x4c>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	0112      	lsls	r2, r2, #4
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	440b      	add	r3, r1
 80028cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d0:	e00a      	b.n	80028e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4908      	ldr	r1, [pc, #32]	; (80028f8 <__NVIC_SetPriority+0x50>)
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3b04      	subs	r3, #4
 80028e0:	0112      	lsls	r2, r2, #4
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	440b      	add	r3, r1
 80028e6:	761a      	strb	r2, [r3, #24]
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f1c3 0307 	rsb	r3, r3, #7
 8002916:	2b04      	cmp	r3, #4
 8002918:	bf28      	it	cs
 800291a:	2304      	movcs	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3304      	adds	r3, #4
 8002922:	2b06      	cmp	r3, #6
 8002924:	d902      	bls.n	800292c <NVIC_EncodePriority+0x30>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3b03      	subs	r3, #3
 800292a:	e000      	b.n	800292e <NVIC_EncodePriority+0x32>
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002930:	f04f 32ff 	mov.w	r2, #4294967295
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43da      	mvns	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	401a      	ands	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	fa01 f303 	lsl.w	r3, r1, r3
 800294e:	43d9      	mvns	r1, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	4313      	orrs	r3, r2
         );
}
 8002956:	4618      	mov	r0, r3
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	210f      	movs	r1, #15
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f7ff ff90 	bl	80028a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff2d 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029cc:	f7ff ff42 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	6978      	ldr	r0, [r7, #20]
 80029d8:	f7ff ff90 	bl	80028fc <NVIC_EncodePriority>
 80029dc:	4602      	mov	r2, r0
 80029de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff5f 	bl	80028a8 <__NVIC_SetPriority>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ff35 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ffa2 	bl	8002960 <SysTick_Config>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e043      	b.n	8002ac6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_DMA_Init+0xa8>)
 8002a46:	4413      	add	r3, r2
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <HAL_DMA_Init+0xac>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1f      	ldr	r2, [pc, #124]	; (8002ad8 <HAL_DMA_Init+0xb0>)
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	bffdfff8 	.word	0xbffdfff8
 8002ad4:	cccccccd 	.word	0xcccccccd
 8002ad8:	40020000 	.word	0x40020000

08002adc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_DMA_Start_IT+0x20>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e04b      	b.n	8002b94 <HAL_DMA_Start_IT+0xb8>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d13a      	bne.n	8002b86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f9eb 	bl	8002f10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 020e 	orr.w	r2, r2, #14
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00f      	b.n	8002b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0204 	bic.w	r2, r2, #4
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 020a 	orr.w	r2, r2, #10
 8002b72:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d008      	beq.n	8002bc6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e020      	b.n	8002c08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 020e 	bic.w	r2, r2, #14
 8002bd4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	2101      	movs	r1, #1
 8002bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d005      	beq.n	8002c38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	e051      	b.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 020e 	bic.w	r2, r2, #14
 8002c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	; (8002ce8 <HAL_DMA_Abort_IT+0xd4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d029      	beq.n	8002cb6 <HAL_DMA_Abort_IT+0xa2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_DMA_Abort_IT+0xd8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d022      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0x9e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1f      	ldr	r2, [pc, #124]	; (8002cf0 <HAL_DMA_Abort_IT+0xdc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01a      	beq.n	8002cac <HAL_DMA_Abort_IT+0x98>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_DMA_Abort_IT+0xe0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d012      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0x92>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_DMA_Abort_IT+0xe4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d00a      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0x8c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_DMA_Abort_IT+0xe8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d102      	bne.n	8002c9a <HAL_DMA_Abort_IT+0x86>
 8002c94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c98:	e00e      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002c9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c9e:	e00b      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca4:	e008      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002caa:	e005      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb0:	e002      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_Abort_IT+0xa4>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <HAL_DMA_Abort_IT+0xec>)
 8002cba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
    } 
  }
  return status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020008 	.word	0x40020008
 8002cec:	4002001c 	.word	0x4002001c
 8002cf0:	40020030 	.word	0x40020030
 8002cf4:	40020044 	.word	0x40020044
 8002cf8:	40020058 	.word	0x40020058
 8002cfc:	4002006c 	.word	0x4002006c
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2204      	movs	r2, #4
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d04f      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xc8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a66      	ldr	r2, [pc, #408]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d029      	beq.n	8002db2 <HAL_DMA_IRQHandler+0xae>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a65      	ldr	r2, [pc, #404]	; (8002ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_IRQHandler+0xaa>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a63      	ldr	r2, [pc, #396]	; (8002efc <HAL_DMA_IRQHandler+0x1f8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01a      	beq.n	8002da8 <HAL_DMA_IRQHandler+0xa4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a62      	ldr	r2, [pc, #392]	; (8002f00 <HAL_DMA_IRQHandler+0x1fc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d012      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x9e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a60      	ldr	r2, [pc, #384]	; (8002f04 <HAL_DMA_IRQHandler+0x200>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00a      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x98>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a5f      	ldr	r2, [pc, #380]	; (8002f08 <HAL_DMA_IRQHandler+0x204>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <HAL_DMA_IRQHandler+0x92>
 8002d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d94:	e00e      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002d96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d9a:	e00b      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002d9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002da0:	e008      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002da6:	e005      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dac:	e002      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002dae:	2340      	movs	r3, #64	; 0x40
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_IRQHandler+0xb0>
 8002db2:	2304      	movs	r3, #4
 8002db4:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <HAL_DMA_IRQHandler+0x208>)
 8002db6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8094 	beq.w	8002eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dca:	e08e      	b.n	8002eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d056      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x186>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d051      	beq.n	8002e8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 020a 	bic.w	r2, r2, #10
 8002e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a38      	ldr	r2, [pc, #224]	; (8002ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d029      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x166>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a37      	ldr	r2, [pc, #220]	; (8002ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x162>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a35      	ldr	r2, [pc, #212]	; (8002efc <HAL_DMA_IRQHandler+0x1f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01a      	beq.n	8002e60 <HAL_DMA_IRQHandler+0x15c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a34      	ldr	r2, [pc, #208]	; (8002f00 <HAL_DMA_IRQHandler+0x1fc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d012      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x156>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a32      	ldr	r2, [pc, #200]	; (8002f04 <HAL_DMA_IRQHandler+0x200>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00a      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x150>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a31      	ldr	r2, [pc, #196]	; (8002f08 <HAL_DMA_IRQHandler+0x204>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x14a>
 8002e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e4c:	e00e      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e52:	e00b      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e58:	e008      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e5e:	e005      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e64:	e002      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e66:	2320      	movs	r3, #32
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_IRQHandler+0x168>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_DMA_IRQHandler+0x208>)
 8002e6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d034      	beq.n	8002eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e88:	e02f      	b.n	8002eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2208      	movs	r2, #8
 8002e90:	409a      	lsls	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d028      	beq.n	8002eec <HAL_DMA_IRQHandler+0x1e8>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 020e 	bic.w	r2, r2, #14
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
    }
  }
  return;
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
}
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40020008 	.word	0x40020008
 8002ef8:	4002001c 	.word	0x4002001c
 8002efc:	40020030 	.word	0x40020030
 8002f00:	40020044 	.word	0x40020044
 8002f04:	40020058 	.word	0x40020058
 8002f08:	4002006c 	.word	0x4002006c
 8002f0c:	40020000 	.word	0x40020000

08002f10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d108      	bne.n	8002f50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4e:	e007      	b.n	8002f60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b08b      	sub	sp, #44	; 0x2c
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	e169      	b.n	8003254 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f80:	2201      	movs	r2, #1
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f040 8158 	bne.w	800324e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a9a      	ldr	r2, [pc, #616]	; (800320c <HAL_GPIO_Init+0x2a0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d05e      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
 8002fa8:	4a98      	ldr	r2, [pc, #608]	; (800320c <HAL_GPIO_Init+0x2a0>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d875      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fae:	4a98      	ldr	r2, [pc, #608]	; (8003210 <HAL_GPIO_Init+0x2a4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d058      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
 8002fb4:	4a96      	ldr	r2, [pc, #600]	; (8003210 <HAL_GPIO_Init+0x2a4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d86f      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fba:	4a96      	ldr	r2, [pc, #600]	; (8003214 <HAL_GPIO_Init+0x2a8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d052      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
 8002fc0:	4a94      	ldr	r2, [pc, #592]	; (8003214 <HAL_GPIO_Init+0x2a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d869      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fc6:	4a94      	ldr	r2, [pc, #592]	; (8003218 <HAL_GPIO_Init+0x2ac>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04c      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
 8002fcc:	4a92      	ldr	r2, [pc, #584]	; (8003218 <HAL_GPIO_Init+0x2ac>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d863      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fd2:	4a92      	ldr	r2, [pc, #584]	; (800321c <HAL_GPIO_Init+0x2b0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d046      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
 8002fd8:	4a90      	ldr	r2, [pc, #576]	; (800321c <HAL_GPIO_Init+0x2b0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d85d      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fde:	2b12      	cmp	r3, #18
 8002fe0:	d82a      	bhi.n	8003038 <HAL_GPIO_Init+0xcc>
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d859      	bhi.n	800309a <HAL_GPIO_Init+0x12e>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_GPIO_Init+0x80>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003067 	.word	0x08003067
 8002ff0:	08003041 	.word	0x08003041
 8002ff4:	08003053 	.word	0x08003053
 8002ff8:	08003095 	.word	0x08003095
 8002ffc:	0800309b 	.word	0x0800309b
 8003000:	0800309b 	.word	0x0800309b
 8003004:	0800309b 	.word	0x0800309b
 8003008:	0800309b 	.word	0x0800309b
 800300c:	0800309b 	.word	0x0800309b
 8003010:	0800309b 	.word	0x0800309b
 8003014:	0800309b 	.word	0x0800309b
 8003018:	0800309b 	.word	0x0800309b
 800301c:	0800309b 	.word	0x0800309b
 8003020:	0800309b 	.word	0x0800309b
 8003024:	0800309b 	.word	0x0800309b
 8003028:	0800309b 	.word	0x0800309b
 800302c:	0800309b 	.word	0x0800309b
 8003030:	08003049 	.word	0x08003049
 8003034:	0800305d 	.word	0x0800305d
 8003038:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_GPIO_Init+0x2b4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800303e:	e02c      	b.n	800309a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	623b      	str	r3, [r7, #32]
          break;
 8003046:	e029      	b.n	800309c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	3304      	adds	r3, #4
 800304e:	623b      	str	r3, [r7, #32]
          break;
 8003050:	e024      	b.n	800309c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	3308      	adds	r3, #8
 8003058:	623b      	str	r3, [r7, #32]
          break;
 800305a:	e01f      	b.n	800309c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	330c      	adds	r3, #12
 8003062:	623b      	str	r3, [r7, #32]
          break;
 8003064:	e01a      	b.n	800309c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306e:	2304      	movs	r3, #4
 8003070:	623b      	str	r3, [r7, #32]
          break;
 8003072:	e013      	b.n	800309c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800307c:	2308      	movs	r3, #8
 800307e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	611a      	str	r2, [r3, #16]
          break;
 8003086:	e009      	b.n	800309c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003088:	2308      	movs	r3, #8
 800308a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	615a      	str	r2, [r3, #20]
          break;
 8003092:	e003      	b.n	800309c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003094:	2300      	movs	r3, #0
 8003096:	623b      	str	r3, [r7, #32]
          break;
 8003098:	e000      	b.n	800309c <HAL_GPIO_Init+0x130>
          break;
 800309a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	d801      	bhi.n	80030a6 <HAL_GPIO_Init+0x13a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	e001      	b.n	80030aa <HAL_GPIO_Init+0x13e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3304      	adds	r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2bff      	cmp	r3, #255	; 0xff
 80030b0:	d802      	bhi.n	80030b8 <HAL_GPIO_Init+0x14c>
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	e002      	b.n	80030be <HAL_GPIO_Init+0x152>
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	3b08      	subs	r3, #8
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	210f      	movs	r1, #15
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80b1 	beq.w	800324e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030ec:	4b4d      	ldr	r3, [pc, #308]	; (8003224 <HAL_GPIO_Init+0x2b8>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4a4c      	ldr	r2, [pc, #304]	; (8003224 <HAL_GPIO_Init+0x2b8>)
 80030f2:	f043 0301 	orr.w	r3, r3, #1
 80030f6:	6193      	str	r3, [r2, #24]
 80030f8:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_GPIO_Init+0x2b8>)
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003104:	4a48      	ldr	r2, [pc, #288]	; (8003228 <HAL_GPIO_Init+0x2bc>)
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	3302      	adds	r3, #2
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a40      	ldr	r2, [pc, #256]	; (800322c <HAL_GPIO_Init+0x2c0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_GPIO_Init+0x1ec>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3f      	ldr	r2, [pc, #252]	; (8003230 <HAL_GPIO_Init+0x2c4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00d      	beq.n	8003154 <HAL_GPIO_Init+0x1e8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_GPIO_Init+0x2c8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0x1e4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3d      	ldr	r2, [pc, #244]	; (8003238 <HAL_GPIO_Init+0x2cc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_GPIO_Init+0x1e0>
 8003148:	2303      	movs	r3, #3
 800314a:	e006      	b.n	800315a <HAL_GPIO_Init+0x1ee>
 800314c:	2304      	movs	r3, #4
 800314e:	e004      	b.n	800315a <HAL_GPIO_Init+0x1ee>
 8003150:	2302      	movs	r3, #2
 8003152:	e002      	b.n	800315a <HAL_GPIO_Init+0x1ee>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <HAL_GPIO_Init+0x1ee>
 8003158:	2300      	movs	r3, #0
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	f002 0203 	and.w	r2, r2, #3
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	4093      	lsls	r3, r2
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800316a:	492f      	ldr	r1, [pc, #188]	; (8003228 <HAL_GPIO_Init+0x2bc>)
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003184:	4b2d      	ldr	r3, [pc, #180]	; (800323c <HAL_GPIO_Init+0x2d0>)
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	492c      	ldr	r1, [pc, #176]	; (800323c <HAL_GPIO_Init+0x2d0>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003192:	4b2a      	ldr	r3, [pc, #168]	; (800323c <HAL_GPIO_Init+0x2d0>)
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	43db      	mvns	r3, r3
 800319a:	4928      	ldr	r1, [pc, #160]	; (800323c <HAL_GPIO_Init+0x2d0>)
 800319c:	4013      	ands	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4922      	ldr	r1, [pc, #136]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	491e      	ldr	r1, [pc, #120]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031d4:	4b19      	ldr	r3, [pc, #100]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4918      	ldr	r1, [pc, #96]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	43db      	mvns	r3, r3
 80031ea:	4914      	ldr	r1, [pc, #80]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d021      	beq.n	8003240 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_GPIO_Init+0x2d0>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	490e      	ldr	r1, [pc, #56]	; (800323c <HAL_GPIO_Init+0x2d0>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e021      	b.n	800324e <HAL_GPIO_Init+0x2e2>
 800320a:	bf00      	nop
 800320c:	10320000 	.word	0x10320000
 8003210:	10310000 	.word	0x10310000
 8003214:	10220000 	.word	0x10220000
 8003218:	10210000 	.word	0x10210000
 800321c:	10120000 	.word	0x10120000
 8003220:	10110000 	.word	0x10110000
 8003224:	40021000 	.word	0x40021000
 8003228:	40010000 	.word	0x40010000
 800322c:	40010800 	.word	0x40010800
 8003230:	40010c00 	.word	0x40010c00
 8003234:	40011000 	.word	0x40011000
 8003238:	40011400 	.word	0x40011400
 800323c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_GPIO_Init+0x304>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	43db      	mvns	r3, r3
 8003248:	4909      	ldr	r1, [pc, #36]	; (8003270 <HAL_GPIO_Init+0x304>)
 800324a:	4013      	ands	r3, r2
 800324c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	3301      	adds	r3, #1
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f ae8e 	bne.w	8002f80 <HAL_GPIO_Init+0x14>
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	372c      	adds	r7, #44	; 0x2c
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e001      	b.n	8003296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr

080032a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	807b      	strh	r3, [r7, #2]
 80032ae:	4613      	mov	r3, r2
 80032b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b2:	787b      	ldrb	r3, [r7, #1]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032be:	e003      	b.n	80032c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	041a      	lsls	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	611a      	str	r2, [r3, #16]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e272      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8087 	beq.w	8003402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f4:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d00c      	beq.n	800331a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003300:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d112      	bne.n	8003332 <HAL_RCC_OscConfig+0x5e>
 800330c:	4b8c      	ldr	r3, [pc, #560]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d10b      	bne.n	8003332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	4b89      	ldr	r3, [pc, #548]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d06c      	beq.n	8003400 <HAL_RCC_OscConfig+0x12c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d168      	bne.n	8003400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e24c      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x76>
 800333c:	4b80      	ldr	r3, [pc, #512]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a7f      	ldr	r2, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x98>
 8003352:	4b7b      	ldr	r3, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a7a      	ldr	r2, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b78      	ldr	r3, [pc, #480]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a77      	ldr	r2, [pc, #476]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0xbc>
 8003376:	4b72      	ldr	r3, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a71      	ldr	r2, [pc, #452]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b6f      	ldr	r3, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 8003390:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a6a      	ldr	r2, [pc, #424]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a67      	ldr	r2, [pc, #412]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe fece 	bl	8002150 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe feca 	bl	8002150 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e200      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe4>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe feba 	bl	8002150 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe feb6 	bl	8002150 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1ec      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x10c>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340e:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800341a:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x18c>
 8003426:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x176>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1c0      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4939      	ldr	r1, [pc, #228]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x270>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fe fe6f 	bl	8002150 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003476:	f7fe fe6b 	bl	8002150 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e1a1      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4927      	ldr	r1, [pc, #156]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCC_OscConfig+0x270>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fe4e 	bl	8002150 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe fe4a 	bl	8002150 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e180      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03a      	beq.n	8003558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fe fe2e 	bl	8002150 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fe fe2a 	bl	8002150 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e160      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003516:	2001      	movs	r0, #1
 8003518:	f000 face 	bl	8003ab8 <RCC_Delay>
 800351c:	e01c      	b.n	8003558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fe fe14 	bl	8002150 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352a:	e00f      	b.n	800354c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352c:	f7fe fe10 	bl	8002150 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d908      	bls.n	800354c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e146      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	42420000 	.word	0x42420000
 8003548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b92      	ldr	r3, [pc, #584]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e9      	bne.n	800352c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a6 	beq.w	80036b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b8b      	ldr	r3, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	4a87      	ldr	r2, [pc, #540]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	61d3      	str	r3, [r2, #28]
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b82      	ldr	r3, [pc, #520]	; (800379c <HAL_RCC_OscConfig+0x4c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b7f      	ldr	r3, [pc, #508]	; (800379c <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a7e      	ldr	r2, [pc, #504]	; (800379c <HAL_RCC_OscConfig+0x4c8>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fdd1 	bl	8002150 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fdcd 	bl	8002150 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e103      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b75      	ldr	r3, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x4c8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x312>
 80035d8:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	4a6e      	ldr	r2, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	e02d      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x334>
 80035ee:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a69      	ldr	r2, [pc, #420]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4a66      	ldr	r2, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	6213      	str	r3, [r2, #32]
 8003606:	e01c      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x356>
 8003610:	4b61      	ldr	r3, [pc, #388]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a60      	ldr	r2, [pc, #384]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	4b5e      	ldr	r3, [pc, #376]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 800362a:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a5a      	ldr	r2, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6213      	str	r3, [r2, #32]
 8003636:	4b58      	ldr	r3, [pc, #352]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	4a57      	ldr	r2, [pc, #348]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fe fd81 	bl	8002150 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe fd7d 	bl	8002150 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0b1      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCC_OscConfig+0x37e>
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe fd6b 	bl	8002150 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe fd67 	bl	8002150 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e09b      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ee      	bne.n	800367e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b3c      	ldr	r3, [pc, #240]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d061      	beq.n	800378c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d146      	bne.n	800375e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b33      	ldr	r3, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe fd3b 	bl	8002150 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe fd37 	bl	8002150 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e06d      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d108      	bne.n	8003718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003706:	4b24      	ldr	r3, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	4921      	ldr	r1, [pc, #132]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a19      	ldr	r1, [r3, #32]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	430b      	orrs	r3, r1
 800372a:	491b      	ldr	r1, [pc, #108]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b1b      	ldr	r3, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fd0b 	bl	8002150 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fe fd07 	bl	8002150 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e03d      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x46a>
 800375c:	e035      	b.n	80037ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x4cc>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fcf4 	bl	8002150 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fcf0 	bl	8002150 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e026      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x498>
 800378a:	e01e      	b.n	80037ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e019      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_OscConfig+0x500>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d001      	beq.n	80037ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0d0      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b67      	ldr	r3, [pc, #412]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	4965      	ldr	r1, [pc, #404]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b63      	ldr	r3, [pc, #396]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0b8      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800383e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800384c:	4b53      	ldr	r3, [pc, #332]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a52      	ldr	r2, [pc, #328]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003856:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	494d      	ldr	r1, [pc, #308]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d040      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b47      	ldr	r3, [pc, #284]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d115      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07f      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e073      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b3d      	ldr	r3, [pc, #244]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e06b      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4936      	ldr	r1, [pc, #216]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fe fc42 	bl	8002150 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fe fc3e 	bl	8002150 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e053      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b2d      	ldr	r3, [pc, #180]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d210      	bcs.n	8003928 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4922      	ldr	r1, [pc, #136]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e032      	b.n	800398e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003934:	4b19      	ldr	r3, [pc, #100]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4916      	ldr	r1, [pc, #88]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d009      	beq.n	8003966 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	490e      	ldr	r1, [pc, #56]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003966:	f000 f821 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 800396a:	4602      	mov	r2, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	490a      	ldr	r1, [pc, #40]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003978:	5ccb      	ldrb	r3, [r1, r3]
 800397a:	fa22 f303 	lsr.w	r3, r2, r3
 800397e:	4a09      	ldr	r2, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fba0 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40022000 	.word	0x40022000
 800399c:	40021000 	.word	0x40021000
 80039a0:	08005eb4 	.word	0x08005eb4
 80039a4:	20000020 	.word	0x20000020
 80039a8:	2000003c 	.word	0x2000003c

080039ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c6:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d002      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0x30>
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d003      	beq.n	80039e2 <HAL_RCC_GetSysClockFreq+0x36>
 80039da:	e027      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	e027      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	0c9b      	lsrs	r3, r3, #18
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d010      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x94>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	0c5b      	lsrs	r3, r3, #17
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0e:	fb03 f202 	mul.w	r2, r3, r2
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e004      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	613b      	str	r3, [r7, #16]
      break;
 8003a2a:	e002      	b.n	8003a32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2e:	613b      	str	r3, [r7, #16]
      break;
 8003a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a32:	693b      	ldr	r3, [r7, #16]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	007a1200 	.word	0x007a1200
 8003a48:	080086e0 	.word	0x080086e0
 8003a4c:	080086f0 	.word	0x080086f0
 8003a50:	003d0900 	.word	0x003d0900

08003a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a58:	4b02      	ldr	r3, [pc, #8]	; (8003a64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	20000020 	.word	0x20000020

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff2 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	08005ec4 	.word	0x08005ec4

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffde 	bl	8003a54 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	0adb      	lsrs	r3, r3, #11
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	; (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	08005ec4 	.word	0x08005ec4

08003ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <RCC_Delay+0x34>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <RCC_Delay+0x38>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0a5b      	lsrs	r3, r3, #9
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad4:	bf00      	nop
  }
  while (Delay --);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1e5a      	subs	r2, r3, #1
 8003ada:	60fa      	str	r2, [r7, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f9      	bne.n	8003ad4 <RCC_Delay+0x1c>
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000020 	.word	0x20000020
 8003af0:	10624dd3 	.word	0x10624dd3

08003af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e076      	b.n	8003bf4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b16:	d009      	beq.n	8003b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
 8003b1e:	e005      	b.n	8003b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fd fe9c 	bl	8001884 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	ea42 0103 	orr.w	r1, r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	0c1a      	lsrs	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f002 0204 	and.w	r2, r2, #4
 8003bd2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_SPI_Transmit+0x22>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e12d      	b.n	8003e7a <HAL_SPI_Transmit+0x27e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c26:	f7fe fa93 	bl	8002150 <HAL_GetTick>
 8003c2a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c40:	e116      	b.n	8003e70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_SPI_Transmit+0x52>
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c52:	e10d      	b.n	8003e70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2203      	movs	r2, #3
 8003c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	88fa      	ldrh	r2, [r7, #6]
 8003c6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	88fa      	ldrh	r2, [r7, #6]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d10f      	bne.n	8003cbc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc6:	2b40      	cmp	r3, #64	; 0x40
 8003cc8:	d007      	beq.n	8003cda <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce2:	d14f      	bne.n	8003d84 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SPI_Transmit+0xf6>
 8003cec:	8afb      	ldrh	r3, [r7, #22]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d142      	bne.n	8003d78 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	881a      	ldrh	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	1c9a      	adds	r2, r3, #2
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d16:	e02f      	b.n	8003d78 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d112      	bne.n	8003d4c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	881a      	ldrh	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	1c9a      	adds	r2, r3, #2
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d4a:	e015      	b.n	8003d78 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d4c:	f7fe fa00 	bl	8002150 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d803      	bhi.n	8003d64 <HAL_SPI_Transmit+0x168>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d102      	bne.n	8003d6a <HAL_SPI_Transmit+0x16e>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d76:	e07b      	b.n	8003e70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ca      	bne.n	8003d18 <HAL_SPI_Transmit+0x11c>
 8003d82:	e050      	b.n	8003e26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_Transmit+0x196>
 8003d8c:	8afb      	ldrh	r3, [r7, #22]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d144      	bne.n	8003e1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	330c      	adds	r3, #12
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003db8:	e030      	b.n	8003e1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d113      	bne.n	8003df0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dee:	e015      	b.n	8003e1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003df0:	f7fe f9ae 	bl	8002150 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d803      	bhi.n	8003e08 <HAL_SPI_Transmit+0x20c>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Transmit+0x212>
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003e1a:	e029      	b.n	8003e70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1c9      	bne.n	8003dba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	6839      	ldr	r1, [r7, #0]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f8b2 	bl	8003f94 <SPI_EndRxTxTransaction>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77fb      	strb	r3, [r7, #31]
 8003e66:	e003      	b.n	8003e70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e94:	f7fe f95c 	bl	8002150 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea4:	f7fe f954 	bl	8002150 <HAL_GetTick>
 8003ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	015b      	lsls	r3, r3, #5
 8003eb0:	0d1b      	lsrs	r3, r3, #20
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eba:	e054      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d050      	beq.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec4:	f7fe f944 	bl	8002150 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d902      	bls.n	8003eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13d      	bne.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d111      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	d004      	beq.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d107      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f20:	d10f      	bne.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e017      	b.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d19b      	bne.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000020 	.word	0x20000020

08003f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff6a 	bl	8003e84 <SPI_WaitFlagStateUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e000      	b.n	8003fc8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e093      	b.n	800410c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d106      	bne.n	8003ffe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fd fc81 	bl	8001900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004014:	f023 0307 	bic.w	r3, r3, #7
 8004018:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	4619      	mov	r1, r3
 8004024:	4610      	mov	r0, r2
 8004026:	f000 f903 	bl	8004230 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	4313      	orrs	r3, r2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004070:	f023 030c 	bic.w	r3, r3, #12
 8004074:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	4313      	orrs	r3, r2
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	011a      	lsls	r2, r3, #4
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	031b      	lsls	r3, r3, #12
 80040a0:	4313      	orrs	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	4313      	orrs	r3, r2
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004124:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800412c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004134:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800413c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d110      	bne.n	8004166 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800414a:	7b7b      	ldrb	r3, [r7, #13]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e069      	b.n	8004228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004164:	e031      	b.n	80041ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d110      	bne.n	800418e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004172:	7b3b      	ldrb	r3, [r7, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d001      	beq.n	800417c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e055      	b.n	8004228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418c:	e01d      	b.n	80041ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d108      	bne.n	80041a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004194:	7bbb      	ldrb	r3, [r7, #14]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d105      	bne.n	80041a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d102      	bne.n	80041a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a0:	7b3b      	ldrb	r3, [r7, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e03e      	b.n	8004228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_TIM_Encoder_Start+0xc4>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d008      	beq.n	80041e8 <HAL_TIM_Encoder_Start+0xd4>
 80041d6:	e00f      	b.n	80041f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2201      	movs	r2, #1
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 f887 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 80041e6:	e016      	b.n	8004216 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	2104      	movs	r1, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 f87f 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 80041f6:	e00e      	b.n	8004216 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2201      	movs	r2, #1
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f877 	bl	80042f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	2104      	movs	r1, #4
 800420e:	4618      	mov	r0, r3
 8004210:	f000 f870 	bl	80042f4 <TIM_CCxChannelCmd>
      break;
 8004214:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2201      	movs	r2, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	43db      	mvns	r3, r3
 8004316:	401a      	ands	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004350:	2302      	movs	r3, #2
 8004352:	e046      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a16      	ldr	r2, [pc, #88]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a10      	ldr	r2, [pc, #64]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800

080043f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e042      	b.n	8004490 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd faac 	bl	800197c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 ff8b 	bl	8005358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691a      	ldr	r2, [r3, #16]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	; 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b20      	cmp	r3, #32
 80044b6:	d16d      	bne.n	8004594 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_UART_Transmit+0x2c>
 80044be:	88fb      	ldrh	r3, [r7, #6]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e066      	b.n	8004596 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2221      	movs	r2, #33	; 0x21
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fe3b 	bl	8002150 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	88fa      	ldrh	r2, [r7, #6]
 80044e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d108      	bne.n	8004504 <HAL_UART_Transmit+0x6c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d104      	bne.n	8004504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e003      	b.n	800450c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800450c:	e02a      	b.n	8004564 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	2180      	movs	r1, #128	; 0x80
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 fc53 	bl	8004dc4 <UART_WaitOnFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d001      	beq.n	8004528 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e036      	b.n	8004596 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3302      	adds	r3, #2
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	e007      	b.n	8004556 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	3301      	adds	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1cf      	bne.n	800450e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2200      	movs	r2, #0
 8004576:	2140      	movs	r1, #64	; 0x40
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fc23 	bl	8004dc4 <UART_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e006      	b.n	8004596 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e000      	b.n	8004596 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004594:	2302      	movs	r3, #2
  }
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b08c      	sub	sp, #48	; 0x30
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d14a      	bne.n	800464e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e043      	b.n	8004650 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc60 	bl	8004ea0 <UART_Start_Receive_DMA>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d12c      	bne.n	8004648 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d125      	bne.n	8004642 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	617b      	str	r3, [r7, #20]
   return(result);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f043 0310 	orr.w	r3, r3, #16
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462c:	627a      	str	r2, [r7, #36]	; 0x24
 800462e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6a39      	ldr	r1, [r7, #32]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	61fb      	str	r3, [r7, #28]
   return(result);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004640:	e002      	b.n	8004648 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800464c:	e000      	b.n	8004650 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3730      	adds	r7, #48	; 0x30
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b0ba      	sub	sp, #232	; 0xe8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004684:	2300      	movs	r3, #0
 8004686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_UART_IRQHandler+0x66>
 80046aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 fd90 	bl	80051dc <UART_Receive_IT>
      return;
 80046bc:	e25b      	b.n	8004b76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80de 	beq.w	8004884 <HAL_UART_IRQHandler+0x22c>
 80046c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d106      	bne.n	80046e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80d1 	beq.w	8004884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00b      	beq.n	8004706 <HAL_UART_IRQHandler+0xae>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fe:	f043 0201 	orr.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_UART_IRQHandler+0xd2>
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f043 0202 	orr.w	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_UART_IRQHandler+0xf6>
 8004736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	f043 0204 	orr.w	r2, r3, #4
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800474e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <HAL_UART_IRQHandler+0x126>
 800475a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004776:	f043 0208 	orr.w	r2, r3, #8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 81f2 	beq.w	8004b6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <HAL_UART_IRQHandler+0x14e>
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fd1b 	bl	80051dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <HAL_UART_IRQHandler+0x17a>
 80047ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d04f      	beq.n	8004872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fc25 	bl	8005022 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d041      	beq.n	800486a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3314      	adds	r3, #20
 80047ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3314      	adds	r3, #20
 800480e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800481e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800482a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1d9      	bne.n	80047e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d013      	beq.n	8004862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	4a7e      	ldr	r2, [pc, #504]	; (8004a38 <HAL_UART_IRQHandler+0x3e0>)
 8004840:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe f9e4 	bl	8002c14 <HAL_DMA_Abort_IT>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800485c:	4610      	mov	r0, r2
 800485e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e00e      	b.n	8004880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fb fc72 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	e00a      	b.n	8004880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fb fc6e 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	e006      	b.n	8004880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fb fc6a 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800487e:	e175      	b.n	8004b6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	bf00      	nop
    return;
 8004882:	e173      	b.n	8004b6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	2b01      	cmp	r3, #1
 800488a:	f040 814f 	bne.w	8004b2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 8148 	beq.w	8004b2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8141 	beq.w	8004b2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048aa:	2300      	movs	r3, #0
 80048ac:	60bb      	str	r3, [r7, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80b6 	beq.w	8004a3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8145 	beq.w	8004b70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ee:	429a      	cmp	r2, r3
 80048f0:	f080 813e 	bcs.w	8004b70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b20      	cmp	r3, #32
 8004904:	f000 8088 	beq.w	8004a18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004916:	e853 3f00 	ldrex	r3, [r3]
 800491a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800491e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004926:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	330c      	adds	r3, #12
 8004930:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004934:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004938:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004940:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800494c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1d9      	bne.n	8004908 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004978:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800497c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004980:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800498a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e1      	bne.n	8004954 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e3      	bne.n	8004990 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	330c      	adds	r3, #12
 80049dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80049fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e3      	bne.n	80049d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe f8c2 	bl	8002b9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fb fc20 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a34:	e09c      	b.n	8004b70 <HAL_UART_IRQHandler+0x518>
 8004a36:	bf00      	nop
 8004a38:	080050e7 	.word	0x080050e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 808e 	beq.w	8004b74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8089 	beq.w	8004b74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a86:	647a      	str	r2, [r7, #68]	; 0x44
 8004a88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	623b      	str	r3, [r7, #32]
   return(result);
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004abe:	633a      	str	r2, [r7, #48]	; 0x30
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b04:	61fa      	str	r2, [r7, #28]
 8004b06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	617b      	str	r3, [r7, #20]
   return(result);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e3      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fb fba5 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b2a:	e023      	b.n	8004b74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <HAL_UART_IRQHandler+0x4f4>
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fae2 	bl	800510e <UART_Transmit_IT>
    return;
 8004b4a:	e014      	b.n	8004b76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00e      	beq.n	8004b76 <HAL_UART_IRQHandler+0x51e>
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d008      	beq.n	8004b76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb21 	bl	80051ac <UART_EndTransmit_IT>
    return;
 8004b6a:	e004      	b.n	8004b76 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b6c:	bf00      	nop
 8004b6e:	e002      	b.n	8004b76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b74:	bf00      	nop
  }
}
 8004b76:	37e8      	adds	r7, #232	; 0xe8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc80      	pop	{r7}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b09c      	sub	sp, #112	; 0x70
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d172      	bne.n	8004cca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	2200      	movs	r2, #0
 8004be8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c0a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c0c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3314      	adds	r3, #20
 8004c24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	667b      	str	r3, [r7, #100]	; 0x64
 8004c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3314      	adds	r3, #20
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	623b      	str	r3, [r7, #32]
   return(result);
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c68:	663b      	str	r3, [r7, #96]	; 0x60
 8004c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3314      	adds	r3, #20
 8004c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c72:	633a      	str	r2, [r7, #48]	; 0x30
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7a:	e841 2300 	strex	r3, r2, [r1]
 8004c7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e5      	bne.n	8004c52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d119      	bne.n	8004cca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f023 0310 	bic.w	r3, r3, #16
 8004cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cb6:	61fa      	str	r2, [r7, #28]
 8004cb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	69b9      	ldr	r1, [r7, #24]
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e5      	bne.n	8004c96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	2200      	movs	r2, #0
 8004cce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d106      	bne.n	8004ce6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ce0:	f7fb fac8 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ce4:	e002      	b.n	8004cec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ce6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ce8:	f7ff ff51 	bl	8004b8e <HAL_UART_RxCpltCallback>
}
 8004cec:	bf00      	nop
 8004cee:	3770      	adds	r7, #112	; 0x70
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d108      	bne.n	8004d22 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	4619      	mov	r1, r3
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7fb faaa 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d20:	e002      	b.n	8004d28 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff3c 	bl	8004ba0 <HAL_UART_RxHalfCpltCallback>
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b21      	cmp	r3, #33	; 0x21
 8004d62:	d108      	bne.n	8004d76 <UART_DMAError+0x46>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d70:	68b8      	ldr	r0, [r7, #8]
 8004d72:	f000 f92f 	bl	8004fd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b22      	cmp	r3, #34	; 0x22
 8004d96:	d108      	bne.n	8004daa <UART_DMAError+0x7a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da4:	68b8      	ldr	r0, [r7, #8]
 8004da6:	f000 f93c 	bl	8005022 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0210 	orr.w	r2, r3, #16
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	f7fb f9c8 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b090      	sub	sp, #64	; 0x40
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	e050      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d04c      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004de4:	f7fd f9b4 	bl	8002150 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d241      	bcs.n	8004e78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	e853 3f00 	ldrex	r3, [r3]
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e14:	637a      	str	r2, [r7, #52]	; 0x34
 8004e16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1c:	e841 2300 	strex	r3, r2, [r1]
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	613b      	str	r3, [r7, #16]
   return(result);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e48:	623a      	str	r2, [r7, #32]
 8004e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	6a3a      	ldr	r2, [r7, #32]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00f      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d09f      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3740      	adds	r7, #64	; 0x40
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b098      	sub	sp, #96	; 0x60
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	88fa      	ldrh	r2, [r7, #6]
 8004eb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2222      	movs	r2, #34	; 0x22
 8004ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	4a3e      	ldr	r2, [pc, #248]	; (8004fc8 <UART_Start_Receive_DMA+0x128>)
 8004ece:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	4a3d      	ldr	r2, [pc, #244]	; (8004fcc <UART_Start_Receive_DMA+0x12c>)
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004edc:	4a3c      	ldr	r2, [pc, #240]	; (8004fd0 <UART_Start_Receive_DMA+0x130>)
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	f7fd fdec 	bl	8002adc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d019      	beq.n	8004f56 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	330c      	adds	r3, #12
 8004f28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f38:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f42:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004f48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e5      	bne.n	8004f22 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3314      	adds	r3, #20
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f76:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa0:	653b      	str	r3, [r7, #80]	; 0x50
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004faa:	627a      	str	r2, [r7, #36]	; 0x24
 8004fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6a39      	ldr	r1, [r7, #32]
 8004fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e5      	bne.n	8004f8a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3760      	adds	r7, #96	; 0x60
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	08004bc9 	.word	0x08004bc9
 8004fcc:	08004cf5 	.word	0x08004cf5
 8004fd0:	08004d31 	.word	0x08004d31

08004fd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	330c      	adds	r3, #12
 8004fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	61ba      	str	r2, [r7, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	613b      	str	r3, [r7, #16]
   return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005018:	bf00      	nop
 800501a:	3724      	adds	r7, #36	; 0x24
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005022:	b480      	push	{r7}
 8005024:	b095      	sub	sp, #84	; 0x54
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005040:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	330c      	adds	r3, #12
 8005048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800504a:	643a      	str	r2, [r7, #64]	; 0x40
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005050:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3314      	adds	r3, #20
 8005064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	61fb      	str	r3, [r7, #28]
   return(result);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	64bb      	str	r3, [r7, #72]	; 0x48
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3314      	adds	r3, #20
 800507c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e5      	bne.n	800505e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	2b01      	cmp	r3, #1
 8005098:	d119      	bne.n	80050ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
 80050a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f023 0310 	bic.w	r3, r3, #16
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ba:	61ba      	str	r2, [r7, #24]
 80050bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6979      	ldr	r1, [r7, #20]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	613b      	str	r3, [r7, #16]
   return(result);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050dc:	bf00      	nop
 80050de:	3754      	adds	r7, #84	; 0x54
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7fb f823 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b21      	cmp	r3, #33	; 0x21
 8005120:	d13e      	bne.n	80051a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d114      	bne.n	8005156 <UART_Transmit_IT+0x48>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d110      	bne.n	8005156 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	881b      	ldrh	r3, [r3, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005148:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]
 8005154:	e008      	b.n	8005168 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6211      	str	r1, [r2, #32]
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29b      	uxth	r3, r3
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4619      	mov	r1, r3
 8005176:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10f      	bne.n	800519c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68da      	ldr	r2, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800518a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800519c:	2300      	movs	r3, #0
 800519e:	e000      	b.n	80051a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
  }
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bc80      	pop	{r7}
 80051aa:	4770      	bx	lr

080051ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fcd5 	bl	8004b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	; 0x30
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b22      	cmp	r3, #34	; 0x22
 80051ee:	f040 80ae 	bne.w	800534e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fa:	d117      	bne.n	800522c <UART_Receive_IT+0x50>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	b29b      	uxth	r3, r3
 8005216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521a:	b29a      	uxth	r2, r3
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	629a      	str	r2, [r3, #40]	; 0x28
 800522a:	e026      	b.n	800527a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	d007      	beq.n	8005250 <UART_Receive_IT+0x74>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <UART_Receive_IT+0x82>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e008      	b.n	8005270 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	b2da      	uxtb	r2, r3
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800528a:	2b00      	cmp	r3, #0
 800528c:	d15d      	bne.n	800534a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0220 	bic.w	r2, r2, #32
 800529c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695a      	ldr	r2, [r3, #20]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d135      	bne.n	8005340 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f023 0310 	bic.w	r3, r3, #16
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	330c      	adds	r3, #12
 80052f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052fa:	623a      	str	r2, [r7, #32]
 80052fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	69f9      	ldr	r1, [r7, #28]
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	61bb      	str	r3, [r7, #24]
   return(result);
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b10      	cmp	r3, #16
 800531a:	d10a      	bne.n	8005332 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005336:	4619      	mov	r1, r3
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7fa ff9b 	bl	8000274 <HAL_UARTEx_RxEventCallback>
 800533e:	e002      	b.n	8005346 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fc24 	bl	8004b8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e002      	b.n	8005350 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3730      	adds	r7, #48	; 0x30
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005392:	f023 030c 	bic.w	r3, r3, #12
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	430b      	orrs	r3, r1
 800539e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a2c      	ldr	r2, [pc, #176]	; (800546c <UART_SetConfig+0x114>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d103      	bne.n	80053c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053c0:	f7fe fb66 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 80053c4:	60f8      	str	r0, [r7, #12]
 80053c6:	e002      	b.n	80053ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fb4e 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 80053cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009a      	lsls	r2, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <UART_SetConfig+0x118>)
 80053e6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	0119      	lsls	r1, r3, #4
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	009a      	lsls	r2, r3, #2
 80053f8:	441a      	add	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	fbb2 f2f3 	udiv	r2, r2, r3
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <UART_SetConfig+0x118>)
 8005406:	fba3 0302 	umull	r0, r3, r3, r2
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2064      	movs	r0, #100	; 0x64
 800540e:	fb00 f303 	mul.w	r3, r0, r3
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	3332      	adds	r3, #50	; 0x32
 8005418:	4a15      	ldr	r2, [pc, #84]	; (8005470 <UART_SetConfig+0x118>)
 800541a:	fba2 2303 	umull	r2, r3, r2, r3
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005424:	4419      	add	r1, r3
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009a      	lsls	r2, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	fbb2 f2f3 	udiv	r2, r2, r3
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <UART_SetConfig+0x118>)
 800543e:	fba3 0302 	umull	r0, r3, r3, r2
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2064      	movs	r0, #100	; 0x64
 8005446:	fb00 f303 	mul.w	r3, r0, r3
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	3332      	adds	r3, #50	; 0x32
 8005450:	4a07      	ldr	r2, [pc, #28]	; (8005470 <UART_SetConfig+0x118>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	440a      	add	r2, r1
 8005462:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40013800 	.word	0x40013800
 8005470:	51eb851f 	.word	0x51eb851f

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	; (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000044 	.word	0x20000044

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	2600      	movs	r6, #0
 8005484:	4d0c      	ldr	r5, [pc, #48]	; (80054b8 <__libc_init_array+0x38>)
 8005486:	4c0d      	ldr	r4, [pc, #52]	; (80054bc <__libc_init_array+0x3c>)
 8005488:	1b64      	subs	r4, r4, r5
 800548a:	10a4      	asrs	r4, r4, #2
 800548c:	42a6      	cmp	r6, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	f000 fcb0 	bl	8005df4 <_init>
 8005494:	2600      	movs	r6, #0
 8005496:	4d0a      	ldr	r5, [pc, #40]	; (80054c0 <__libc_init_array+0x40>)
 8005498:	4c0a      	ldr	r4, [pc, #40]	; (80054c4 <__libc_init_array+0x44>)
 800549a:	1b64      	subs	r4, r4, r5
 800549c:	10a4      	asrs	r4, r4, #2
 800549e:	42a6      	cmp	r6, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a8:	4798      	blx	r3
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b2:	4798      	blx	r3
 80054b4:	3601      	adds	r6, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	08008728 	.word	0x08008728
 80054bc:	08008728 	.word	0x08008728
 80054c0:	08008728 	.word	0x08008728
 80054c4:	0800872c 	.word	0x0800872c

080054c8 <memcpy>:
 80054c8:	440a      	add	r2, r1
 80054ca:	4291      	cmp	r1, r2
 80054cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80054d0:	d100      	bne.n	80054d4 <memcpy+0xc>
 80054d2:	4770      	bx	lr
 80054d4:	b510      	push	{r4, lr}
 80054d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054da:	4291      	cmp	r1, r2
 80054dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054e0:	d1f9      	bne.n	80054d6 <memcpy+0xe>
 80054e2:	bd10      	pop	{r4, pc}

080054e4 <memmove>:
 80054e4:	4288      	cmp	r0, r1
 80054e6:	b510      	push	{r4, lr}
 80054e8:	eb01 0402 	add.w	r4, r1, r2
 80054ec:	d902      	bls.n	80054f4 <memmove+0x10>
 80054ee:	4284      	cmp	r4, r0
 80054f0:	4623      	mov	r3, r4
 80054f2:	d807      	bhi.n	8005504 <memmove+0x20>
 80054f4:	1e43      	subs	r3, r0, #1
 80054f6:	42a1      	cmp	r1, r4
 80054f8:	d008      	beq.n	800550c <memmove+0x28>
 80054fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005502:	e7f8      	b.n	80054f6 <memmove+0x12>
 8005504:	4601      	mov	r1, r0
 8005506:	4402      	add	r2, r0
 8005508:	428a      	cmp	r2, r1
 800550a:	d100      	bne.n	800550e <memmove+0x2a>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005516:	e7f7      	b.n	8005508 <memmove+0x24>

08005518 <memset>:
 8005518:	4603      	mov	r3, r0
 800551a:	4402      	add	r2, r0
 800551c:	4293      	cmp	r3, r2
 800551e:	d100      	bne.n	8005522 <memset+0xa>
 8005520:	4770      	bx	lr
 8005522:	f803 1b01 	strb.w	r1, [r3], #1
 8005526:	e7f9      	b.n	800551c <memset+0x4>

08005528 <sniprintf>:
 8005528:	b40c      	push	{r2, r3}
 800552a:	b530      	push	{r4, r5, lr}
 800552c:	4b17      	ldr	r3, [pc, #92]	; (800558c <sniprintf+0x64>)
 800552e:	1e0c      	subs	r4, r1, #0
 8005530:	681d      	ldr	r5, [r3, #0]
 8005532:	b09d      	sub	sp, #116	; 0x74
 8005534:	da08      	bge.n	8005548 <sniprintf+0x20>
 8005536:	238b      	movs	r3, #139	; 0x8b
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	b01d      	add	sp, #116	; 0x74
 8005540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005544:	b002      	add	sp, #8
 8005546:	4770      	bx	lr
 8005548:	f44f 7302 	mov.w	r3, #520	; 0x208
 800554c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005550:	bf0c      	ite	eq
 8005552:	4623      	moveq	r3, r4
 8005554:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	9307      	str	r3, [sp, #28]
 800555c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005560:	9002      	str	r0, [sp, #8]
 8005562:	9006      	str	r0, [sp, #24]
 8005564:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005568:	4628      	mov	r0, r5
 800556a:	ab21      	add	r3, sp, #132	; 0x84
 800556c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800556e:	a902      	add	r1, sp, #8
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	f000 f869 	bl	8005648 <_svfiprintf_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	bfbc      	itt	lt
 800557a:	238b      	movlt	r3, #139	; 0x8b
 800557c:	602b      	strlt	r3, [r5, #0]
 800557e:	2c00      	cmp	r4, #0
 8005580:	d0dd      	beq.n	800553e <sniprintf+0x16>
 8005582:	2200      	movs	r2, #0
 8005584:	9b02      	ldr	r3, [sp, #8]
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e7d9      	b.n	800553e <sniprintf+0x16>
 800558a:	bf00      	nop
 800558c:	20000044 	.word	0x20000044

08005590 <__ssputs_r>:
 8005590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005594:	688e      	ldr	r6, [r1, #8]
 8005596:	4682      	mov	sl, r0
 8005598:	429e      	cmp	r6, r3
 800559a:	460c      	mov	r4, r1
 800559c:	4690      	mov	r8, r2
 800559e:	461f      	mov	r7, r3
 80055a0:	d838      	bhi.n	8005614 <__ssputs_r+0x84>
 80055a2:	898a      	ldrh	r2, [r1, #12]
 80055a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055a8:	d032      	beq.n	8005610 <__ssputs_r+0x80>
 80055aa:	6825      	ldr	r5, [r4, #0]
 80055ac:	6909      	ldr	r1, [r1, #16]
 80055ae:	3301      	adds	r3, #1
 80055b0:	eba5 0901 	sub.w	r9, r5, r1
 80055b4:	6965      	ldr	r5, [r4, #20]
 80055b6:	444b      	add	r3, r9
 80055b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055c0:	106d      	asrs	r5, r5, #1
 80055c2:	429d      	cmp	r5, r3
 80055c4:	bf38      	it	cc
 80055c6:	461d      	movcc	r5, r3
 80055c8:	0553      	lsls	r3, r2, #21
 80055ca:	d531      	bpl.n	8005630 <__ssputs_r+0xa0>
 80055cc:	4629      	mov	r1, r5
 80055ce:	f000 fb47 	bl	8005c60 <_malloc_r>
 80055d2:	4606      	mov	r6, r0
 80055d4:	b950      	cbnz	r0, 80055ec <__ssputs_r+0x5c>
 80055d6:	230c      	movs	r3, #12
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	f8ca 3000 	str.w	r3, [sl]
 80055e0:	89a3      	ldrh	r3, [r4, #12]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	464a      	mov	r2, r9
 80055ee:	6921      	ldr	r1, [r4, #16]
 80055f0:	f7ff ff6a 	bl	80054c8 <memcpy>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	6126      	str	r6, [r4, #16]
 8005602:	444e      	add	r6, r9
 8005604:	6026      	str	r6, [r4, #0]
 8005606:	463e      	mov	r6, r7
 8005608:	6165      	str	r5, [r4, #20]
 800560a:	eba5 0509 	sub.w	r5, r5, r9
 800560e:	60a5      	str	r5, [r4, #8]
 8005610:	42be      	cmp	r6, r7
 8005612:	d900      	bls.n	8005616 <__ssputs_r+0x86>
 8005614:	463e      	mov	r6, r7
 8005616:	4632      	mov	r2, r6
 8005618:	4641      	mov	r1, r8
 800561a:	6820      	ldr	r0, [r4, #0]
 800561c:	f7ff ff62 	bl	80054e4 <memmove>
 8005620:	68a3      	ldr	r3, [r4, #8]
 8005622:	2000      	movs	r0, #0
 8005624:	1b9b      	subs	r3, r3, r6
 8005626:	60a3      	str	r3, [r4, #8]
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	4433      	add	r3, r6
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	e7db      	b.n	80055e8 <__ssputs_r+0x58>
 8005630:	462a      	mov	r2, r5
 8005632:	f000 fb89 	bl	8005d48 <_realloc_r>
 8005636:	4606      	mov	r6, r0
 8005638:	2800      	cmp	r0, #0
 800563a:	d1e1      	bne.n	8005600 <__ssputs_r+0x70>
 800563c:	4650      	mov	r0, sl
 800563e:	6921      	ldr	r1, [r4, #16]
 8005640:	f000 faa6 	bl	8005b90 <_free_r>
 8005644:	e7c7      	b.n	80055d6 <__ssputs_r+0x46>
	...

08005648 <_svfiprintf_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4698      	mov	r8, r3
 800564e:	898b      	ldrh	r3, [r1, #12]
 8005650:	4607      	mov	r7, r0
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	460d      	mov	r5, r1
 8005656:	4614      	mov	r4, r2
 8005658:	b09d      	sub	sp, #116	; 0x74
 800565a:	d50e      	bpl.n	800567a <_svfiprintf_r+0x32>
 800565c:	690b      	ldr	r3, [r1, #16]
 800565e:	b963      	cbnz	r3, 800567a <_svfiprintf_r+0x32>
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	f000 fafd 	bl	8005c60 <_malloc_r>
 8005666:	6028      	str	r0, [r5, #0]
 8005668:	6128      	str	r0, [r5, #16]
 800566a:	b920      	cbnz	r0, 8005676 <_svfiprintf_r+0x2e>
 800566c:	230c      	movs	r3, #12
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	f04f 30ff 	mov.w	r0, #4294967295
 8005674:	e0d1      	b.n	800581a <_svfiprintf_r+0x1d2>
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	616b      	str	r3, [r5, #20]
 800567a:	2300      	movs	r3, #0
 800567c:	9309      	str	r3, [sp, #36]	; 0x24
 800567e:	2320      	movs	r3, #32
 8005680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005684:	2330      	movs	r3, #48	; 0x30
 8005686:	f04f 0901 	mov.w	r9, #1
 800568a:	f8cd 800c 	str.w	r8, [sp, #12]
 800568e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005834 <_svfiprintf_r+0x1ec>
 8005692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005696:	4623      	mov	r3, r4
 8005698:	469a      	mov	sl, r3
 800569a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800569e:	b10a      	cbz	r2, 80056a4 <_svfiprintf_r+0x5c>
 80056a0:	2a25      	cmp	r2, #37	; 0x25
 80056a2:	d1f9      	bne.n	8005698 <_svfiprintf_r+0x50>
 80056a4:	ebba 0b04 	subs.w	fp, sl, r4
 80056a8:	d00b      	beq.n	80056c2 <_svfiprintf_r+0x7a>
 80056aa:	465b      	mov	r3, fp
 80056ac:	4622      	mov	r2, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	4638      	mov	r0, r7
 80056b2:	f7ff ff6d 	bl	8005590 <__ssputs_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	f000 80aa 	beq.w	8005810 <_svfiprintf_r+0x1c8>
 80056bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056be:	445a      	add	r2, fp
 80056c0:	9209      	str	r2, [sp, #36]	; 0x24
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80a2 	beq.w	8005810 <_svfiprintf_r+0x1c8>
 80056cc:	2300      	movs	r3, #0
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056d6:	f10a 0a01 	add.w	sl, sl, #1
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	9307      	str	r3, [sp, #28]
 80056de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056e2:	931a      	str	r3, [sp, #104]	; 0x68
 80056e4:	4654      	mov	r4, sl
 80056e6:	2205      	movs	r2, #5
 80056e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056ec:	4851      	ldr	r0, [pc, #324]	; (8005834 <_svfiprintf_r+0x1ec>)
 80056ee:	f000 fa41 	bl	8005b74 <memchr>
 80056f2:	9a04      	ldr	r2, [sp, #16]
 80056f4:	b9d8      	cbnz	r0, 800572e <_svfiprintf_r+0xe6>
 80056f6:	06d0      	lsls	r0, r2, #27
 80056f8:	bf44      	itt	mi
 80056fa:	2320      	movmi	r3, #32
 80056fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005700:	0711      	lsls	r1, r2, #28
 8005702:	bf44      	itt	mi
 8005704:	232b      	movmi	r3, #43	; 0x2b
 8005706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b2a      	cmp	r3, #42	; 0x2a
 8005710:	d015      	beq.n	800573e <_svfiprintf_r+0xf6>
 8005712:	4654      	mov	r4, sl
 8005714:	2000      	movs	r0, #0
 8005716:	f04f 0c0a 	mov.w	ip, #10
 800571a:	9a07      	ldr	r2, [sp, #28]
 800571c:	4621      	mov	r1, r4
 800571e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005722:	3b30      	subs	r3, #48	; 0x30
 8005724:	2b09      	cmp	r3, #9
 8005726:	d94e      	bls.n	80057c6 <_svfiprintf_r+0x17e>
 8005728:	b1b0      	cbz	r0, 8005758 <_svfiprintf_r+0x110>
 800572a:	9207      	str	r2, [sp, #28]
 800572c:	e014      	b.n	8005758 <_svfiprintf_r+0x110>
 800572e:	eba0 0308 	sub.w	r3, r0, r8
 8005732:	fa09 f303 	lsl.w	r3, r9, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	46a2      	mov	sl, r4
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	e7d2      	b.n	80056e4 <_svfiprintf_r+0x9c>
 800573e:	9b03      	ldr	r3, [sp, #12]
 8005740:	1d19      	adds	r1, r3, #4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	9103      	str	r1, [sp, #12]
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfbb      	ittet	lt
 800574a:	425b      	neglt	r3, r3
 800574c:	f042 0202 	orrlt.w	r2, r2, #2
 8005750:	9307      	strge	r3, [sp, #28]
 8005752:	9307      	strlt	r3, [sp, #28]
 8005754:	bfb8      	it	lt
 8005756:	9204      	strlt	r2, [sp, #16]
 8005758:	7823      	ldrb	r3, [r4, #0]
 800575a:	2b2e      	cmp	r3, #46	; 0x2e
 800575c:	d10c      	bne.n	8005778 <_svfiprintf_r+0x130>
 800575e:	7863      	ldrb	r3, [r4, #1]
 8005760:	2b2a      	cmp	r3, #42	; 0x2a
 8005762:	d135      	bne.n	80057d0 <_svfiprintf_r+0x188>
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	3402      	adds	r4, #2
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	9203      	str	r2, [sp, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	bfb8      	it	lt
 8005772:	f04f 33ff 	movlt.w	r3, #4294967295
 8005776:	9305      	str	r3, [sp, #20]
 8005778:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005838 <_svfiprintf_r+0x1f0>
 800577c:	2203      	movs	r2, #3
 800577e:	4650      	mov	r0, sl
 8005780:	7821      	ldrb	r1, [r4, #0]
 8005782:	f000 f9f7 	bl	8005b74 <memchr>
 8005786:	b140      	cbz	r0, 800579a <_svfiprintf_r+0x152>
 8005788:	2340      	movs	r3, #64	; 0x40
 800578a:	eba0 000a 	sub.w	r0, r0, sl
 800578e:	fa03 f000 	lsl.w	r0, r3, r0
 8005792:	9b04      	ldr	r3, [sp, #16]
 8005794:	3401      	adds	r4, #1
 8005796:	4303      	orrs	r3, r0
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800579e:	2206      	movs	r2, #6
 80057a0:	4826      	ldr	r0, [pc, #152]	; (800583c <_svfiprintf_r+0x1f4>)
 80057a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057a6:	f000 f9e5 	bl	8005b74 <memchr>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d038      	beq.n	8005820 <_svfiprintf_r+0x1d8>
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <_svfiprintf_r+0x1f8>)
 80057b0:	bb1b      	cbnz	r3, 80057fa <_svfiprintf_r+0x1b2>
 80057b2:	9b03      	ldr	r3, [sp, #12]
 80057b4:	3307      	adds	r3, #7
 80057b6:	f023 0307 	bic.w	r3, r3, #7
 80057ba:	3308      	adds	r3, #8
 80057bc:	9303      	str	r3, [sp, #12]
 80057be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c0:	4433      	add	r3, r6
 80057c2:	9309      	str	r3, [sp, #36]	; 0x24
 80057c4:	e767      	b.n	8005696 <_svfiprintf_r+0x4e>
 80057c6:	460c      	mov	r4, r1
 80057c8:	2001      	movs	r0, #1
 80057ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ce:	e7a5      	b.n	800571c <_svfiprintf_r+0xd4>
 80057d0:	2300      	movs	r3, #0
 80057d2:	f04f 0c0a 	mov.w	ip, #10
 80057d6:	4619      	mov	r1, r3
 80057d8:	3401      	adds	r4, #1
 80057da:	9305      	str	r3, [sp, #20]
 80057dc:	4620      	mov	r0, r4
 80057de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057e2:	3a30      	subs	r2, #48	; 0x30
 80057e4:	2a09      	cmp	r2, #9
 80057e6:	d903      	bls.n	80057f0 <_svfiprintf_r+0x1a8>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0c5      	beq.n	8005778 <_svfiprintf_r+0x130>
 80057ec:	9105      	str	r1, [sp, #20]
 80057ee:	e7c3      	b.n	8005778 <_svfiprintf_r+0x130>
 80057f0:	4604      	mov	r4, r0
 80057f2:	2301      	movs	r3, #1
 80057f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057f8:	e7f0      	b.n	80057dc <_svfiprintf_r+0x194>
 80057fa:	ab03      	add	r3, sp, #12
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	462a      	mov	r2, r5
 8005800:	4638      	mov	r0, r7
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <_svfiprintf_r+0x1fc>)
 8005804:	a904      	add	r1, sp, #16
 8005806:	f3af 8000 	nop.w
 800580a:	1c42      	adds	r2, r0, #1
 800580c:	4606      	mov	r6, r0
 800580e:	d1d6      	bne.n	80057be <_svfiprintf_r+0x176>
 8005810:	89ab      	ldrh	r3, [r5, #12]
 8005812:	065b      	lsls	r3, r3, #25
 8005814:	f53f af2c 	bmi.w	8005670 <_svfiprintf_r+0x28>
 8005818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800581a:	b01d      	add	sp, #116	; 0x74
 800581c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005820:	ab03      	add	r3, sp, #12
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	462a      	mov	r2, r5
 8005826:	4638      	mov	r0, r7
 8005828:	4b06      	ldr	r3, [pc, #24]	; (8005844 <_svfiprintf_r+0x1fc>)
 800582a:	a904      	add	r1, sp, #16
 800582c:	f000 f87c 	bl	8005928 <_printf_i>
 8005830:	e7eb      	b.n	800580a <_svfiprintf_r+0x1c2>
 8005832:	bf00      	nop
 8005834:	080086f2 	.word	0x080086f2
 8005838:	080086f8 	.word	0x080086f8
 800583c:	080086fc 	.word	0x080086fc
 8005840:	00000000 	.word	0x00000000
 8005844:	08005591 	.word	0x08005591

08005848 <_printf_common>:
 8005848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800584c:	4616      	mov	r6, r2
 800584e:	4699      	mov	r9, r3
 8005850:	688a      	ldr	r2, [r1, #8]
 8005852:	690b      	ldr	r3, [r1, #16]
 8005854:	4607      	mov	r7, r0
 8005856:	4293      	cmp	r3, r2
 8005858:	bfb8      	it	lt
 800585a:	4613      	movlt	r3, r2
 800585c:	6033      	str	r3, [r6, #0]
 800585e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005862:	460c      	mov	r4, r1
 8005864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005868:	b10a      	cbz	r2, 800586e <_printf_common+0x26>
 800586a:	3301      	adds	r3, #1
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	0699      	lsls	r1, r3, #26
 8005872:	bf42      	ittt	mi
 8005874:	6833      	ldrmi	r3, [r6, #0]
 8005876:	3302      	addmi	r3, #2
 8005878:	6033      	strmi	r3, [r6, #0]
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	f015 0506 	ands.w	r5, r5, #6
 8005880:	d106      	bne.n	8005890 <_printf_common+0x48>
 8005882:	f104 0a19 	add.w	sl, r4, #25
 8005886:	68e3      	ldr	r3, [r4, #12]
 8005888:	6832      	ldr	r2, [r6, #0]
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	42ab      	cmp	r3, r5
 800588e:	dc28      	bgt.n	80058e2 <_printf_common+0x9a>
 8005890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005894:	1e13      	subs	r3, r2, #0
 8005896:	6822      	ldr	r2, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	2301      	movne	r3, #1
 800589c:	0692      	lsls	r2, r2, #26
 800589e:	d42d      	bmi.n	80058fc <_printf_common+0xb4>
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058a8:	47c0      	blx	r8
 80058aa:	3001      	adds	r0, #1
 80058ac:	d020      	beq.n	80058f0 <_printf_common+0xa8>
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	68e5      	ldr	r5, [r4, #12]
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	bf18      	it	ne
 80058ba:	2500      	movne	r5, #0
 80058bc:	6832      	ldr	r2, [r6, #0]
 80058be:	f04f 0600 	mov.w	r6, #0
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	bf08      	it	eq
 80058c6:	1aad      	subeq	r5, r5, r2
 80058c8:	6922      	ldr	r2, [r4, #16]
 80058ca:	bf08      	it	eq
 80058cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058d0:	4293      	cmp	r3, r2
 80058d2:	bfc4      	itt	gt
 80058d4:	1a9b      	subgt	r3, r3, r2
 80058d6:	18ed      	addgt	r5, r5, r3
 80058d8:	341a      	adds	r4, #26
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d11a      	bne.n	8005914 <_printf_common+0xcc>
 80058de:	2000      	movs	r0, #0
 80058e0:	e008      	b.n	80058f4 <_printf_common+0xac>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4649      	mov	r1, r9
 80058e8:	4638      	mov	r0, r7
 80058ea:	47c0      	blx	r8
 80058ec:	3001      	adds	r0, #1
 80058ee:	d103      	bne.n	80058f8 <_printf_common+0xb0>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7c4      	b.n	8005886 <_printf_common+0x3e>
 80058fc:	2030      	movs	r0, #48	; 0x30
 80058fe:	18e1      	adds	r1, r4, r3
 8005900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800590a:	4422      	add	r2, r4
 800590c:	3302      	adds	r3, #2
 800590e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005912:	e7c5      	b.n	80058a0 <_printf_common+0x58>
 8005914:	2301      	movs	r3, #1
 8005916:	4622      	mov	r2, r4
 8005918:	4649      	mov	r1, r9
 800591a:	4638      	mov	r0, r7
 800591c:	47c0      	blx	r8
 800591e:	3001      	adds	r0, #1
 8005920:	d0e6      	beq.n	80058f0 <_printf_common+0xa8>
 8005922:	3601      	adds	r6, #1
 8005924:	e7d9      	b.n	80058da <_printf_common+0x92>
	...

08005928 <_printf_i>:
 8005928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	7e0f      	ldrb	r7, [r1, #24]
 800592e:	4691      	mov	r9, r2
 8005930:	2f78      	cmp	r7, #120	; 0x78
 8005932:	4680      	mov	r8, r0
 8005934:	460c      	mov	r4, r1
 8005936:	469a      	mov	sl, r3
 8005938:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800593a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800593e:	d807      	bhi.n	8005950 <_printf_i+0x28>
 8005940:	2f62      	cmp	r7, #98	; 0x62
 8005942:	d80a      	bhi.n	800595a <_printf_i+0x32>
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80d9 	beq.w	8005afc <_printf_i+0x1d4>
 800594a:	2f58      	cmp	r7, #88	; 0x58
 800594c:	f000 80a4 	beq.w	8005a98 <_printf_i+0x170>
 8005950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005958:	e03a      	b.n	80059d0 <_printf_i+0xa8>
 800595a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800595e:	2b15      	cmp	r3, #21
 8005960:	d8f6      	bhi.n	8005950 <_printf_i+0x28>
 8005962:	a101      	add	r1, pc, #4	; (adr r1, 8005968 <_printf_i+0x40>)
 8005964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005951 	.word	0x08005951
 8005974:	08005951 	.word	0x08005951
 8005978:	08005951 	.word	0x08005951
 800597c:	08005951 	.word	0x08005951
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005951 	.word	0x08005951
 8005988:	08005951 	.word	0x08005951
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005ae3 	.word	0x08005ae3
 8005998:	08005a05 	.word	0x08005a05
 800599c:	08005ac5 	.word	0x08005ac5
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005b05 	.word	0x08005b05
 80059ac:	08005951 	.word	0x08005951
 80059b0:	08005a05 	.word	0x08005a05
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005acd 	.word	0x08005acd
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	602a      	str	r2, [r5, #0]
 80059c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059d0:	2301      	movs	r3, #1
 80059d2:	e0a4      	b.n	8005b1e <_printf_i+0x1f6>
 80059d4:	6820      	ldr	r0, [r4, #0]
 80059d6:	6829      	ldr	r1, [r5, #0]
 80059d8:	0606      	lsls	r6, r0, #24
 80059da:	f101 0304 	add.w	r3, r1, #4
 80059de:	d50a      	bpl.n	80059f6 <_printf_i+0xce>
 80059e0:	680e      	ldr	r6, [r1, #0]
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	2e00      	cmp	r6, #0
 80059e6:	da03      	bge.n	80059f0 <_printf_i+0xc8>
 80059e8:	232d      	movs	r3, #45	; 0x2d
 80059ea:	4276      	negs	r6, r6
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	230a      	movs	r3, #10
 80059f2:	485e      	ldr	r0, [pc, #376]	; (8005b6c <_printf_i+0x244>)
 80059f4:	e019      	b.n	8005a2a <_printf_i+0x102>
 80059f6:	680e      	ldr	r6, [r1, #0]
 80059f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059fc:	602b      	str	r3, [r5, #0]
 80059fe:	bf18      	it	ne
 8005a00:	b236      	sxthne	r6, r6
 8005a02:	e7ef      	b.n	80059e4 <_printf_i+0xbc>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	1d19      	adds	r1, r3, #4
 8005a0a:	6029      	str	r1, [r5, #0]
 8005a0c:	0601      	lsls	r1, r0, #24
 8005a0e:	d501      	bpl.n	8005a14 <_printf_i+0xec>
 8005a10:	681e      	ldr	r6, [r3, #0]
 8005a12:	e002      	b.n	8005a1a <_printf_i+0xf2>
 8005a14:	0646      	lsls	r6, r0, #25
 8005a16:	d5fb      	bpl.n	8005a10 <_printf_i+0xe8>
 8005a18:	881e      	ldrh	r6, [r3, #0]
 8005a1a:	2f6f      	cmp	r7, #111	; 0x6f
 8005a1c:	bf0c      	ite	eq
 8005a1e:	2308      	moveq	r3, #8
 8005a20:	230a      	movne	r3, #10
 8005a22:	4852      	ldr	r0, [pc, #328]	; (8005b6c <_printf_i+0x244>)
 8005a24:	2100      	movs	r1, #0
 8005a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a2a:	6865      	ldr	r5, [r4, #4]
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	bfa8      	it	ge
 8005a30:	6821      	ldrge	r1, [r4, #0]
 8005a32:	60a5      	str	r5, [r4, #8]
 8005a34:	bfa4      	itt	ge
 8005a36:	f021 0104 	bicge.w	r1, r1, #4
 8005a3a:	6021      	strge	r1, [r4, #0]
 8005a3c:	b90e      	cbnz	r6, 8005a42 <_printf_i+0x11a>
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	d04d      	beq.n	8005ade <_printf_i+0x1b6>
 8005a42:	4615      	mov	r5, r2
 8005a44:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a48:	fb03 6711 	mls	r7, r3, r1, r6
 8005a4c:	5dc7      	ldrb	r7, [r0, r7]
 8005a4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a52:	4637      	mov	r7, r6
 8005a54:	42bb      	cmp	r3, r7
 8005a56:	460e      	mov	r6, r1
 8005a58:	d9f4      	bls.n	8005a44 <_printf_i+0x11c>
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d10b      	bne.n	8005a76 <_printf_i+0x14e>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	07de      	lsls	r6, r3, #31
 8005a62:	d508      	bpl.n	8005a76 <_printf_i+0x14e>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	6861      	ldr	r1, [r4, #4]
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	bfde      	ittt	le
 8005a6c:	2330      	movle	r3, #48	; 0x30
 8005a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a76:	1b52      	subs	r2, r2, r5
 8005a78:	6122      	str	r2, [r4, #16]
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f8cd a000 	str.w	sl, [sp]
 8005a84:	aa03      	add	r2, sp, #12
 8005a86:	f7ff fedf 	bl	8005848 <_printf_common>
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d14c      	bne.n	8005b28 <_printf_i+0x200>
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	b004      	add	sp, #16
 8005a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a98:	4834      	ldr	r0, [pc, #208]	; (8005b6c <_printf_i+0x244>)
 8005a9a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aa6:	6029      	str	r1, [r5, #0]
 8005aa8:	061d      	lsls	r5, r3, #24
 8005aaa:	d514      	bpl.n	8005ad6 <_printf_i+0x1ae>
 8005aac:	07df      	lsls	r7, r3, #31
 8005aae:	bf44      	itt	mi
 8005ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ab4:	6023      	strmi	r3, [r4, #0]
 8005ab6:	b91e      	cbnz	r6, 8005ac0 <_printf_i+0x198>
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	f023 0320 	bic.w	r3, r3, #32
 8005abe:	6023      	str	r3, [r4, #0]
 8005ac0:	2310      	movs	r3, #16
 8005ac2:	e7af      	b.n	8005a24 <_printf_i+0xfc>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	f043 0320 	orr.w	r3, r3, #32
 8005aca:	6023      	str	r3, [r4, #0]
 8005acc:	2378      	movs	r3, #120	; 0x78
 8005ace:	4828      	ldr	r0, [pc, #160]	; (8005b70 <_printf_i+0x248>)
 8005ad0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ad4:	e7e3      	b.n	8005a9e <_printf_i+0x176>
 8005ad6:	0659      	lsls	r1, r3, #25
 8005ad8:	bf48      	it	mi
 8005ada:	b2b6      	uxthmi	r6, r6
 8005adc:	e7e6      	b.n	8005aac <_printf_i+0x184>
 8005ade:	4615      	mov	r5, r2
 8005ae0:	e7bb      	b.n	8005a5a <_printf_i+0x132>
 8005ae2:	682b      	ldr	r3, [r5, #0]
 8005ae4:	6826      	ldr	r6, [r4, #0]
 8005ae6:	1d18      	adds	r0, r3, #4
 8005ae8:	6961      	ldr	r1, [r4, #20]
 8005aea:	6028      	str	r0, [r5, #0]
 8005aec:	0635      	lsls	r5, r6, #24
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	d501      	bpl.n	8005af6 <_printf_i+0x1ce>
 8005af2:	6019      	str	r1, [r3, #0]
 8005af4:	e002      	b.n	8005afc <_printf_i+0x1d4>
 8005af6:	0670      	lsls	r0, r6, #25
 8005af8:	d5fb      	bpl.n	8005af2 <_printf_i+0x1ca>
 8005afa:	8019      	strh	r1, [r3, #0]
 8005afc:	2300      	movs	r3, #0
 8005afe:	4615      	mov	r5, r2
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	e7ba      	b.n	8005a7a <_printf_i+0x152>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	2100      	movs	r1, #0
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	681d      	ldr	r5, [r3, #0]
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f82f 	bl	8005b74 <memchr>
 8005b16:	b108      	cbz	r0, 8005b1c <_printf_i+0x1f4>
 8005b18:	1b40      	subs	r0, r0, r5
 8005b1a:	6060      	str	r0, [r4, #4]
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	6123      	str	r3, [r4, #16]
 8005b20:	2300      	movs	r3, #0
 8005b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b26:	e7a8      	b.n	8005a7a <_printf_i+0x152>
 8005b28:	462a      	mov	r2, r5
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	47d0      	blx	sl
 8005b32:	3001      	adds	r0, #1
 8005b34:	d0ab      	beq.n	8005a8e <_printf_i+0x166>
 8005b36:	6823      	ldr	r3, [r4, #0]
 8005b38:	079b      	lsls	r3, r3, #30
 8005b3a:	d413      	bmi.n	8005b64 <_printf_i+0x23c>
 8005b3c:	68e0      	ldr	r0, [r4, #12]
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	4298      	cmp	r0, r3
 8005b42:	bfb8      	it	lt
 8005b44:	4618      	movlt	r0, r3
 8005b46:	e7a4      	b.n	8005a92 <_printf_i+0x16a>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4632      	mov	r2, r6
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	47d0      	blx	sl
 8005b52:	3001      	adds	r0, #1
 8005b54:	d09b      	beq.n	8005a8e <_printf_i+0x166>
 8005b56:	3501      	adds	r5, #1
 8005b58:	68e3      	ldr	r3, [r4, #12]
 8005b5a:	9903      	ldr	r1, [sp, #12]
 8005b5c:	1a5b      	subs	r3, r3, r1
 8005b5e:	42ab      	cmp	r3, r5
 8005b60:	dcf2      	bgt.n	8005b48 <_printf_i+0x220>
 8005b62:	e7eb      	b.n	8005b3c <_printf_i+0x214>
 8005b64:	2500      	movs	r5, #0
 8005b66:	f104 0619 	add.w	r6, r4, #25
 8005b6a:	e7f5      	b.n	8005b58 <_printf_i+0x230>
 8005b6c:	08008703 	.word	0x08008703
 8005b70:	08008714 	.word	0x08008714

08005b74 <memchr>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	b510      	push	{r4, lr}
 8005b78:	b2c9      	uxtb	r1, r1
 8005b7a:	4402      	add	r2, r0
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	d101      	bne.n	8005b86 <memchr+0x12>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e003      	b.n	8005b8e <memchr+0x1a>
 8005b86:	7804      	ldrb	r4, [r0, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	428c      	cmp	r4, r1
 8005b8c:	d1f6      	bne.n	8005b7c <memchr+0x8>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_free_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4605      	mov	r5, r0
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d040      	beq.n	8005c1a <_free_r+0x8a>
 8005b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9c:	1f0c      	subs	r4, r1, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfb8      	it	lt
 8005ba2:	18e4      	addlt	r4, r4, r3
 8005ba4:	f000 f910 	bl	8005dc8 <__malloc_lock>
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	; (8005c1c <_free_r+0x8c>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	b933      	cbnz	r3, 8005bbc <_free_r+0x2c>
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6014      	str	r4, [r2, #0]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb8:	f000 b90c 	b.w	8005dd4 <__malloc_unlock>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d908      	bls.n	8005bd2 <_free_r+0x42>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	1821      	adds	r1, r4, r0
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf01      	itttt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	1809      	addeq	r1, r1, r0
 8005bce:	6021      	streq	r1, [r4, #0]
 8005bd0:	e7ed      	b.n	8005bae <_free_r+0x1e>
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b10b      	cbz	r3, 8005bdc <_free_r+0x4c>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d9fa      	bls.n	8005bd2 <_free_r+0x42>
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	1850      	adds	r0, r2, r1
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d10b      	bne.n	8005bfc <_free_r+0x6c>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	4401      	add	r1, r0
 8005be8:	1850      	adds	r0, r2, r1
 8005bea:	4283      	cmp	r3, r0
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	d1e0      	bne.n	8005bb2 <_free_r+0x22>
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	4401      	add	r1, r0
 8005bf6:	6011      	str	r1, [r2, #0]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	e7da      	b.n	8005bb2 <_free_r+0x22>
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x74>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	e7d6      	b.n	8005bb2 <_free_r+0x22>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	6054      	str	r4, [r2, #4]
 8005c18:	e7cb      	b.n	8005bb2 <_free_r+0x22>
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20000774 	.word	0x20000774

08005c20 <sbrk_aligned>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4e0e      	ldr	r6, [pc, #56]	; (8005c5c <sbrk_aligned+0x3c>)
 8005c24:	460c      	mov	r4, r1
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b911      	cbnz	r1, 8005c32 <sbrk_aligned+0x12>
 8005c2c:	f000 f8bc 	bl	8005da8 <_sbrk_r>
 8005c30:	6030      	str	r0, [r6, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 f8b7 	bl	8005da8 <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d00a      	beq.n	8005c54 <sbrk_aligned+0x34>
 8005c3e:	1cc4      	adds	r4, r0, #3
 8005c40:	f024 0403 	bic.w	r4, r4, #3
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d007      	beq.n	8005c58 <sbrk_aligned+0x38>
 8005c48:	1a21      	subs	r1, r4, r0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f8ac 	bl	8005da8 <_sbrk_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	d101      	bne.n	8005c58 <sbrk_aligned+0x38>
 8005c54:	f04f 34ff 	mov.w	r4, #4294967295
 8005c58:	4620      	mov	r0, r4
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	20000778 	.word	0x20000778

08005c60 <_malloc_r>:
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	1ccd      	adds	r5, r1, #3
 8005c66:	f025 0503 	bic.w	r5, r5, #3
 8005c6a:	3508      	adds	r5, #8
 8005c6c:	2d0c      	cmp	r5, #12
 8005c6e:	bf38      	it	cc
 8005c70:	250c      	movcc	r5, #12
 8005c72:	2d00      	cmp	r5, #0
 8005c74:	4607      	mov	r7, r0
 8005c76:	db01      	blt.n	8005c7c <_malloc_r+0x1c>
 8005c78:	42a9      	cmp	r1, r5
 8005c7a:	d905      	bls.n	8005c88 <_malloc_r+0x28>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	2600      	movs	r6, #0
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	4630      	mov	r0, r6
 8005c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c88:	4e2e      	ldr	r6, [pc, #184]	; (8005d44 <_malloc_r+0xe4>)
 8005c8a:	f000 f89d 	bl	8005dc8 <__malloc_lock>
 8005c8e:	6833      	ldr	r3, [r6, #0]
 8005c90:	461c      	mov	r4, r3
 8005c92:	bb34      	cbnz	r4, 8005ce2 <_malloc_r+0x82>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4638      	mov	r0, r7
 8005c98:	f7ff ffc2 	bl	8005c20 <sbrk_aligned>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	d14d      	bne.n	8005d3e <_malloc_r+0xde>
 8005ca2:	6834      	ldr	r4, [r6, #0]
 8005ca4:	4626      	mov	r6, r4
 8005ca6:	2e00      	cmp	r6, #0
 8005ca8:	d140      	bne.n	8005d2c <_malloc_r+0xcc>
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	4631      	mov	r1, r6
 8005cae:	4638      	mov	r0, r7
 8005cb0:	eb04 0803 	add.w	r8, r4, r3
 8005cb4:	f000 f878 	bl	8005da8 <_sbrk_r>
 8005cb8:	4580      	cmp	r8, r0
 8005cba:	d13a      	bne.n	8005d32 <_malloc_r+0xd2>
 8005cbc:	6821      	ldr	r1, [r4, #0]
 8005cbe:	3503      	adds	r5, #3
 8005cc0:	1a6d      	subs	r5, r5, r1
 8005cc2:	f025 0503 	bic.w	r5, r5, #3
 8005cc6:	3508      	adds	r5, #8
 8005cc8:	2d0c      	cmp	r5, #12
 8005cca:	bf38      	it	cc
 8005ccc:	250c      	movcc	r5, #12
 8005cce:	4638      	mov	r0, r7
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	f7ff ffa5 	bl	8005c20 <sbrk_aligned>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d02b      	beq.n	8005d32 <_malloc_r+0xd2>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	442b      	add	r3, r5
 8005cde:	6023      	str	r3, [r4, #0]
 8005ce0:	e00e      	b.n	8005d00 <_malloc_r+0xa0>
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	1b52      	subs	r2, r2, r5
 8005ce6:	d41e      	bmi.n	8005d26 <_malloc_r+0xc6>
 8005ce8:	2a0b      	cmp	r2, #11
 8005cea:	d916      	bls.n	8005d1a <_malloc_r+0xba>
 8005cec:	1961      	adds	r1, r4, r5
 8005cee:	42a3      	cmp	r3, r4
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	bf18      	it	ne
 8005cf4:	6059      	strne	r1, [r3, #4]
 8005cf6:	6863      	ldr	r3, [r4, #4]
 8005cf8:	bf08      	it	eq
 8005cfa:	6031      	streq	r1, [r6, #0]
 8005cfc:	5162      	str	r2, [r4, r5]
 8005cfe:	604b      	str	r3, [r1, #4]
 8005d00:	4638      	mov	r0, r7
 8005d02:	f104 060b 	add.w	r6, r4, #11
 8005d06:	f000 f865 	bl	8005dd4 <__malloc_unlock>
 8005d0a:	f026 0607 	bic.w	r6, r6, #7
 8005d0e:	1d23      	adds	r3, r4, #4
 8005d10:	1af2      	subs	r2, r6, r3
 8005d12:	d0b6      	beq.n	8005c82 <_malloc_r+0x22>
 8005d14:	1b9b      	subs	r3, r3, r6
 8005d16:	50a3      	str	r3, [r4, r2]
 8005d18:	e7b3      	b.n	8005c82 <_malloc_r+0x22>
 8005d1a:	6862      	ldr	r2, [r4, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	bf0c      	ite	eq
 8005d20:	6032      	streq	r2, [r6, #0]
 8005d22:	605a      	strne	r2, [r3, #4]
 8005d24:	e7ec      	b.n	8005d00 <_malloc_r+0xa0>
 8005d26:	4623      	mov	r3, r4
 8005d28:	6864      	ldr	r4, [r4, #4]
 8005d2a:	e7b2      	b.n	8005c92 <_malloc_r+0x32>
 8005d2c:	4634      	mov	r4, r6
 8005d2e:	6876      	ldr	r6, [r6, #4]
 8005d30:	e7b9      	b.n	8005ca6 <_malloc_r+0x46>
 8005d32:	230c      	movs	r3, #12
 8005d34:	4638      	mov	r0, r7
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	f000 f84c 	bl	8005dd4 <__malloc_unlock>
 8005d3c:	e7a1      	b.n	8005c82 <_malloc_r+0x22>
 8005d3e:	6025      	str	r5, [r4, #0]
 8005d40:	e7de      	b.n	8005d00 <_malloc_r+0xa0>
 8005d42:	bf00      	nop
 8005d44:	20000774 	.word	0x20000774

08005d48 <_realloc_r>:
 8005d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4614      	mov	r4, r2
 8005d50:	460e      	mov	r6, r1
 8005d52:	b921      	cbnz	r1, 8005d5e <_realloc_r+0x16>
 8005d54:	4611      	mov	r1, r2
 8005d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d5a:	f7ff bf81 	b.w	8005c60 <_malloc_r>
 8005d5e:	b92a      	cbnz	r2, 8005d6c <_realloc_r+0x24>
 8005d60:	f7ff ff16 	bl	8005b90 <_free_r>
 8005d64:	4625      	mov	r5, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	f000 f838 	bl	8005de0 <_malloc_usable_size_r>
 8005d70:	4284      	cmp	r4, r0
 8005d72:	4607      	mov	r7, r0
 8005d74:	d802      	bhi.n	8005d7c <_realloc_r+0x34>
 8005d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d7a:	d812      	bhi.n	8005da2 <_realloc_r+0x5a>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7ff ff6e 	bl	8005c60 <_malloc_r>
 8005d84:	4605      	mov	r5, r0
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d0ed      	beq.n	8005d66 <_realloc_r+0x1e>
 8005d8a:	42bc      	cmp	r4, r7
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4631      	mov	r1, r6
 8005d90:	bf28      	it	cs
 8005d92:	463a      	movcs	r2, r7
 8005d94:	f7ff fb98 	bl	80054c8 <memcpy>
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f7ff fef8 	bl	8005b90 <_free_r>
 8005da0:	e7e1      	b.n	8005d66 <_realloc_r+0x1e>
 8005da2:	4635      	mov	r5, r6
 8005da4:	e7df      	b.n	8005d66 <_realloc_r+0x1e>
	...

08005da8 <_sbrk_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	2300      	movs	r3, #0
 8005dac:	4d05      	ldr	r5, [pc, #20]	; (8005dc4 <_sbrk_r+0x1c>)
 8005dae:	4604      	mov	r4, r0
 8005db0:	4608      	mov	r0, r1
 8005db2:	602b      	str	r3, [r5, #0]
 8005db4:	f7fb fe9c 	bl	8001af0 <_sbrk>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d102      	bne.n	8005dc2 <_sbrk_r+0x1a>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	b103      	cbz	r3, 8005dc2 <_sbrk_r+0x1a>
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}
 8005dc4:	2000077c 	.word	0x2000077c

08005dc8 <__malloc_lock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	; (8005dd0 <__malloc_lock+0x8>)
 8005dca:	f000 b811 	b.w	8005df0 <__retarget_lock_acquire_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000780 	.word	0x20000780

08005dd4 <__malloc_unlock>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__malloc_unlock+0x8>)
 8005dd6:	f000 b80c 	b.w	8005df2 <__retarget_lock_release_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000780 	.word	0x20000780

08005de0 <_malloc_usable_size_r>:
 8005de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de4:	1f18      	subs	r0, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfbc      	itt	lt
 8005dea:	580b      	ldrlt	r3, [r1, r0]
 8005dec:	18c0      	addlt	r0, r0, r3
 8005dee:	4770      	bx	lr

08005df0 <__retarget_lock_acquire_recursive>:
 8005df0:	4770      	bx	lr

08005df2 <__retarget_lock_release_recursive>:
 8005df2:	4770      	bx	lr

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
