
motor_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004118  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a14c  0800a14c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a14c  0800a14c  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a14c  0800a14c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a14c  0800a14c  0001a14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a150  0800a150  0001a150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800a154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200000b8  0800a20c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  0800a20c  00020794  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d5f  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025db  00000000  00000000  00031e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00034420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000354c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019332  00000000  00000000  00036488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012899  00000000  00000000  0004f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009043d  00000000  00000000  00062053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a8c  00000000  00000000  000f24e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800601c 	.word	0x0800601c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	0800601c 	.word	0x0800601c

0800014c <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 8000154:	6878      	ldr	r0, [r7, #4]
 8000156:	f004 fe40 	bl	8004dda <HAL_UART_GetError>
 800015a:	61f8      	str	r0, [r7, #28]
	switch (er) {
 800015c:	69fb      	ldr	r3, [r7, #28]
 800015e:	3b01      	subs	r3, #1
 8000160:	2b0f      	cmp	r3, #15
 8000162:	d863      	bhi.n	800022c <HAL_UART_ErrorCallback+0xe0>
 8000164:	a201      	add	r2, pc, #4	; (adr r2, 800016c <HAL_UART_ErrorCallback+0x20>)
 8000166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800016a:	bf00      	nop
 800016c:	080001ad 	.word	0x080001ad
 8000170:	080001cb 	.word	0x080001cb
 8000174:	0800022d 	.word	0x0800022d
 8000178:	080001e9 	.word	0x080001e9
 800017c:	0800022d 	.word	0x0800022d
 8000180:	0800022d 	.word	0x0800022d
 8000184:	0800022d 	.word	0x0800022d
 8000188:	08000207 	.word	0x08000207
 800018c:	0800022d 	.word	0x0800022d
 8000190:	0800022d 	.word	0x0800022d
 8000194:	0800022d 	.word	0x0800022d
 8000198:	0800022d 	.word	0x0800022d
 800019c:	0800022d 	.word	0x0800022d
 80001a0:	0800022d 	.word	0x0800022d
 80001a4:	0800022d 	.word	0x0800022d
 80001a8:	08000225 	.word	0x08000225
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 80001ac:	2300      	movs	r3, #0
 80001ae:	61bb      	str	r3, [r7, #24]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	61bb      	str	r3, [r7, #24]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	685b      	ldr	r3, [r3, #4]
 80001be:	61bb      	str	r3, [r7, #24]
 80001c0:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2200      	movs	r2, #0
 80001c6:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80001c8:	e031      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 80001ca:	2300      	movs	r3, #0
 80001cc:	617b      	str	r3, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 80001e6:	e022      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 80001e8:	2300      	movs	r3, #0
 80001ea:	613b      	str	r3, [r7, #16]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	685b      	ldr	r3, [r3, #4]
 80001fa:	613b      	str	r3, [r7, #16]
 80001fc:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000204:	e013      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8000206:	2300      	movs	r3, #0
 8000208:	60fb      	str	r3, [r7, #12]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2200      	movs	r2, #0
 8000220:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000222:	e004      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2200      	movs	r2, #0
 8000228:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 800022a:	e000      	b.n	800022e <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 800022c:	bf00      	nop
		}
	if (huart->Instance == USART1) {
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a0b      	ldr	r2, [pc, #44]	; (8000260 <HAL_UART_ErrorCallback+0x114>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d10f      	bne.n	8000258 <HAL_UART_ErrorCallback+0x10c>
		new_bms_data = 1;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_UART_ErrorCallback+0x118>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 800023e:	2264      	movs	r2, #100	; 0x64
 8000240:	4909      	ldr	r1, [pc, #36]	; (8000268 <HAL_UART_ErrorCallback+0x11c>)
 8000242:	480a      	ldr	r0, [pc, #40]	; (800026c <HAL_UART_ErrorCallback+0x120>)
 8000244:	f004 fabf 	bl	80047c6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <HAL_UART_ErrorCallback+0x124>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <HAL_UART_ErrorCallback+0x124>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f022 0204 	bic.w	r2, r2, #4
 8000256:	601a      	str	r2, [r3, #0]
	}
}
 8000258:	bf00      	nop
 800025a:	3720      	adds	r7, #32
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40013800 	.word	0x40013800
 8000264:	20000294 	.word	0x20000294
 8000268:	20000230 	.word	0x20000230
 800026c:	2000019c 	.word	0x2000019c
 8000270:	200001e4 	.word	0x200001e4

08000274 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	460b      	mov	r3, r1
 800027e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <HAL_UARTEx_RxEventCallback+0x40>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d10f      	bne.n	80002aa <HAL_UARTEx_RxEventCallback+0x36>
		new_bms_data = 1;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <HAL_UARTEx_RxEventCallback+0x44>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000290:	2264      	movs	r2, #100	; 0x64
 8000292:	490a      	ldr	r1, [pc, #40]	; (80002bc <HAL_UARTEx_RxEventCallback+0x48>)
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000296:	f004 fa96 	bl	80047c6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800029a:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <HAL_UARTEx_RxEventCallback+0x50>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <HAL_UARTEx_RxEventCallback+0x50>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f022 0204 	bic.w	r2, r2, #4
 80002a8:	601a      	str	r2, [r3, #0]
	}
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	40013800 	.word	0x40013800
 80002b8:	20000294 	.word	0x20000294
 80002bc:	20000230 	.word	0x20000230
 80002c0:	2000019c 	.word	0x2000019c
 80002c4:	200001e4 	.word	0x200001e4

080002c8 <CanMsgSend>:

	return 1;
}


uint8_t CanMsgSend(CanDataSendTypeDef *canDataSend) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]

	TxHeader.StdId = canDataSend->canId;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a1e      	ldr	r2, [pc, #120]	; (8000350 <CanMsgSend+0x88>)
 80002d6:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = canDataSend->canExtId;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <CanMsgSend+0x88>)
 80002de:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = canDataSend->canRTR;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <CanMsgSend+0x88>)
 80002e6:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <CanMsgSend+0x88>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <CanMsgSend+0x88>)
 80002f0:	2208      	movs	r2, #8
 80002f2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <CanMsgSend+0x88>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	751a      	strb	r2, [r3, #20]
	//globData.can_mutex = 0;
	for (int i = 0; i < sizeof(TxData); i++) {
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	e00c      	b.n	800031a <CanMsgSend+0x52>
		TxData[i] = canDataSend->canData[i];
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	4413      	add	r3, r2
 8000306:	330c      	adds	r3, #12
 8000308:	7819      	ldrb	r1, [r3, #0]
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <CanMsgSend+0x8c>)
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	4413      	add	r3, r2
 8000310:	460a      	mov	r2, r1
 8000312:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TxData); i++) {
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3301      	adds	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	2b07      	cmp	r3, #7
 800031e:	d9ef      	bls.n	8000300 <CanMsgSend+0x38>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8000320:	bf00      	nop
 8000322:	480d      	ldr	r0, [pc, #52]	; (8000358 <CanMsgSend+0x90>)
 8000324:	f002 fb2d 	bl	8002982 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f9      	beq.n	8000322 <CanMsgSend+0x5a>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <CanMsgSend+0x94>)
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <CanMsgSend+0x8c>)
 8000332:	4907      	ldr	r1, [pc, #28]	; (8000350 <CanMsgSend+0x88>)
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <CanMsgSend+0x90>)
 8000336:	f002 fa55 	bl	80027e4 <HAL_CAN_AddTxMessage>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <CanMsgSend+0x7c>
		//HAL_UART_Transmit(&huart, (uint8_t*) "no_trans\r\n", 10, 100);
		return 0;
 8000340:	2300      	movs	r3, #0
 8000342:	e000      	b.n	8000346 <CanMsgSend+0x7e>
	}
	return 1;
 8000344:	2301      	movs	r3, #1
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200002a8 	.word	0x200002a8
 8000354:	200002c0 	.word	0x200002c0
 8000358:	200000d4 	.word	0x200000d4
 800035c:	200002c8 	.word	0x200002c8

08000360 <Moving>:

void Moving() {
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

	CanDataSendTypeDef canDataSend;

	static int move_axis_en = 0;
	static int lift_axis_en = 0;
	if (start_stop) {
 8000366:	4b63      	ldr	r3, [pc, #396]	; (80004f4 <Moving+0x194>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	f000 808a 	beq.w	8000484 <Moving+0x124>
			canDataSend.canExtId = DRIVER_MOVE_ID + 0x06000000;
 8000370:	4b61      	ldr	r3, [pc, #388]	; (80004f8 <Moving+0x198>)
 8000372:	60bb      	str	r3, [r7, #8]
			canDataSend.canRTR = CAN_RTR_DATA;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
			if (!move_axis_en) {
 8000378:	4b60      	ldr	r3, [pc, #384]	; (80004fc <Moving+0x19c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d119      	bne.n	80003b4 <Moving+0x54>
				move_axis_en = 1;
 8000380:	4b5e      	ldr	r3, [pc, #376]	; (80004fc <Moving+0x19c>)
 8000382:	2201      	movs	r2, #1
 8000384:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8000386:	2323      	movs	r3, #35	; 0x23
 8000388:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 800038a:	230d      	movs	r3, #13
 800038c:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 800038e:	2320      	movs	r3, #32
 8000390:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x01;
 8000392:	2301      	movs	r3, #1
 8000394:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8000396:	2300      	movs	r3, #0
 8000398:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 800039a:	2300      	movs	r3, #0
 800039c:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 800039e:	2300      	movs	r3, #0
 80003a0:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80003a2:	2300      	movs	r3, #0
 80003a4:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff8d 	bl	80002c8 <CanMsgSend>
				HAL_Delay(10);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f001 ffec 	bl	800238c <HAL_Delay>
			}
			if (!lift_axis_en) {
 80003b4:	4b52      	ldr	r3, [pc, #328]	; (8000500 <Moving+0x1a0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d119      	bne.n	80003f0 <Moving+0x90>
				lift_axis_en = 1;
 80003bc:	4b50      	ldr	r3, [pc, #320]	; (8000500 <Moving+0x1a0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 80003c2:	2323      	movs	r3, #35	; 0x23
 80003c4:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 80003c6:	230d      	movs	r3, #13
 80003c8:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 80003ca:	2320      	movs	r3, #32
 80003cc:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x02;
 80003ce:	2302      	movs	r3, #2
 80003d0:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 80003d2:	2300      	movs	r3, #0
 80003d4:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 80003d6:	2300      	movs	r3, #0
 80003d8:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 80003da:	2300      	movs	r3, #0
 80003dc:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80003de:	2300      	movs	r3, #0
 80003e0:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff6f 	bl	80002c8 <CanMsgSend>
				HAL_Delay(10);
 80003ea:	200a      	movs	r0, #10
 80003ec:	f001 ffce 	bl	800238c <HAL_Delay>
			}
			static int32_t ch_velocity = 0;
			//if (motor1_speed) { //(l_current_move_comm == MOVE_FORW) {
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)"can_send\r\n", 10, 100);
			canDataSend.canData[0] = 0x23;
 80003f0:	2323      	movs	r3, #35	; 0x23
 80003f2:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80003f8:	2320      	movs	r3, #32
 80003fa:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 80003fc:	2301      	movs	r3, #1
 80003fe:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 8000400:	4b40      	ldr	r3, [pc, #256]	; (8000504 <Moving+0x1a4>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a40      	ldr	r2, [pc, #256]	; (8000508 <Moving+0x1a8>)
 8000406:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8000408:	4b3f      	ldr	r3, [pc, #252]	; (8000508 <Moving+0x1a8>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	161b      	asrs	r3, r3, #24
 800040e:	b2db      	uxtb	r3, r3
 8000410:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8000412:	4b3d      	ldr	r3, [pc, #244]	; (8000508 <Moving+0x1a8>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	141b      	asrs	r3, r3, #16
 8000418:	b2db      	uxtb	r3, r3
 800041a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 800041c:	4b3a      	ldr	r3, [pc, #232]	; (8000508 <Moving+0x1a8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	121b      	asrs	r3, r3, #8
 8000422:	b2db      	uxtb	r3, r3
 8000424:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8000426:	4b38      	ldr	r3, [pc, #224]	; (8000508 <Moving+0x1a8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b2db      	uxtb	r3, r3
 800042c:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff49 	bl	80002c8 <CanMsgSend>
			HAL_Delay(2);
 8000436:	2002      	movs	r0, #2
 8000438:	f001 ffa8 	bl	800238c <HAL_Delay>
			//}
			//else if (motor2_speed) {
			canDataSend.canData[0] = 0x23;
 800043c:	2323      	movs	r3, #35	; 0x23
 800043e:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8000440:	2300      	movs	r3, #0
 8000442:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8000444:	2320      	movs	r3, #32
 8000446:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8000448:	2302      	movs	r3, #2
 800044a:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 800044c:	4b2d      	ldr	r3, [pc, #180]	; (8000504 <Moving+0x1a4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <Moving+0x1a8>)
 8000452:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8000454:	4b2c      	ldr	r3, [pc, #176]	; (8000508 <Moving+0x1a8>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	161b      	asrs	r3, r3, #24
 800045a:	b2db      	uxtb	r3, r3
 800045c:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 800045e:	4b2a      	ldr	r3, [pc, #168]	; (8000508 <Moving+0x1a8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	141b      	asrs	r3, r3, #16
 8000464:	b2db      	uxtb	r3, r3
 8000466:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8000468:	4b27      	ldr	r3, [pc, #156]	; (8000508 <Moving+0x1a8>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	121b      	asrs	r3, r3, #8
 800046e:	b2db      	uxtb	r3, r3
 8000470:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <Moving+0x1a8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff23 	bl	80002c8 <CanMsgSend>
 8000482:	e030      	b.n	80004e6 <Moving+0x186>
			//}
		}
		else
		{
			canDataSend.canData[0] = 0x23;
 8000484:	2323      	movs	r3, #35	; 0x23
 8000486:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8000488:	2300      	movs	r3, #0
 800048a:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 800048c:	2320      	movs	r3, #32
 800048e:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8000490:	2301      	movs	r3, #1
 8000492:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8000494:	2300      	movs	r3, #0
 8000496:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 8000498:	2300      	movs	r3, #0
 800049a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 800049c:	2300      	movs	r3, #0
 800049e:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80004a0:	2300      	movs	r3, #0
 80004a2:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ff0e 	bl	80002c8 <CanMsgSend>
			HAL_Delay(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f001 ff6d 	bl	800238c <HAL_Delay>
			canDataSend.canData[0] = 0x23;
 80004b2:	2323      	movs	r3, #35	; 0x23
 80004b4:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80004ba:	2320      	movs	r3, #32
 80004bc:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 80004be:	2302      	movs	r3, #2
 80004c0:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 80004c6:	2300      	movs	r3, #0
 80004c8:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 80004ca:	2300      	movs	r3, #0
 80004cc:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80004ce:	2300      	movs	r3, #0
 80004d0:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fef7 	bl	80002c8 <CanMsgSend>
			move_axis_en = 0;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <Moving+0x19c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
			lift_axis_en = 0;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <Moving+0x1a0>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(5);
 80004e6:	2005      	movs	r0, #5
 80004e8:	f001 ff50 	bl	800238c <HAL_Delay>
}
 80004ec:	bf00      	nop
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200002a0 	.word	0x200002a0
 80004f8:	06000001 	.word	0x06000001
 80004fc:	20000350 	.word	0x20000350
 8000500:	20000354 	.word	0x20000354
 8000504:	200002a4 	.word	0x200002a4
 8000508:	20000358 	.word	0x20000358

0800050c <get_bms_data>:

void get_bms_data()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	if (!bms_detected) {
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <get_bms_data+0xbc>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d11b      	bne.n	8000550 <get_bms_data+0x44>
		RE_DE_ON;
 8000518:	2201      	movs	r2, #1
 800051a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051e:	482b      	ldr	r0, [pc, #172]	; (80005cc <get_bms_data+0xc0>)
 8000520:	f002 ffd3 	bl	80034ca <HAL_GPIO_WritePin>
 8000524:	2002      	movs	r0, #2
 8000526:	f001 ff31 	bl	800238c <HAL_Delay>
		//HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
		HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 800052a:	2364      	movs	r3, #100	; 0x64
 800052c:	2207      	movs	r2, #7
 800052e:	4928      	ldr	r1, [pc, #160]	; (80005d0 <get_bms_data+0xc4>)
 8000530:	4828      	ldr	r0, [pc, #160]	; (80005d4 <get_bms_data+0xc8>)
 8000532:	f004 f8c5 	bl	80046c0 <HAL_UART_Transmit>
		RE_DE_OFF;
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800053c:	4823      	ldr	r0, [pc, #140]	; (80005cc <get_bms_data+0xc0>)
 800053e:	f002 ffc4 	bl	80034ca <HAL_GPIO_WritePin>
 8000542:	2001      	movs	r0, #1
 8000544:	f001 ff22 	bl	800238c <HAL_Delay>
		bms_detected = 1;
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <get_bms_data+0xbc>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	e034      	b.n	80005ba <get_bms_data+0xae>
	}
	else {
		if (smart_bms)
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <get_bms_data+0xcc>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d018      	beq.n	800058a <get_bms_data+0x7e>
		{
			RE_DE_ON;
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	481b      	ldr	r0, [pc, #108]	; (80005cc <get_bms_data+0xc0>)
 8000560:	f002 ffb3 	bl	80034ca <HAL_GPIO_WritePin>
 8000564:	2002      	movs	r0, #2
 8000566:	f001 ff11 	bl	800238c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	220d      	movs	r2, #13
 800056e:	491b      	ldr	r1, [pc, #108]	; (80005dc <get_bms_data+0xd0>)
 8000570:	4818      	ldr	r0, [pc, #96]	; (80005d4 <get_bms_data+0xc8>)
 8000572:	f004 f8a5 	bl	80046c0 <HAL_UART_Transmit>
			RE_DE_OFF;
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <get_bms_data+0xc0>)
 800057e:	f002 ffa4 	bl	80034ca <HAL_GPIO_WritePin>
 8000582:	2001      	movs	r0, #1
 8000584:	f001 ff02 	bl	800238c <HAL_Delay>
 8000588:	e017      	b.n	80005ba <get_bms_data+0xae>
		}
		else
		{
			RE_DE_ON;
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <get_bms_data+0xc0>)
 8000592:	f002 ff9a 	bl	80034ca <HAL_GPIO_WritePin>
 8000596:	2002      	movs	r0, #2
 8000598:	f001 fef8 	bl	800238c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 800059c:	2364      	movs	r3, #100	; 0x64
 800059e:	2207      	movs	r2, #7
 80005a0:	490b      	ldr	r1, [pc, #44]	; (80005d0 <get_bms_data+0xc4>)
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <get_bms_data+0xc8>)
 80005a4:	f004 f88c 	bl	80046c0 <HAL_UART_Transmit>
			RE_DE_OFF;
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4807      	ldr	r0, [pc, #28]	; (80005cc <get_bms_data+0xc0>)
 80005b0:	f002 ff8b 	bl	80034ca <HAL_GPIO_WritePin>
 80005b4:	2001      	movs	r0, #1
 80005b6:	f001 fee9 	bl	800238c <HAL_Delay>
		}
	}
	bms_req_time = HAL_GetTick();
 80005ba:	f001 fedd 	bl	8002378 <HAL_GetTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <get_bms_data+0xd4>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000295 	.word	0x20000295
 80005cc:	40011000 	.word	0x40011000
 80005d0:	20000000 	.word	0x20000000
 80005d4:	2000019c 	.word	0x2000019c
 80005d8:	20000296 	.word	0x20000296
 80005dc:	20000010 	.word	0x20000010
 80005e0:	20000298 	.word	0x20000298

080005e4 <read_bms_uart>:
void read_bms_uart() {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	if (new_bms_data)
 80005e8:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <read_bms_uart+0xcc>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d00c      	beq.n	800060a <read_bms_uart+0x26>
	{
		new_bms_data = 0;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <read_bms_uart+0xcc>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
		//bms_err = 0;
		rcGetBattery();
 80005f6:	f000 f869 	bl	80006cc <rcGetBattery>
		bms_detected = 1;
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <read_bms_uart+0xd0>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	701a      	strb	r2, [r3, #0]
		bms_req_time = HAL_GetTick();
 8000600:	f001 feba 	bl	8002378 <HAL_GetTick>
 8000604:	4603      	mov	r3, r0
 8000606:	4a2c      	ldr	r2, [pc, #176]	; (80006b8 <read_bms_uart+0xd4>)
 8000608:	6013      	str	r3, [r2, #0]
	}
	if (bms_detected == 1 && batteryMsg.bms_type == BMS_NONE)
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <read_bms_uart+0xd0>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d131      	bne.n	8000676 <read_bms_uart+0x92>
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <read_bms_uart+0xd8>)
 8000614:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000618:	2b00      	cmp	r3, #0
 800061a:	d12c      	bne.n	8000676 <read_bms_uart+0x92>
	{
		if (HAL_GetTick() - bms_req_time > 1000) {
 800061c:	f001 feac 	bl	8002378 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <read_bms_uart+0xd4>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1ad3      	subs	r3, r2, r3
 8000628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800062c:	d93e      	bls.n	80006ac <read_bms_uart+0xc8>
			bms_req_time = HAL_GetTick();
 800062e:	f001 fea3 	bl	8002378 <HAL_GetTick>
 8000632:	4603      	mov	r3, r0
 8000634:	4a20      	ldr	r2, [pc, #128]	; (80006b8 <read_bms_uart+0xd4>)
 8000636:	6013      	str	r3, [r2, #0]
			RE_DE_ON;
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063e:	4820      	ldr	r0, [pc, #128]	; (80006c0 <read_bms_uart+0xdc>)
 8000640:	f002 ff43 	bl	80034ca <HAL_GPIO_WritePin>
 8000644:	2002      	movs	r0, #2
 8000646:	f001 fea1 	bl	800238c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	220d      	movs	r2, #13
 800064e:	491d      	ldr	r1, [pc, #116]	; (80006c4 <read_bms_uart+0xe0>)
 8000650:	481d      	ldr	r0, [pc, #116]	; (80006c8 <read_bms_uart+0xe4>)
 8000652:	f004 f835 	bl	80046c0 <HAL_UART_Transmit>
			RE_DE_OFF;
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <read_bms_uart+0xdc>)
 800065e:	f002 ff34 	bl	80034ca <HAL_GPIO_WritePin>
 8000662:	2001      	movs	r0, #1
 8000664:	f001 fe92 	bl	800238c <HAL_Delay>
			bms_detected++;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <read_bms_uart+0xd0>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <read_bms_uart+0xd0>)
 8000672:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - bms_req_time > 1000) {
 8000674:	e01a      	b.n	80006ac <read_bms_uart+0xc8>
		}
	}
	else if (bms_detected == 2 && batteryMsg.bms_type == BMS_NONE)
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <read_bms_uart+0xd0>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d116      	bne.n	80006ac <read_bms_uart+0xc8>
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <read_bms_uart+0xd8>)
 8000680:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000684:	2b00      	cmp	r3, #0
 8000686:	d111      	bne.n	80006ac <read_bms_uart+0xc8>
	{
		if (HAL_GetTick() - bms_req_time > 1000) {
 8000688:	f001 fe76 	bl	8002378 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <read_bms_uart+0xd4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000698:	d908      	bls.n	80006ac <read_bms_uart+0xc8>
			bms_req_time = HAL_GetTick();
 800069a:	f001 fe6d 	bl	8002378 <HAL_GetTick>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <read_bms_uart+0xd4>)
 80006a2:	6013      	str	r3, [r2, #0]
			bms_detected = 3;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <read_bms_uart+0xd0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006aa:	e7ff      	b.n	80006ac <read_bms_uart+0xc8>
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000294 	.word	0x20000294
 80006b4:	20000295 	.word	0x20000295
 80006b8:	20000298 	.word	0x20000298
 80006bc:	200002d0 	.word	0x200002d0
 80006c0:	40011000 	.word	0x40011000
 80006c4:	20000010 	.word	0x20000010
 80006c8:	2000019c 	.word	0x2000019c

080006cc <rcGetBattery>:

void rcGetBattery() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	if (bms_uart_buff[0] == 0xDD) smart_bms = 0;
 80006d2:	4b87      	ldr	r3, [pc, #540]	; (80008f0 <rcGetBattery+0x224>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2bdd      	cmp	r3, #221	; 0xdd
 80006d8:	d103      	bne.n	80006e2 <rcGetBattery+0x16>
 80006da:	4b86      	ldr	r3, [pc, #536]	; (80008f4 <rcGetBattery+0x228>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e006      	b.n	80006f0 <rcGetBattery+0x24>
	else if (bms_uart_buff[0] == 0xA5) smart_bms = 1;
 80006e2:	4b83      	ldr	r3, [pc, #524]	; (80008f0 <rcGetBattery+0x224>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2ba5      	cmp	r3, #165	; 0xa5
 80006e8:	d102      	bne.n	80006f0 <rcGetBattery+0x24>
 80006ea:	4b82      	ldr	r3, [pc, #520]	; (80008f4 <rcGetBattery+0x228>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
	if (smart_bms)
 80006f0:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <rcGetBattery+0x228>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 819f 	beq.w	8000a38 <rcGetBattery+0x36c>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 80006fa:	4b7d      	ldr	r3, [pc, #500]	; (80008f0 <rcGetBattery+0x224>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	2b90      	cmp	r3, #144	; 0x90
 8000704:	d133      	bne.n	800076e <rcGetBattery+0xa2>
		{
			batteryMsg.bms_type = BMS_SMART;
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <rcGetBattery+0x22c>)
 8000708:	2201      	movs	r2, #1
 800070a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 800070e:	4b78      	ldr	r3, [pc, #480]	; (80008f0 <rcGetBattery+0x224>)
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	b29b      	uxth	r3, r3
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b75      	ldr	r3, [pc, #468]	; (80008f0 <rcGetBattery+0x224>)
 800071a:	795b      	ldrb	r3, [r3, #5]
 800071c:	b29b      	uxth	r3, r3
 800071e:	4413      	add	r3, r2
 8000720:	b29a      	uxth	r2, r3
 8000722:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <rcGetBattery+0x22c>)
 8000724:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8000726:	4b72      	ldr	r3, [pc, #456]	; (80008f0 <rcGetBattery+0x224>)
 8000728:	7a1b      	ldrb	r3, [r3, #8]
 800072a:	b29b      	uxth	r3, r3
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b6f      	ldr	r3, [pc, #444]	; (80008f0 <rcGetBattery+0x224>)
 8000732:	7a5b      	ldrb	r3, [r3, #9]
 8000734:	b29b      	uxth	r3, r3
 8000736:	4413      	add	r3, r2
 8000738:	b29b      	uxth	r3, r3
 800073a:	b21a      	sxth	r2, r3
 800073c:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <rcGetBattery+0x22c>)
 800073e:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8000740:	4b6b      	ldr	r3, [pc, #428]	; (80008f0 <rcGetBattery+0x224>)
 8000742:	7a9b      	ldrb	r3, [r3, #10]
 8000744:	b29b      	uxth	r3, r3
 8000746:	021b      	lsls	r3, r3, #8
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b69      	ldr	r3, [pc, #420]	; (80008f0 <rcGetBattery+0x224>)
 800074c:	7adb      	ldrb	r3, [r3, #11]
 800074e:	b29b      	uxth	r3, r3
 8000750:	4413      	add	r3, r2
 8000752:	b29a      	uxth	r2, r3
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <rcGetBattery+0x22c>)
 8000756:	835a      	strh	r2, [r3, #26]
			battery_capacity = batteryMsg.capacity_percent/10;
 8000758:	4b67      	ldr	r3, [pc, #412]	; (80008f8 <rcGetBattery+0x22c>)
 800075a:	8b5b      	ldrh	r3, [r3, #26]
 800075c:	4a67      	ldr	r2, [pc, #412]	; (80008fc <rcGetBattery+0x230>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	08db      	lsrs	r3, r3, #3
 8000764:	b29b      	uxth	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	4b65      	ldr	r3, [pc, #404]	; (8000900 <rcGetBattery+0x234>)
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e146      	b.n	80009fc <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x91)
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	2b91      	cmp	r3, #145	; 0x91
 8000772:	d118      	bne.n	80007a6 <rcGetBattery+0xda>
		{
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8000774:	4b5e      	ldr	r3, [pc, #376]	; (80008f0 <rcGetBattery+0x224>)
 8000776:	791b      	ldrb	r3, [r3, #4]
 8000778:	b29b      	uxth	r3, r3
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <rcGetBattery+0x224>)
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	b29b      	uxth	r3, r3
 8000784:	4413      	add	r3, r2
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <rcGetBattery+0x22c>)
 800078a:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 800078c:	4b58      	ldr	r3, [pc, #352]	; (80008f0 <rcGetBattery+0x224>)
 800078e:	79db      	ldrb	r3, [r3, #7]
 8000790:	b29b      	uxth	r3, r3
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	b29a      	uxth	r2, r3
 8000796:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <rcGetBattery+0x224>)
 8000798:	7a1b      	ldrb	r3, [r3, #8]
 800079a:	b29b      	uxth	r3, r3
 800079c:	4413      	add	r3, r2
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <rcGetBattery+0x22c>)
 80007a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80007a4:	e12a      	b.n	80009fc <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x92)
 80007a6:	79bb      	ldrb	r3, [r7, #6]
 80007a8:	2b92      	cmp	r3, #146	; 0x92
 80007aa:	f000 8127 	beq.w	80009fc <rcGetBattery+0x330>
		{

		}
		else if (battery_comm == 0x93)
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	2b93      	cmp	r3, #147	; 0x93
 80007b2:	d111      	bne.n	80007d8 <rcGetBattery+0x10c>
		{
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 80007b4:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <rcGetBattery+0x224>)
 80007b6:	7a1b      	ldrb	r3, [r3, #8]
 80007b8:	061a      	lsls	r2, r3, #24
 80007ba:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <rcGetBattery+0x224>)
 80007bc:	7a5b      	ldrb	r3, [r3, #9]
 80007be:	041b      	lsls	r3, r3, #16
 80007c0:	441a      	add	r2, r3
 80007c2:	4b4b      	ldr	r3, [pc, #300]	; (80008f0 <rcGetBattery+0x224>)
 80007c4:	7a9b      	ldrb	r3, [r3, #10]
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	4413      	add	r3, r2
 80007ca:	4a49      	ldr	r2, [pc, #292]	; (80008f0 <rcGetBattery+0x224>)
 80007cc:	7ad2      	ldrb	r2, [r2, #11]
 80007ce:	4413      	add	r3, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <rcGetBattery+0x22c>)
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	e111      	b.n	80009fc <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x94)
 80007d8:	79bb      	ldrb	r3, [r7, #6]
 80007da:	2b94      	cmp	r3, #148	; 0x94
 80007dc:	d108      	bne.n	80007f0 <rcGetBattery+0x124>
		{
			batteryMsg.num_of_battery = bms_uart_buff[4];
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <rcGetBattery+0x224>)
 80007e0:	791a      	ldrb	r2, [r3, #4]
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <rcGetBattery+0x22c>)
 80007e4:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 80007e6:	4b42      	ldr	r3, [pc, #264]	; (80008f0 <rcGetBattery+0x224>)
 80007e8:	795a      	ldrb	r2, [r3, #5]
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <rcGetBattery+0x22c>)
 80007ec:	77da      	strb	r2, [r3, #31]
 80007ee:	e105      	b.n	80009fc <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x95)
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	2b95      	cmp	r3, #149	; 0x95
 80007f4:	f040 80f5 	bne.w	80009e2 <rcGetBattery+0x316>
		{
			if (bms_uart_buff[4] == 0x01)
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <rcGetBattery+0x224>)
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d124      	bne.n	800084a <rcGetBattery+0x17e>
			{
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8000800:	4b3b      	ldr	r3, [pc, #236]	; (80008f0 <rcGetBattery+0x224>)
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	b29b      	uxth	r3, r3
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b39      	ldr	r3, [pc, #228]	; (80008f0 <rcGetBattery+0x224>)
 800080c:	799b      	ldrb	r3, [r3, #6]
 800080e:	b29b      	uxth	r3, r3
 8000810:	4413      	add	r3, r2
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <rcGetBattery+0x22c>)
 8000816:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <rcGetBattery+0x224>)
 800081a:	79db      	ldrb	r3, [r3, #7]
 800081c:	b29b      	uxth	r3, r3
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b33      	ldr	r3, [pc, #204]	; (80008f0 <rcGetBattery+0x224>)
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	b29b      	uxth	r3, r3
 8000828:	4413      	add	r3, r2
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b32      	ldr	r3, [pc, #200]	; (80008f8 <rcGetBattery+0x22c>)
 800082e:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <rcGetBattery+0x224>)
 8000832:	7a5b      	ldrb	r3, [r3, #9]
 8000834:	b29b      	uxth	r3, r3
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b29a      	uxth	r2, r3
 800083a:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <rcGetBattery+0x224>)
 800083c:	7a9b      	ldrb	r3, [r3, #10]
 800083e:	b29b      	uxth	r3, r3
 8000840:	4413      	add	r3, r2
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <rcGetBattery+0x22c>)
 8000846:	861a      	strh	r2, [r3, #48]	; 0x30
 8000848:	e0c4      	b.n	80009d4 <rcGetBattery+0x308>
			}
			else if (bms_uart_buff[4] == 0x02)
 800084a:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <rcGetBattery+0x224>)
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d124      	bne.n	800089c <rcGetBattery+0x1d0>
			{
				batteryMsg.cell_3 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8000852:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <rcGetBattery+0x224>)
 8000854:	795b      	ldrb	r3, [r3, #5]
 8000856:	b29b      	uxth	r3, r3
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <rcGetBattery+0x224>)
 800085e:	799b      	ldrb	r3, [r3, #6]
 8000860:	b29b      	uxth	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <rcGetBattery+0x22c>)
 8000868:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 800086a:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <rcGetBattery+0x224>)
 800086c:	79db      	ldrb	r3, [r3, #7]
 800086e:	b29b      	uxth	r3, r3
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <rcGetBattery+0x224>)
 8000876:	7a1b      	ldrb	r3, [r3, #8]
 8000878:	b29b      	uxth	r3, r3
 800087a:	4413      	add	r3, r2
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <rcGetBattery+0x22c>)
 8000880:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <rcGetBattery+0x224>)
 8000884:	7a5b      	ldrb	r3, [r3, #9]
 8000886:	b29b      	uxth	r3, r3
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b29a      	uxth	r2, r3
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <rcGetBattery+0x224>)
 800088e:	7a9b      	ldrb	r3, [r3, #10]
 8000890:	b29b      	uxth	r3, r3
 8000892:	4413      	add	r3, r2
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <rcGetBattery+0x22c>)
 8000898:	86da      	strh	r2, [r3, #54]	; 0x36
 800089a:	e09b      	b.n	80009d4 <rcGetBattery+0x308>
				//batteryMsg.cell_3 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
				//batteryMsg.cell_4 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
				//batteryMsg.cell_5 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
			}
			else if (bms_uart_buff[4] == 0x03)
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <rcGetBattery+0x224>)
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d12f      	bne.n	8000904 <rcGetBattery+0x238>
			{
				batteryMsg.cell_6 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <rcGetBattery+0x224>)
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <rcGetBattery+0x224>)
 80008b0:	799b      	ldrb	r3, [r3, #6]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <rcGetBattery+0x22c>)
 80008ba:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <rcGetBattery+0x224>)
 80008be:	79db      	ldrb	r3, [r3, #7]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <rcGetBattery+0x224>)
 80008c8:	7a1b      	ldrb	r3, [r3, #8]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4413      	add	r3, r2
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <rcGetBattery+0x22c>)
 80008d2:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <rcGetBattery+0x224>)
 80008d6:	7a5b      	ldrb	r3, [r3, #9]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <rcGetBattery+0x224>)
 80008e0:	7a9b      	ldrb	r3, [r3, #10]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <rcGetBattery+0x22c>)
 80008ea:	879a      	strh	r2, [r3, #60]	; 0x3c
 80008ec:	e072      	b.n	80009d4 <rcGetBattery+0x308>
 80008ee:	bf00      	nop
 80008f0:	20000230 	.word	0x20000230
 80008f4:	20000296 	.word	0x20000296
 80008f8:	200002d0 	.word	0x200002d0
 80008fc:	cccccccd 	.word	0xcccccccd
 8000900:	2000029c 	.word	0x2000029c
				//batteryMsg.cell_6 = (bms_uart_buff[27] << 8) + bms_uart_buff[28];
				//batteryMsg.cell_7 = (bms_uart_buff[29] << 8) + bms_uart_buff[30];
				//batteryMsg.cell_8 = (bms_uart_buff[31] << 8) + bms_uart_buff[32];
			}
			else if (bms_uart_buff[4] == 0x04)
 8000904:	4b49      	ldr	r3, [pc, #292]	; (8000a2c <rcGetBattery+0x360>)
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d126      	bne.n	800095a <rcGetBattery+0x28e>
			{
				batteryMsg.cell_9 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 800090c:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <rcGetBattery+0x360>)
 800090e:	795b      	ldrb	r3, [r3, #5]
 8000910:	b29b      	uxth	r3, r3
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b29a      	uxth	r2, r3
 8000916:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <rcGetBattery+0x360>)
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <rcGetBattery+0x364>)
 8000922:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8000924:	4b41      	ldr	r3, [pc, #260]	; (8000a2c <rcGetBattery+0x360>)
 8000926:	79db      	ldrb	r3, [r3, #7]
 8000928:	b29b      	uxth	r3, r3
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b29a      	uxth	r2, r3
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <rcGetBattery+0x360>)
 8000930:	7a1b      	ldrb	r3, [r3, #8]
 8000932:	b29b      	uxth	r3, r3
 8000934:	4413      	add	r3, r2
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <rcGetBattery+0x364>)
 800093a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <rcGetBattery+0x360>)
 8000940:	7a5b      	ldrb	r3, [r3, #9]
 8000942:	b29b      	uxth	r3, r3
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29a      	uxth	r2, r3
 8000948:	4b38      	ldr	r3, [pc, #224]	; (8000a2c <rcGetBattery+0x360>)
 800094a:	7a9b      	ldrb	r3, [r3, #10]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4413      	add	r3, r2
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b37      	ldr	r3, [pc, #220]	; (8000a30 <rcGetBattery+0x364>)
 8000954:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8000958:	e03c      	b.n	80009d4 <rcGetBattery+0x308>
				//batteryMsg.cell_9 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
				//batteryMsg.cell_10 = (bms_uart_buff[36] << 8) + bms_uart_buff[37];
				//batteryMsg.cell_11 = (bms_uart_buff[38] << 8) + bms_uart_buff[39];
			}
			else if (bms_uart_buff[4] == 0x05)
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <rcGetBattery+0x360>)
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d127      	bne.n	80009b2 <rcGetBattery+0x2e6>
			{
				batteryMsg.cell_12 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8000962:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <rcGetBattery+0x360>)
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	b29b      	uxth	r3, r3
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <rcGetBattery+0x360>)
 800096e:	799b      	ldrb	r3, [r3, #6]
 8000970:	b29b      	uxth	r3, r3
 8000972:	4413      	add	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b2e      	ldr	r3, [pc, #184]	; (8000a30 <rcGetBattery+0x364>)
 8000978:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <rcGetBattery+0x360>)
 800097e:	79db      	ldrb	r3, [r3, #7]
 8000980:	b29b      	uxth	r3, r3
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <rcGetBattery+0x360>)
 8000988:	7a1b      	ldrb	r3, [r3, #8]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b27      	ldr	r3, [pc, #156]	; (8000a30 <rcGetBattery+0x364>)
 8000992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (bms_uart_buff[9] << 8) + bms_uart_buff[10];
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <rcGetBattery+0x360>)
 8000998:	7a5b      	ldrb	r3, [r3, #9]
 800099a:	b29b      	uxth	r3, r3
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <rcGetBattery+0x360>)
 80009a2:	7a9b      	ldrb	r3, [r3, #10]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4413      	add	r3, r2
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <rcGetBattery+0x364>)
 80009ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80009b0:	e010      	b.n	80009d4 <rcGetBattery+0x308>
				//batteryMsg.cell_12 = (bms_uart_buff[40] << 8) + bms_uart_buff[41];
				//batteryMsg.cell_13 = (bms_uart_buff[42] << 8) + bms_uart_buff[43];
				//batteryMsg.cell_14 = (bms_uart_buff[44] << 8) + bms_uart_buff[45];
			}
			else if (bms_uart_buff[4] == 0x06)
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <rcGetBattery+0x360>)
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d10c      	bne.n	80009d4 <rcGetBattery+0x308>
			{
				batteryMsg.cell_15 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <rcGetBattery+0x360>)
 80009bc:	795b      	ldrb	r3, [r3, #5]
 80009be:	b29b      	uxth	r3, r3
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <rcGetBattery+0x360>)
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <rcGetBattery+0x364>)
 80009d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				//batteryMsg.cell_15 = (bms_uart_buff[47] << 8) + bms_uart_buff[48];
			}
			bms_smart_request_msg[2] = 0x95;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <rcGetBattery+0x368>)
 80009d6:	2295      	movs	r2, #149	; 0x95
 80009d8:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <rcGetBattery+0x368>)
 80009dc:	2282      	movs	r2, #130	; 0x82
 80009de:	731a      	strb	r2, [r3, #12]
 80009e0:	e00c      	b.n	80009fc <rcGetBattery+0x330>
		}
		else if (battery_comm == 0x96)
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	2b96      	cmp	r3, #150	; 0x96
 80009e6:	d109      	bne.n	80009fc <rcGetBattery+0x330>
		{
			batteryMsg.temp1 = bms_uart_buff[5]; //-40 to convert
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <rcGetBattery+0x360>)
 80009ea:	795b      	ldrb	r3, [r3, #5]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <rcGetBattery+0x364>)
 80009f0:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = bms_uart_buff[6];
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <rcGetBattery+0x360>)
 80009f4:	799b      	ldrb	r3, [r3, #6]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <rcGetBattery+0x364>)
 80009fa:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		bms_smart_request_msg[2]++;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <rcGetBattery+0x368>)
 80009fe:	789b      	ldrb	r3, [r3, #2]
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <rcGetBattery+0x368>)
 8000a06:	709a      	strb	r2, [r3, #2]
		bms_smart_request_msg[12]++;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <rcGetBattery+0x368>)
 8000a0a:	7b1b      	ldrb	r3, [r3, #12]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <rcGetBattery+0x368>)
 8000a12:	731a      	strb	r2, [r3, #12]
		if (bms_smart_request_msg[2] > 0x96)
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <rcGetBattery+0x368>)
 8000a16:	789b      	ldrb	r3, [r3, #2]
 8000a18:	2b96      	cmp	r3, #150	; 0x96
 8000a1a:	f240 81a2 	bls.w	8000d62 <rcGetBattery+0x696>
		{
			bms_smart_request_msg[2] = 0x90;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <rcGetBattery+0x368>)
 8000a20:	2290      	movs	r2, #144	; 0x90
 8000a22:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x7D;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <rcGetBattery+0x368>)
 8000a26:	227d      	movs	r2, #125	; 0x7d
 8000a28:	731a      	strb	r2, [r3, #12]
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
		}
	}
}
 8000a2a:	e19a      	b.n	8000d62 <rcGetBattery+0x696>
 8000a2c:	20000230 	.word	0x20000230
 8000a30:	200002d0 	.word	0x200002d0
 8000a34:	20000010 	.word	0x20000010
		uint8_t battery_comm = bms_uart_buff[1];
 8000a38:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b03      	cmp	r3, #3
 8000a42:	f040 80bb 	bne.w	8000bbc <rcGetBattery+0x4f0>
			batteryMsg.bms_type = BMS_JBD;
 8000a46:	4b58      	ldr	r3, [pc, #352]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8000a4e:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a50:	791b      	ldrb	r3, [r3, #4]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b52      	ldr	r3, [pc, #328]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a5a:	795b      	ldrb	r3, [r3, #5]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4413      	add	r3, r2
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b51      	ldr	r3, [pc, #324]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000a64:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8000a66:	4b50      	ldr	r3, [pc, #320]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8000a6c:	4b4d      	ldr	r3, [pc, #308]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a6e:	7a1b      	ldrb	r3, [r3, #8]
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	4a4c      	ldr	r2, [pc, #304]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a74:	7a52      	ldrb	r2, [r2, #9]
 8000a76:	4413      	add	r3, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000a7c:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a80:	7a9b      	ldrb	r3, [r3, #10]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	021b      	lsls	r3, r3, #8
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b46      	ldr	r3, [pc, #280]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a8a:	7adb      	ldrb	r3, [r3, #11]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4413      	add	r3, r2
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000a94:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000a98:	7b1b      	ldrb	r3, [r3, #12]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000aa2:	7b5b      	ldrb	r3, [r3, #13]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000aac:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8000aae:	4b3d      	ldr	r3, [pc, #244]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000ab0:	7b9b      	ldrb	r3, [r3, #14]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000aba:	7bdb      	ldrb	r3, [r3, #15]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b39      	ldr	r3, [pc, #228]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000ac4:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 8000ac6:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000ac8:	7c1b      	ldrb	r3, [r3, #16]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	021b      	lsls	r3, r3, #8
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000ad2:	7c5b      	ldrb	r3, [r3, #17]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	4413      	add	r3, r2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000adc:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000ae0:	7c9b      	ldrb	r3, [r3, #18]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000aea:	7cdb      	ldrb	r3, [r3, #19]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	4413      	add	r3, r2
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000af4:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000af8:	7d1b      	ldrb	r3, [r3, #20]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b02:	7d5b      	ldrb	r3, [r3, #21]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	4413      	add	r3, r2
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b0c:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b10:	7d9a      	ldrb	r2, [r3, #22]
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b14:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b18:	7ddb      	ldrb	r3, [r3, #23]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b1e:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b22:	7e1a      	ldrb	r2, [r3, #24]
 8000b24:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b26:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b2a:	7e5a      	ldrb	r2, [r3, #25]
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b2e:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b32:	7e9a      	ldrb	r2, [r3, #26]
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b36:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b3a:	7edb      	ldrb	r3, [r3, #27]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b44:	7f1b      	ldrb	r3, [r3, #28]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4413      	add	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b4e:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b52:	7f5b      	ldrb	r3, [r3, #29]
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <rcGetBattery+0x4d8>)
 8000b5c:	7f9b      	ldrb	r3, [r3, #30]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4413      	add	r3, r2
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b66:	845a      	strh	r2, [r3, #34]	; 0x22
			battery_capacity = batteryMsg.capacity_percent;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <rcGetBattery+0x4dc>)
 8000b6a:	8b5b      	ldrh	r3, [r3, #26]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <rcGetBattery+0x4e0>)
 8000b70:	601a      	str	r2, [r3, #0]
			RE_DE_ON;
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <rcGetBattery+0x4e4>)
 8000b7a:	f002 fca6 	bl	80034ca <HAL_GPIO_WritePin>
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f001 fc04 	bl	800238c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	2207      	movs	r2, #7
 8000b88:	490a      	ldr	r1, [pc, #40]	; (8000bb4 <rcGetBattery+0x4e8>)
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <rcGetBattery+0x4ec>)
 8000b8c:	f003 fd98 	bl	80046c0 <HAL_UART_Transmit>
			RE_DE_OFF;
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <rcGetBattery+0x4e4>)
 8000b98:	f002 fc97 	bl	80034ca <HAL_GPIO_WritePin>
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f001 fbf5 	bl	800238c <HAL_Delay>
}
 8000ba2:	e0de      	b.n	8000d62 <rcGetBattery+0x696>
 8000ba4:	20000230 	.word	0x20000230
 8000ba8:	200002d0 	.word	0x200002d0
 8000bac:	2000029c 	.word	0x2000029c
 8000bb0:	40011000 	.word	0x40011000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	2000019c 	.word	0x2000019c
		else if (battery_comm == 0x04)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	f040 80cf 	bne.w	8000d62 <rcGetBattery+0x696>
			batteryMsg.battery_pack = bms_uart_buff[3];
 8000bc4:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <rcGetBattery+0x6a0>)
 8000bc6:	78da      	ldrb	r2, [r3, #3]
 8000bc8:	4b69      	ldr	r3, [pc, #420]	; (8000d70 <rcGetBattery+0x6a4>)
 8000bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8000bce:	4b67      	ldr	r3, [pc, #412]	; (8000d6c <rcGetBattery+0x6a0>)
 8000bd0:	791b      	ldrb	r3, [r3, #4]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <rcGetBattery+0x6a0>)
 8000bda:	795b      	ldrb	r3, [r3, #5]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b63      	ldr	r3, [pc, #396]	; (8000d70 <rcGetBattery+0x6a4>)
 8000be4:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <rcGetBattery+0x6a0>)
 8000be8:	799b      	ldrb	r3, [r3, #6]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <rcGetBattery+0x6a0>)
 8000bf2:	79db      	ldrb	r3, [r3, #7]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b5d      	ldr	r3, [pc, #372]	; (8000d70 <rcGetBattery+0x6a4>)
 8000bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 8000bfe:	4b5b      	ldr	r3, [pc, #364]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c00:	7a1b      	ldrb	r3, [r3, #8]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c0a:	7a5b      	ldrb	r3, [r3, #9]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b57      	ldr	r3, [pc, #348]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c14:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8000c16:	4b55      	ldr	r3, [pc, #340]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c18:	7a9b      	ldrb	r3, [r3, #10]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	021b      	lsls	r3, r3, #8
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c22:	7adb      	ldrb	r3, [r3, #11]
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	4413      	add	r3, r2
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c2c:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c30:	7b1b      	ldrb	r3, [r3, #12]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c3a:	7b5b      	ldrb	r3, [r3, #13]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	4413      	add	r3, r2
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b4b      	ldr	r3, [pc, #300]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c44:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c48:	7b9b      	ldrb	r3, [r3, #14]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c52:	7bdb      	ldrb	r3, [r3, #15]
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c5c:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 8000c5e:	4b43      	ldr	r3, [pc, #268]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c60:	7c1b      	ldrb	r3, [r3, #16]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c6a:	7c5b      	ldrb	r3, [r3, #17]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b3f      	ldr	r3, [pc, #252]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c74:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8000c76:	4b3d      	ldr	r3, [pc, #244]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c78:	7c9b      	ldrb	r3, [r3, #18]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b3a      	ldr	r3, [pc, #232]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c82:	7cdb      	ldrb	r3, [r3, #19]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <rcGetBattery+0x6a4>)
 8000c8c:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c90:	7d1b      	ldrb	r3, [r3, #20]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <rcGetBattery+0x6a0>)
 8000c9a:	7d5b      	ldrb	r3, [r3, #21]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <rcGetBattery+0x6a4>)
 8000ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <rcGetBattery+0x6a0>)
 8000ca8:	7d9b      	ldrb	r3, [r3, #22]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cb2:	7ddb      	ldrb	r3, [r3, #23]
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <rcGetBattery+0x6a4>)
 8000cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cc0:	7e1b      	ldrb	r3, [r3, #24]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cca:	7e5b      	ldrb	r3, [r3, #25]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <rcGetBattery+0x6a4>)
 8000cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 8000cd8:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cda:	7e9b      	ldrb	r3, [r3, #26]
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <rcGetBattery+0x6a0>)
 8000ce4:	7edb      	ldrb	r3, [r3, #27]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <rcGetBattery+0x6a4>)
 8000cee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cf4:	7f1b      	ldrb	r3, [r3, #28]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <rcGetBattery+0x6a0>)
 8000cfe:	7f5b      	ldrb	r3, [r3, #29]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	4413      	add	r3, r2
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <rcGetBattery+0x6a4>)
 8000d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d0e:	7f9b      	ldrb	r3, [r3, #30]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d18:	7fdb      	ldrb	r3, [r3, #31]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <rcGetBattery+0x6a4>)
 8000d22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4413      	add	r3, r2
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <rcGetBattery+0x6a4>)
 8000d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <rcGetBattery+0x6a0>)
 8000d52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <rcGetBattery+0x6a4>)
 8000d5e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000230 	.word	0x20000230
 8000d70:	200002d0 	.word	0x200002d0

08000d74 <unwrap_encoder>:

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000d86:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000d98:	425a      	negs	r2, r3
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	bf58      	it	pl
 8000da0:	4253      	negpl	r3, r2
 8000da2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000da6:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000dae:	da03      	bge.n	8000db8 <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000db6:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	371c      	adds	r7, #28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <getEncoder>:

void getEncoder()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	int currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <getEncoder+0x28>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	607b      	str	r3, [r7, #4]
	enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4906      	ldr	r1, [pc, #24]	; (8000e04 <getEncoder+0x2c>)
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ffc1 	bl	8000d74 <unwrap_encoder>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <getEncoder+0x30>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000154 	.word	0x20000154
 8000e04:	20000228 	.word	0x20000228
 8000e08:	2000022c 	.word	0x2000022c

08000e0c <buttons_Init>:

void buttons_Init()
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
	stButtons[0].button_port = BUTTON1_GPIO_Port;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <buttons_Init+0x44>)
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <buttons_Init+0x48>)
 8000e14:	601a      	str	r2, [r3, #0]
	stButtons[0].button_pin = BUTTON1_Pin;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <buttons_Init+0x44>)
 8000e18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e1c:	809a      	strh	r2, [r3, #4]
	stButtons[1].button_port = BUTTON2_GPIO_Port;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <buttons_Init+0x44>)
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <buttons_Init+0x48>)
 8000e22:	60da      	str	r2, [r3, #12]
	stButtons[1].button_pin = BUTTON2_Pin;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <buttons_Init+0x44>)
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	821a      	strh	r2, [r3, #16]
	stButtons[2].button_port = BUTTON3_GPIO_Port;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <buttons_Init+0x44>)
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <buttons_Init+0x48>)
 8000e30:	619a      	str	r2, [r3, #24]
	stButtons[2].button_pin = BUTTON3_Pin;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <buttons_Init+0x44>)
 8000e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e38:	839a      	strh	r2, [r3, #28]
	stButtons[3].button_port = BUTTON4_GPIO_Port;
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <buttons_Init+0x44>)
 8000e3c:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <buttons_Init+0x48>)
 8000e3e:	625a      	str	r2, [r3, #36]	; 0x24
	stButtons[3].button_pin = BUTTON4_Pin;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <buttons_Init+0x44>)
 8000e42:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e46:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000320 	.word	0x20000320
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <getButton>:
uint8_t short_state = 0;
uint8_t long_state = 0;
uint32_t time_key1 = 0;

void getButton()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e12e      	b.n	80010c2 <getButton+0x26a>
	{
		uint32_t ms = HAL_GetTick();
 8000e64:	f001 fa88 	bl	8002378 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
		uint8_t key_state = HAL_GPIO_ReadPin(stButtons[i].button_port, stButtons[i].button_pin);
 8000e6a:	499a      	ldr	r1, [pc, #616]	; (80010d4 <getButton+0x27c>)
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	6818      	ldr	r0, [r3, #0]
 8000e7a:	4996      	ldr	r1, [pc, #600]	; (80010d4 <getButton+0x27c>)
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3304      	adds	r3, #4
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f002 fb05 	bl	800349c <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
		if(key_state == 0 && !stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d136      	bne.n	8000f0a <getButton+0xb2>
 8000e9c:	498d      	ldr	r1, [pc, #564]	; (80010d4 <getButton+0x27c>)
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3306      	adds	r3, #6
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d12b      	bne.n	8000f0a <getButton+0xb2>
 8000eb2:	4988      	ldr	r1, [pc, #544]	; (80010d4 <getButton+0x27c>)
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	3308      	adds	r3, #8
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	2b32      	cmp	r3, #50	; 0x32
 8000eca:	d91e      	bls.n	8000f0a <getButton+0xb2>
		{
			stButtons[i].short_state = 1;
 8000ecc:	4981      	ldr	r1, [pc, #516]	; (80010d4 <getButton+0x27c>)
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	440b      	add	r3, r1
 8000eda:	3306      	adds	r3, #6
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
			stButtons[i].long_state = 0;
 8000ee0:	497c      	ldr	r1, [pc, #496]	; (80010d4 <getButton+0x27c>)
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	3307      	adds	r3, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8000ef4:	4977      	ldr	r1, [pc, #476]	; (80010d4 <getButton+0x27c>)
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3308      	adds	r3, #8
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e0d8      	b.n	80010bc <getButton+0x264>
		}
		else if(key_state == 0 && !stButtons[i].long_state && (ms - stButtons[i].time_key) > 1000)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d13b      	bne.n	8000f88 <getButton+0x130>
 8000f10:	4970      	ldr	r1, [pc, #448]	; (80010d4 <getButton+0x27c>)
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4613      	mov	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	3307      	adds	r3, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d130      	bne.n	8000f88 <getButton+0x130>
 8000f26:	496b      	ldr	r1, [pc, #428]	; (80010d4 <getButton+0x27c>)
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	3308      	adds	r3, #8
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f40:	d922      	bls.n	8000f88 <getButton+0x130>
		{
			stButtons[i].long_state = 1;
 8000f42:	4964      	ldr	r1, [pc, #400]	; (80010d4 <getButton+0x27c>)
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	440b      	add	r3, r1
 8000f50:	3307      	adds	r3, #7
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
			//long press
			if (i==0)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f040 80ae 	bne.w	80010ba <getButton+0x262>
			{
				curr_menu++;
 8000f5e:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <getButton+0x280>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a5c      	ldr	r2, [pc, #368]	; (80010d8 <getButton+0x280>)
 8000f66:	6013      	str	r3, [r2, #0]
				if (curr_menu>=MENU_MAX)
 8000f68:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <getButton+0x280>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	dd02      	ble.n	8000f76 <getButton+0x11e>
				{
					curr_menu = 0;
 8000f70:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <getButton+0x280>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
				}
				if (start_stop)
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <getButton+0x284>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 809d 	beq.w	80010ba <getButton+0x262>
				{
					start_stop = 0;
 8000f80:	4b56      	ldr	r3, [pc, #344]	; (80010dc <getButton+0x284>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
			if (i==0)
 8000f86:	e098      	b.n	80010ba <getButton+0x262>
				}
			}
		}
		else if(key_state == 1 && stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	f040 8096 	bne.w	80010bc <getButton+0x264>
 8000f90:	4950      	ldr	r1, [pc, #320]	; (80010d4 <getButton+0x27c>)
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3306      	adds	r3, #6
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 808a 	beq.w	80010bc <getButton+0x264>
 8000fa8:	494a      	ldr	r1, [pc, #296]	; (80010d4 <getButton+0x27c>)
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b32      	cmp	r3, #50	; 0x32
 8000fc0:	d97c      	bls.n	80010bc <getButton+0x264>
		{
			stButtons[i].short_state = 0;
 8000fc2:	4944      	ldr	r1, [pc, #272]	; (80010d4 <getButton+0x27c>)
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3306      	adds	r3, #6
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8000fd6:	493f      	ldr	r1, [pc, #252]	; (80010d4 <getButton+0x27c>)
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	601a      	str	r2, [r3, #0]

		  if(!stButtons[i].long_state)
 8000fea:	493a      	ldr	r1, [pc, #232]	; (80010d4 <getButton+0x27c>)
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3307      	adds	r3, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d15d      	bne.n	80010bc <getButton+0x264>
		  {
			//short press
			  if (curr_menu == MENU_BMS)
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <getButton+0x280>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d111      	bne.n	800102c <getButton+0x1d4>
			  {
				  if (i == 0)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d156      	bne.n	80010bc <getButton+0x264>
				  {
					  bms_detected = 0;
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <getButton+0x288>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
					  batteryMsg.bms_type = BMS_NONE;
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <getButton+0x28c>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					  bms_req_time = HAL_GetTick();
 800101c:	f001 f9ac 	bl	8002378 <HAL_GetTick>
 8001020:	4603      	mov	r3, r0
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <getButton+0x290>)
 8001024:	6013      	str	r3, [r2, #0]
					  get_bms_data();
 8001026:	f7ff fa71 	bl	800050c <get_bms_data>
 800102a:	e047      	b.n	80010bc <getButton+0x264>
				  }
			  }
			  else if (curr_menu == MENU_DRIVER)
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <getButton+0x280>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d143      	bne.n	80010bc <getButton+0x264>
			  {
				  if (i == 0)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d111      	bne.n	800105e <getButton+0x206>
				  {
					  start_stop = !start_stop;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <getButton+0x284>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	bf0c      	ite	eq
 8001042:	2301      	moveq	r3, #1
 8001044:	2300      	movne	r3, #0
 8001046:	b2db      	uxtb	r3, r3
 8001048:	461a      	mov	r2, r3
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <getButton+0x284>)
 800104c:	601a      	str	r2, [r3, #0]
					  if (!start_stop)
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <getButton+0x284>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d132      	bne.n	80010bc <getButton+0x264>
					  {
						  motor_speed = 0;
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <getButton+0x294>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	e02e      	b.n	80010bc <getButton+0x264>
					  }
				  }
				  else if (i == 1 && start_stop)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d114      	bne.n	800108e <getButton+0x236>
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <getButton+0x284>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d010      	beq.n	800108e <getButton+0x236>
				  {
					  motor_speed += 1000;
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <getButton+0x294>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001074:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <getButton+0x294>)
 8001076:	6013      	str	r3, [r2, #0]
					  if (motor_speed>10000) motor_speed = 10000;
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <getButton+0x294>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001080:	4293      	cmp	r3, r2
 8001082:	dd1b      	ble.n	80010bc <getButton+0x264>
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <getButton+0x294>)
 8001086:	f242 7210 	movw	r2, #10000	; 0x2710
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e016      	b.n	80010bc <getButton+0x264>
				  }
				  else if (i == 2 && start_stop)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d113      	bne.n	80010bc <getButton+0x264>
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <getButton+0x284>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d00f      	beq.n	80010bc <getButton+0x264>
				  {
					  motor_speed -= 1000;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <getButton+0x294>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <getButton+0x294>)
 80010a6:	6013      	str	r3, [r2, #0]
				  	  if (motor_speed<-10000) motor_speed = -10000;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <getButton+0x294>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <getButton+0x298>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	da04      	bge.n	80010bc <getButton+0x264>
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <getButton+0x294>)
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <getButton+0x298>)
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e000      	b.n	80010bc <getButton+0x264>
			if (i==0)
 80010ba:	bf00      	nop
	for (int i=0; i<4; i++)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3301      	adds	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	f77f aecd 	ble.w	8000e64 <getButton+0xc>
				  }
			  }
		  }
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000320 	.word	0x20000320
 80010d8:	200002cc 	.word	0x200002cc
 80010dc:	200002a0 	.word	0x200002a0
 80010e0:	20000295 	.word	0x20000295
 80010e4:	200002d0 	.word	0x200002d0
 80010e8:	20000298 	.word	0x20000298
 80010ec:	200002a4 	.word	0x200002a4
 80010f0:	ffffd8f0 	.word	0xffffd8f0

080010f4 <menu_update>:

void menu_update()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
 80010f8:	af02      	add	r7, sp, #8
	SSD1306_COLOR color1 = White;
 80010fa:	2301      	movs	r3, #1
 80010fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	SSD1306_COLOR color2 = White;
 8001100:	2301      	movs	r3, #1
 8001102:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	SSD1306_COLOR color3 = White;
 8001106:	2301      	movs	r3, #1
 8001108:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	if (curr_menu == MENU_ENC)
 800110c:	4bb5      	ldr	r3, [pc, #724]	; (80013e4 <menu_update+0x2f0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d132      	bne.n	800117a <menu_update+0x86>
	{
		char str [12];
		snprintf(str, sizeof str, "%d", (int)enc_idle_tick);
 8001114:	4bb4      	ldr	r3, [pc, #720]	; (80013e8 <menu_update+0x2f4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800111c:	4ab3      	ldr	r2, [pc, #716]	; (80013ec <menu_update+0x2f8>)
 800111e:	210c      	movs	r1, #12
 8001120:	f004 fb16 	bl	8005750 <sniprintf>
		ssd1306_Fill(Black);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 ff05 	bl	8001f34 <ssd1306_Fill>
		color1 = Black;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		ssd1306_SetCursor(2, 18);
 8001130:	2112      	movs	r1, #18
 8001132:	2002      	movs	r0, #2
 8001134:	f001 f858 	bl	80021e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x26, White);
 8001138:	4aad      	ldr	r2, [pc, #692]	; (80013f0 <menu_update+0x2fc>)
 800113a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800113e:	2301      	movs	r3, #1
 8001140:	ca06      	ldmia	r2, {r1, r2}
 8001142:	f001 f82b 	bl	800219c <ssd1306_WriteString>
		if (enc_idle_tick == 0)
 8001146:	4ba8      	ldr	r3, [pc, #672]	; (80013e8 <menu_update+0x2f4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 8122 	bne.w	8001394 <menu_update+0x2a0>
		{
			ssd1306_SetCursor(2, 42);
 8001150:	212a      	movs	r1, #42	; 0x2a
 8001152:	2002      	movs	r0, #2
 8001154:	f001 f848 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Long press OK", Font_7x10, White);
 8001158:	4aa6      	ldr	r2, [pc, #664]	; (80013f4 <menu_update+0x300>)
 800115a:	2301      	movs	r3, #1
 800115c:	ca06      	ldmia	r2, {r1, r2}
 800115e:	48a6      	ldr	r0, [pc, #664]	; (80013f8 <menu_update+0x304>)
 8001160:	f001 f81c 	bl	800219c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 8001164:	2135      	movs	r1, #53	; 0x35
 8001166:	2002      	movs	r0, #2
 8001168:	f001 f83e 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("to select", Font_7x10, White);
 800116c:	4aa1      	ldr	r2, [pc, #644]	; (80013f4 <menu_update+0x300>)
 800116e:	2301      	movs	r3, #1
 8001170:	ca06      	ldmia	r2, {r1, r2}
 8001172:	48a2      	ldr	r0, [pc, #648]	; (80013fc <menu_update+0x308>)
 8001174:	f001 f812 	bl	800219c <ssd1306_WriteString>
 8001178:	e10c      	b.n	8001394 <menu_update+0x2a0>
			ssd1306_SetCursor(2, 18);
			ssd1306_WriteString(xx, Font_16x26, Black);
		}
		*/
	}
	else if (curr_menu == MENU_BMS)
 800117a:	4b9a      	ldr	r3, [pc, #616]	; (80013e4 <menu_update+0x2f0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	f040 808e 	bne.w	80012a0 <menu_update+0x1ac>
	{
		ssd1306_Fill(Black);
 8001184:	2000      	movs	r0, #0
 8001186:	f000 fed5 	bl	8001f34 <ssd1306_Fill>
		color2 = Black;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (bms_detected == 0)
 8001190:	4b9b      	ldr	r3, [pc, #620]	; (8001400 <menu_update+0x30c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d114      	bne.n	80011c2 <menu_update+0xce>
		{
			ssd1306_SetCursor(2, 42);
 8001198:	212a      	movs	r1, #42	; 0x2a
 800119a:	2002      	movs	r0, #2
 800119c:	f001 f824 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Press OK", Font_7x10, White);
 80011a0:	4a94      	ldr	r2, [pc, #592]	; (80013f4 <menu_update+0x300>)
 80011a2:	2301      	movs	r3, #1
 80011a4:	ca06      	ldmia	r2, {r1, r2}
 80011a6:	4897      	ldr	r0, [pc, #604]	; (8001404 <menu_update+0x310>)
 80011a8:	f000 fff8 	bl	800219c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 80011ac:	2135      	movs	r1, #53	; 0x35
 80011ae:	2002      	movs	r0, #2
 80011b0:	f001 f81a 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("to start test", Font_7x10, White);
 80011b4:	4a8f      	ldr	r2, [pc, #572]	; (80013f4 <menu_update+0x300>)
 80011b6:	2301      	movs	r3, #1
 80011b8:	ca06      	ldmia	r2, {r1, r2}
 80011ba:	4893      	ldr	r0, [pc, #588]	; (8001408 <menu_update+0x314>)
 80011bc:	f000 ffee 	bl	800219c <ssd1306_WriteString>
 80011c0:	e0e8      	b.n	8001394 <menu_update+0x2a0>
		}
		else if (bms_detected == 3)
 80011c2:	4b8f      	ldr	r3, [pc, #572]	; (8001400 <menu_update+0x30c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d114      	bne.n	80011f4 <menu_update+0x100>
		{
			ssd1306_SetCursor(2, 42);
 80011ca:	212a      	movs	r1, #42	; 0x2a
 80011cc:	2002      	movs	r0, #2
 80011ce:	f001 f80b 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Error!", Font_7x10, White);
 80011d2:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <menu_update+0x300>)
 80011d4:	2301      	movs	r3, #1
 80011d6:	ca06      	ldmia	r2, {r1, r2}
 80011d8:	488c      	ldr	r0, [pc, #560]	; (800140c <menu_update+0x318>)
 80011da:	f000 ffdf 	bl	800219c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 80011de:	2135      	movs	r1, #53	; 0x35
 80011e0:	2002      	movs	r0, #2
 80011e2:	f001 f801 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("no bms data", Font_7x10, White);
 80011e6:	4a83      	ldr	r2, [pc, #524]	; (80013f4 <menu_update+0x300>)
 80011e8:	2301      	movs	r3, #1
 80011ea:	ca06      	ldmia	r2, {r1, r2}
 80011ec:	4888      	ldr	r0, [pc, #544]	; (8001410 <menu_update+0x31c>)
 80011ee:	f000 ffd5 	bl	800219c <ssd1306_WriteString>
 80011f2:	e0cf      	b.n	8001394 <menu_update+0x2a0>
		}
		else
		{
			if (batteryMsg.bms_type == BMS_SMART || batteryMsg.bms_type == BMS_JBD)
 80011f4:	4b87      	ldr	r3, [pc, #540]	; (8001414 <menu_update+0x320>)
 80011f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d004      	beq.n	8001208 <menu_update+0x114>
 80011fe:	4b85      	ldr	r3, [pc, #532]	; (8001414 <menu_update+0x320>)
 8001200:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001204:	2b02      	cmp	r3, #2
 8001206:	d140      	bne.n	800128a <menu_update+0x196>
			{
				char str [6];
				snprintf(str, sizeof str, "%d", (int)battery_capacity);
 8001208:	4b83      	ldr	r3, [pc, #524]	; (8001418 <menu_update+0x324>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001210:	4a76      	ldr	r2, [pc, #472]	; (80013ec <menu_update+0x2f8>)
 8001212:	2106      	movs	r1, #6
 8001214:	f004 fa9c 	bl	8005750 <sniprintf>
				ssd1306_SetCursor(2, 18);
 8001218:	2112      	movs	r1, #18
 800121a:	2002      	movs	r0, #2
 800121c:	f000 ffe4 	bl	80021e8 <ssd1306_SetCursor>
				ssd1306_WriteString(str, Font_16x26, White);
 8001220:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <menu_update+0x2fc>)
 8001222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001226:	2301      	movs	r3, #1
 8001228:	ca06      	ldmia	r2, {r1, r2}
 800122a:	f000 ffb7 	bl	800219c <ssd1306_WriteString>
				ssd1306_SetCursor(2, 45);
 800122e:	212d      	movs	r1, #45	; 0x2d
 8001230:	2002      	movs	r0, #2
 8001232:	f000 ffd9 	bl	80021e8 <ssd1306_SetCursor>
				if (batteryMsg.bms_type == BMS_SMART )
 8001236:	4b77      	ldr	r3, [pc, #476]	; (8001414 <menu_update+0x320>)
 8001238:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <menu_update+0x15a>
				{
					ssd1306_WriteString("SMART", Font_11x18, White);
 8001240:	4a76      	ldr	r2, [pc, #472]	; (800141c <menu_update+0x328>)
 8001242:	2301      	movs	r3, #1
 8001244:	ca06      	ldmia	r2, {r1, r2}
 8001246:	4876      	ldr	r0, [pc, #472]	; (8001420 <menu_update+0x32c>)
 8001248:	f000 ffa8 	bl	800219c <ssd1306_WriteString>
 800124c:	e005      	b.n	800125a <menu_update+0x166>
				}
				else
				{
					ssd1306_WriteString("JBD", Font_11x18, White);
 800124e:	4a73      	ldr	r2, [pc, #460]	; (800141c <menu_update+0x328>)
 8001250:	2301      	movs	r3, #1
 8001252:	ca06      	ldmia	r2, {r1, r2}
 8001254:	4873      	ldr	r0, [pc, #460]	; (8001424 <menu_update+0x330>)
 8001256:	f000 ffa1 	bl	800219c <ssd1306_WriteString>
				}
				char str_volt [8];
				//snprintf(str_volt, sizeof str_volt, "%+6.*f", 2, batteryMsg.voltage);
				snprintf(str_volt, sizeof str_volt, "%d %s", batteryMsg.voltage, "V");
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <menu_update+0x320>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	461a      	mov	r2, r3
 8001260:	f107 001c 	add.w	r0, r7, #28
 8001264:	4b70      	ldr	r3, [pc, #448]	; (8001428 <menu_update+0x334>)
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	4a70      	ldr	r2, [pc, #448]	; (800142c <menu_update+0x338>)
 800126c:	2108      	movs	r1, #8
 800126e:	f004 fa6f 	bl	8005750 <sniprintf>
				ssd1306_SetCursor(90, 45);
 8001272:	212d      	movs	r1, #45	; 0x2d
 8001274:	205a      	movs	r0, #90	; 0x5a
 8001276:	f000 ffb7 	bl	80021e8 <ssd1306_SetCursor>
				ssd1306_WriteString(str_volt, Font_7x10, White);
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <menu_update+0x300>)
 800127c:	f107 001c 	add.w	r0, r7, #28
 8001280:	2301      	movs	r3, #1
 8001282:	ca06      	ldmia	r2, {r1, r2}
 8001284:	f000 ff8a 	bl	800219c <ssd1306_WriteString>
			{
 8001288:	e084      	b.n	8001394 <menu_update+0x2a0>
			}
			else
			{
				ssd1306_SetCursor(2, 53);
 800128a:	2135      	movs	r1, #53	; 0x35
 800128c:	2002      	movs	r0, #2
 800128e:	f000 ffab 	bl	80021e8 <ssd1306_SetCursor>
				ssd1306_WriteString("Reading bms data...", Font_7x10, White);
 8001292:	4a58      	ldr	r2, [pc, #352]	; (80013f4 <menu_update+0x300>)
 8001294:	2301      	movs	r3, #1
 8001296:	ca06      	ldmia	r2, {r1, r2}
 8001298:	4865      	ldr	r0, [pc, #404]	; (8001430 <menu_update+0x33c>)
 800129a:	f000 ff7f 	bl	800219c <ssd1306_WriteString>
 800129e:	e079      	b.n	8001394 <menu_update+0x2a0>
			}
		}
	}
	else if (curr_menu == MENU_DRIVER)
 80012a0:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <menu_update+0x2f0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d175      	bne.n	8001394 <menu_update+0x2a0>
	{
		static uint8_t a = 0;
		ssd1306_Fill(Black);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f000 fe43 	bl	8001f34 <ssd1306_Fill>
		if (a)
 80012ae:	4b61      	ldr	r3, [pc, #388]	; (8001434 <menu_update+0x340>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <menu_update+0x1ca>
		{
			color3 = White;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80012bc:	e002      	b.n	80012c4 <menu_update+0x1d0>
		}
		else
		{
			color3 = Black;
 80012be:	2300      	movs	r3, #0
 80012c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		}
		if (!start_stop)
 80012c4:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <menu_update+0x344>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d117      	bne.n	80012fc <menu_update+0x208>
		{
			ssd1306_SetCursor(2, 42);
 80012cc:	212a      	movs	r1, #42	; 0x2a
 80012ce:	2002      	movs	r0, #2
 80012d0:	f000 ff8a 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("OK - start/stop", Font_7x10, White);
 80012d4:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <menu_update+0x300>)
 80012d6:	2301      	movs	r3, #1
 80012d8:	ca06      	ldmia	r2, {r1, r2}
 80012da:	4858      	ldr	r0, [pc, #352]	; (800143c <menu_update+0x348>)
 80012dc:	f000 ff5e 	bl	800219c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 80012e0:	2135      	movs	r1, #53	; 0x35
 80012e2:	2002      	movs	r0, #2
 80012e4:	f000 ff80 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString("up/down - speed", Font_7x10, White);
 80012e8:	4a42      	ldr	r2, [pc, #264]	; (80013f4 <menu_update+0x300>)
 80012ea:	2301      	movs	r3, #1
 80012ec:	ca06      	ldmia	r2, {r1, r2}
 80012ee:	4854      	ldr	r0, [pc, #336]	; (8001440 <menu_update+0x34c>)
 80012f0:	f000 ff54 	bl	800219c <ssd1306_WriteString>
			a = 0;
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <menu_update+0x340>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e04b      	b.n	8001394 <menu_update+0x2a0>
		}
		else
		{
			static uint32_t blink_t = 0;
			char str_act[10] = "Activated!";
 80012fc:	4a51      	ldr	r2, [pc, #324]	; (8001444 <menu_update+0x350>)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	ca07      	ldmia	r2, {r0, r1, r2}
 8001304:	c303      	stmia	r3!, {r0, r1}
 8001306:	801a      	strh	r2, [r3, #0]
			uint32_t ms = HAL_GetTick();
 8001308:	f001 f836 	bl	8002378 <HAL_GetTick>
 800130c:	63b8      	str	r0, [r7, #56]	; 0x38
			char str [12];
			snprintf(str, sizeof str, "%d", (int)motor_speed/20);
 800130e:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <menu_update+0x354>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <menu_update+0x358>)
 8001314:	fb82 1203 	smull	r1, r2, r2, r3
 8001318:	10d2      	asrs	r2, r2, #3
 800131a:	17db      	asrs	r3, r3, #31
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	1d38      	adds	r0, r7, #4
 8001320:	4a32      	ldr	r2, [pc, #200]	; (80013ec <menu_update+0x2f8>)
 8001322:	210c      	movs	r1, #12
 8001324:	f004 fa14 	bl	8005750 <sniprintf>
			ssd1306_SetCursor(2, 18);
 8001328:	2112      	movs	r1, #18
 800132a:	2002      	movs	r0, #2
 800132c:	f000 ff5c 	bl	80021e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_16x26, White);
 8001330:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <menu_update+0x2fc>)
 8001332:	1d38      	adds	r0, r7, #4
 8001334:	2301      	movs	r3, #1
 8001336:	ca06      	ldmia	r2, {r1, r2}
 8001338:	f000 ff30 	bl	800219c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 45);
 800133c:	212d      	movs	r1, #45	; 0x2d
 800133e:	2002      	movs	r0, #2
 8001340:	f000 ff52 	bl	80021e8 <ssd1306_SetCursor>
			if (a)
 8001344:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <menu_update+0x340>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d007      	beq.n	800135c <menu_update+0x268>
			{
				ssd1306_WriteString(str_act, Font_11x18, White);
 800134c:	4a33      	ldr	r2, [pc, #204]	; (800141c <menu_update+0x328>)
 800134e:	f107 0010 	add.w	r0, r7, #16
 8001352:	2301      	movs	r3, #1
 8001354:	ca06      	ldmia	r2, {r1, r2}
 8001356:	f000 ff21 	bl	800219c <ssd1306_WriteString>
 800135a:	e006      	b.n	800136a <menu_update+0x276>
			}
			else
			{
				ssd1306_WriteString(str_act, Font_11x18, Black);
 800135c:	4a2f      	ldr	r2, [pc, #188]	; (800141c <menu_update+0x328>)
 800135e:	f107 0010 	add.w	r0, r7, #16
 8001362:	2300      	movs	r3, #0
 8001364:	ca06      	ldmia	r2, {r1, r2}
 8001366:	f000 ff19 	bl	800219c <ssd1306_WriteString>
			}
			if (ms - blink_t > 100)
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <menu_update+0x35c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d90e      	bls.n	8001394 <menu_update+0x2a0>
			{
				a = !a;
 8001376:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <menu_update+0x340>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	bf0c      	ite	eq
 800137e:	2301      	moveq	r3, #1
 8001380:	2300      	movne	r3, #0
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <menu_update+0x340>)
 8001388:	701a      	strb	r2, [r3, #0]
				blink_t = HAL_GetTick();
 800138a:	f000 fff5 	bl	8002378 <HAL_GetTick>
 800138e:	4603      	mov	r3, r0
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <menu_update+0x35c>)
 8001392:	6013      	str	r3, [r2, #0]
			}
		}
	}
	ssd1306_SetCursor(2, 1);
 8001394:	2101      	movs	r1, #1
 8001396:	2002      	movs	r0, #2
 8001398:	f000 ff26 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Encoder", Font_7x10, color1);
 800139c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <menu_update+0x300>)
 80013a2:	ca06      	ldmia	r2, {r1, r2}
 80013a4:	482b      	ldr	r0, [pc, #172]	; (8001454 <menu_update+0x360>)
 80013a6:	f000 fef9 	bl	800219c <ssd1306_WriteString>
	ssd1306_SetCursor(55, 1);
 80013aa:	2101      	movs	r1, #1
 80013ac:	2037      	movs	r0, #55	; 0x37
 80013ae:	f000 ff1b 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString("BMS", Font_7x10, color2);
 80013b2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <menu_update+0x300>)
 80013b8:	ca06      	ldmia	r2, {r1, r2}
 80013ba:	4827      	ldr	r0, [pc, #156]	; (8001458 <menu_update+0x364>)
 80013bc:	f000 feee 	bl	800219c <ssd1306_WriteString>
	ssd1306_SetCursor(80, 1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	2050      	movs	r0, #80	; 0x50
 80013c4:	f000 ff10 	bl	80021e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Driver", Font_7x10, color3);
 80013c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80013cc:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <menu_update+0x300>)
 80013ce:	ca06      	ldmia	r2, {r1, r2}
 80013d0:	4822      	ldr	r0, [pc, #136]	; (800145c <menu_update+0x368>)
 80013d2:	f000 fee3 	bl	800219c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80013d6:	f000 fdcf 	bl	8001f78 <ssd1306_UpdateScreen>
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	; 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002cc 	.word	0x200002cc
 80013e8:	2000022c 	.word	0x2000022c
 80013ec:	08006034 	.word	0x08006034
 80013f0:	2000003c 	.word	0x2000003c
 80013f4:	2000002c 	.word	0x2000002c
 80013f8:	08006038 	.word	0x08006038
 80013fc:	08006048 	.word	0x08006048
 8001400:	20000295 	.word	0x20000295
 8001404:	08006054 	.word	0x08006054
 8001408:	08006060 	.word	0x08006060
 800140c:	08006070 	.word	0x08006070
 8001410:	08006078 	.word	0x08006078
 8001414:	200002d0 	.word	0x200002d0
 8001418:	2000029c 	.word	0x2000029c
 800141c:	20000034 	.word	0x20000034
 8001420:	08006084 	.word	0x08006084
 8001424:	0800608c 	.word	0x0800608c
 8001428:	08006098 	.word	0x08006098
 800142c:	08006090 	.word	0x08006090
 8001430:	0800609c 	.word	0x0800609c
 8001434:	2000035c 	.word	0x2000035c
 8001438:	200002a0 	.word	0x200002a0
 800143c:	080060b0 	.word	0x080060b0
 8001440:	080060c0 	.word	0x080060c0
 8001444:	080060e4 	.word	0x080060e4
 8001448:	200002a4 	.word	0x200002a4
 800144c:	66666667 	.word	0x66666667
 8001450:	20000360 	.word	0x20000360
 8001454:	080060d0 	.word	0x080060d0
 8001458:	080060d8 	.word	0x080060d8
 800145c:	080060dc 	.word	0x080060dc

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f000 ff30 	bl	80022c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f878 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f000 f9f8 	bl	8001860 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f000 f9d8 	bl	8001824 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001474:	f000 f9ac 	bl	80017d0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001478:	f000 f956 	bl	8001728 <MX_TIM4_Init>
  MX_SPI1_Init();
 800147c:	f000 f91c 	bl	80016b8 <MX_SPI1_Init>
  MX_CAN_Init();
 8001480:	f000 f8b2 	bl	80015e8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8001484:	2264      	movs	r2, #100	; 0x64
 8001486:	492a      	ldr	r1, [pc, #168]	; (8001530 <main+0xd0>)
 8001488:	482a      	ldr	r0, [pc, #168]	; (8001534 <main+0xd4>)
 800148a:	f003 f99c 	bl	80047c6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <main+0xd8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b28      	ldr	r3, [pc, #160]	; (8001538 <main+0xd8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0204 	bic.w	r2, r2, #4
 800149c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800149e:	213c      	movs	r1, #60	; 0x3c
 80014a0:	4826      	ldr	r0, [pc, #152]	; (800153c <main+0xdc>)
 80014a2:	f002 ff4b 	bl	800433c <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 80014a6:	f000 fcdb 	bl	8001e60 <ssd1306_Init>
  buttons_Init();
 80014aa:	f7ff fcaf 	bl	8000e0c <buttons_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(18, 2);
 80014ae:	2102      	movs	r1, #2
 80014b0:	2012      	movs	r0, #18
 80014b2:	f000 fe99 	bl	80021e8 <ssd1306_SetCursor>
  ssd1306_Fill(White);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fd3c 	bl	8001f34 <ssd1306_Fill>
  ssd1306_WriteString("Universal", Font_11x18, Black);
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <main+0xe0>)
 80014be:	2300      	movs	r3, #0
 80014c0:	ca06      	ldmia	r2, {r1, r2}
 80014c2:	4820      	ldr	r0, [pc, #128]	; (8001544 <main+0xe4>)
 80014c4:	f000 fe6a 	bl	800219c <ssd1306_WriteString>
  ssd1306_SetCursor(18, 25);
 80014c8:	2119      	movs	r1, #25
 80014ca:	2012      	movs	r0, #18
 80014cc:	f000 fe8c 	bl	80021e8 <ssd1306_SetCursor>
  ssd1306_WriteString("Tester", Font_16x24, Black);
 80014d0:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <main+0xe8>)
 80014d2:	2300      	movs	r3, #0
 80014d4:	ca06      	ldmia	r2, {r1, r2}
 80014d6:	481d      	ldr	r0, [pc, #116]	; (800154c <main+0xec>)
 80014d8:	f000 fe60 	bl	800219c <ssd1306_WriteString>
  ssd1306_SetCursor(16, 56);
 80014dc:	2138      	movs	r1, #56	; 0x38
 80014de:	2010      	movs	r0, #16
 80014e0:	f000 fe82 	bl	80021e8 <ssd1306_SetCursor>
  ssd1306_WriteString("@Skynet 2024 v.1.0", Font_6x8, Black);
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <main+0xf0>)
 80014e6:	2300      	movs	r3, #0
 80014e8:	ca06      	ldmia	r2, {r1, r2}
 80014ea:	481a      	ldr	r0, [pc, #104]	; (8001554 <main+0xf4>)
 80014ec:	f000 fe56 	bl	800219c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80014f0:	f000 fd42 	bl	8001f78 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 80014f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f8:	f000 ff48 	bl	800238c <HAL_Delay>
  while (1)
  {
	  getButton();
 80014fc:	f7ff fcac 	bl	8000e58 <getButton>
	  if(curr_menu == MENU_ENC)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <main+0xf8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <main+0xae>
	  {
		  getEncoder();
 8001508:	f7ff fc66 	bl	8000dd8 <getEncoder>
 800150c:	e00c      	b.n	8001528 <main+0xc8>
	  }
	  else if (curr_menu == MENU_BMS)
 800150e:	4b12      	ldr	r3, [pc, #72]	; (8001558 <main+0xf8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <main+0xbc>
	  {
		  read_bms_uart();
 8001516:	f7ff f865 	bl	80005e4 <read_bms_uart>
 800151a:	e005      	b.n	8001528 <main+0xc8>
	  }
	  else if (curr_menu == MENU_DRIVER)
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <main+0xf8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d101      	bne.n	8001528 <main+0xc8>
	  {
		  Moving();
 8001524:	f7fe ff1c 	bl	8000360 <Moving>
	  }
	  menu_update();
 8001528:	f7ff fde4 	bl	80010f4 <menu_update>
	  getButton();
 800152c:	e7e6      	b.n	80014fc <main+0x9c>
 800152e:	bf00      	nop
 8001530:	20000230 	.word	0x20000230
 8001534:	2000019c 	.word	0x2000019c
 8001538:	200001e4 	.word	0x200001e4
 800153c:	20000154 	.word	0x20000154
 8001540:	20000034 	.word	0x20000034
 8001544:	080060f0 	.word	0x080060f0
 8001548:	20000044 	.word	0x20000044
 800154c:	080060fc 	.word	0x080060fc
 8001550:	20000024 	.word	0x20000024
 8001554:	08006104 	.word	0x08006104
 8001558:	200002cc 	.word	0x200002cc

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f8e8 	bl	8005740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001590:	2302      	movs	r3, #2
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800159a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 ffa9 	bl	80034fc <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015b0:	f000 f9e4 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2102      	movs	r1, #2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 fa16 	bl	8003a00 <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015da:	f000 f9cf 	bl	800197c <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3740      	adds	r7, #64	; 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <MX_CAN_Init+0xc8>)
 80015f0:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <MX_CAN_Init+0xcc>)
 80015f2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <MX_CAN_Init+0xc8>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <MX_CAN_Init+0xc8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001606:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001608:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800160c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001610:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001614:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001618:	2200      	movs	r2, #0
 800161a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <MX_CAN_Init+0xc8>)
 800161e:	2201      	movs	r2, #1
 8001620:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001622:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001624:	2200      	movs	r2, #0
 8001626:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <MX_CAN_Init+0xc8>)
 800162a:	2200      	movs	r2, #0
 800162c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001636:	2201      	movs	r2, #1
 8001638:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <MX_CAN_Init+0xc8>)
 800163c:	f000 feca 	bl	80023d4 <HAL_CAN_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001646:	f000 f999 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  sFilterConfig.FilterBank = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001652:	2301      	movs	r3, #1
 8001654:	61fb      	str	r3, [r7, #28]
      sFilterConfig.FilterIdHigh = 0x0000;
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterMaskIdHigh = 0x0000;
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterActivation = ENABLE;
 800166a:	2301      	movs	r3, #1
 800166c:	623b      	str	r3, [r7, #32]
      //sFilterConfig.SlaveStartFilterBank = 14;

      if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	4619      	mov	r1, r3
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001674:	f000 ffa9 	bl	80025ca <HAL_CAN_ConfigFilter>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_CAN_Init+0x9a>
      {
      	Error_Handler();
 800167e:	f000 f97d 	bl	800197c <Error_Handler>
      }
      if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001682:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001684:	f001 f86a 	bl	800275c <HAL_CAN_Start>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_CAN_Init+0xaa>
    	Error_Handler();
 800168e:	f000 f975 	bl	800197c <Error_Handler>
      }
      if (HAL_CAN_ActivateNotification(&hcan,
 8001692:	f648 4102 	movw	r1, #35842	; 0x8c02
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_CAN_Init+0xc8>)
 8001698:	f001 f9a7 	bl	80029ea <HAL_CAN_ActivateNotification>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_CAN_Init+0xbe>
    		  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			  	  | CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
    	Error_Handler();
 80016a2:	f000 f96b 	bl	800197c <Error_Handler>
      }
  /* USER CODE END CAN_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200000d4 	.word	0x200000d4
 80016b4:	40006400 	.word	0x40006400

080016b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <MX_SPI1_Init+0x68>)
 80016be:	4a19      	ldr	r2, [pc, #100]	; (8001724 <MX_SPI1_Init+0x6c>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MX_SPI1_Init+0x68>)
 80016c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <MX_SPI1_Init+0x68>)
 80016cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_SPI1_Init+0x68>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_SPI1_Init+0x68>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_SPI1_Init+0x68>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_SPI1_Init+0x68>)
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_SPI1_Init+0x68>)
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_SPI1_Init+0x68>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_SPI1_Init+0x68>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_SPI1_Init+0x68>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_SPI1_Init+0x68>)
 8001706:	220a      	movs	r2, #10
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_SPI1_Init+0x68>)
 800170c:	f002 fb06 	bl	8003d1c <HAL_SPI_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001716:	f000 f931 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000fc 	.word	0x200000fc
 8001724:	40013000 	.word	0x40013000

08001728 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2224      	movs	r2, #36	; 0x24
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f802 	bl	8005740 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_TIM4_Init+0xa4>)
 8001748:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_TIM4_Init+0xa0>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800176a:	2301      	movs	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001782:	2301      	movs	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_TIM4_Init+0xa0>)
 8001796:	f002 fd2f 	bl	80041f8 <HAL_TIM_Encoder_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017a0:	f000 f8ec 	bl	800197c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_TIM4_Init+0xa0>)
 80017b2:	f002 fed7 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017bc:	f000 f8de 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000154 	.word	0x20000154
 80017cc:	40000800 	.word	0x40000800

080017d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <MX_USART1_UART_Init+0x50>)
 80017d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017f6:	220c      	movs	r2, #12
 80017f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART1_UART_Init+0x4c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART1_UART_Init+0x4c>)
 8001802:	2200      	movs	r2, #0
 8001804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART1_UART_Init+0x4c>)
 8001808:	f002 ff0a 	bl	8004620 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001812:	f000 f8b3 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000019c 	.word	0x2000019c
 8001820:	40013800 	.word	0x40013800

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x38>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <MX_DMA_Init+0x38>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6153      	str	r3, [r2, #20]
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x38>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200f      	movs	r0, #15
 8001848:	f001 f9cb 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800184c:	200f      	movs	r0, #15
 800184e:	f001 f9e4 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <MX_GPIO_Init+0x10c>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4a3c      	ldr	r2, [pc, #240]	; (800196c <MX_GPIO_Init+0x10c>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	6193      	str	r3, [r2, #24]
 8001880:	4b3a      	ldr	r3, [pc, #232]	; (800196c <MX_GPIO_Init+0x10c>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <MX_GPIO_Init+0x10c>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	4a36      	ldr	r2, [pc, #216]	; (800196c <MX_GPIO_Init+0x10c>)
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	6193      	str	r3, [r2, #24]
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <MX_GPIO_Init+0x10c>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b31      	ldr	r3, [pc, #196]	; (800196c <MX_GPIO_Init+0x10c>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a30      	ldr	r2, [pc, #192]	; (800196c <MX_GPIO_Init+0x10c>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b2e      	ldr	r3, [pc, #184]	; (800196c <MX_GPIO_Init+0x10c>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b2b      	ldr	r3, [pc, #172]	; (800196c <MX_GPIO_Init+0x10c>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <MX_GPIO_Init+0x10c>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <MX_GPIO_Init+0x10c>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4825      	ldr	r0, [pc, #148]	; (8001970 <MX_GPIO_Init+0x110>)
 80018dc:	f001 fdf5 	bl	80034ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	4823      	ldr	r0, [pc, #140]	; (8001974 <MX_GPIO_Init+0x114>)
 80018e6:	f001 fdf0 	bl	80034ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2103      	movs	r1, #3
 80018ee:	4822      	ldr	r0, [pc, #136]	; (8001978 <MX_GPIO_Init+0x118>)
 80018f0:	f001 fdeb 	bl	80034ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RE_DE_Pin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80018f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2302      	movs	r3, #2
 8001904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	4619      	mov	r1, r3
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <MX_GPIO_Init+0x110>)
 800190e:	f001 fc41 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2302      	movs	r3, #2
 8001920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	4619      	mov	r1, r3
 8001928:	4812      	ldr	r0, [pc, #72]	; (8001974 <MX_GPIO_Init+0x114>)
 800192a:	f001 fc33 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 800192e:	2303      	movs	r3, #3
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0310 	add.w	r3, r7, #16
 8001942:	4619      	mov	r1, r3
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_GPIO_Init+0x118>)
 8001946:	f001 fc25 	bl	8003194 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 800194a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800194e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <MX_GPIO_Init+0x118>)
 8001960:	f001 fc18 	bl	8003194 <HAL_GPIO_Init>

}
 8001964:	bf00      	nop
 8001966:	3720      	adds	r7, #32
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	40011000 	.word	0x40011000
 8001974:	40010800 	.word	0x40010800
 8001978:	40010c00 	.word	0x40010c00

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <HAL_MspInit+0x5c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_MspInit+0x5c>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <HAL_MspInit+0x5c>)
 80019ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <HAL_MspInit+0x5c>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_MspInit+0x60>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_MspInit+0x60>)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000

080019ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a25      	ldr	r2, [pc, #148]	; (8001a9c <HAL_CAN_MspInit+0xb0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d143      	bne.n	8001a94 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a16:	61d3      	str	r3, [r2, #28]
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a2a:	f043 0308 	orr.w	r3, r3, #8
 8001a2e:	6193      	str	r3, [r2, #24]
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_CAN_MspInit+0xb4>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <HAL_CAN_MspInit+0xb8>)
 8001a52:	f001 fb9f 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <HAL_CAN_MspInit+0xb8>)
 8001a6c:	f001 fb92 	bl	8003194 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <HAL_CAN_MspInit+0xbc>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_CAN_MspInit+0xbc>)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a94:	bf00      	nop
 8001a96:	3728      	adds	r7, #40	; 0x28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40006400 	.word	0x40006400
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40010000 	.word	0x40010000

08001aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_SPI_MspInit+0x70>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d123      	bne.n	8001b14 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_SPI_MspInit+0x74>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001afc:	23a0      	movs	r3, #160	; 0xa0
 8001afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <HAL_SPI_MspInit+0x78>)
 8001b10:	f001 fb40 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010800 	.word	0x40010800

08001b28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <HAL_TIM_Encoder_MspInit+0x70>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d123      	bne.n	8001b90 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	61d3      	str	r3, [r2, #28]
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_TIM_Encoder_MspInit+0x74>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b78:	23c0      	movs	r3, #192	; 0xc0
 8001b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_TIM_Encoder_MspInit+0x78>)
 8001b8c:	f001 fb02 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010c00 	.word	0x40010c00

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_UART_MspInit+0xe8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d15f      	bne.n	8001c84 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a2b      	ldr	r2, [pc, #172]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_UART_MspInit+0xec>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	4822      	ldr	r0, [pc, #136]	; (8001c94 <HAL_UART_MspInit+0xf0>)
 8001c0a:	f001 fac3 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	4619      	mov	r1, r3
 8001c22:	481c      	ldr	r0, [pc, #112]	; (8001c94 <HAL_UART_MspInit+0xf0>)
 8001c24:	f001 fab6 	bl	8003194 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_UART_MspInit+0xf8>)
 8001c2c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c58:	480f      	ldr	r0, [pc, #60]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c5a:	f000 fff9 	bl	8002c50 <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001c64:	f7ff fe8a 	bl	800197c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_UART_MspInit+0xf4>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2025      	movs	r0, #37	; 0x25
 8001c7a:	f000 ffb2 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c7e:	2025      	movs	r0, #37	; 0x25
 8001c80:	f000 ffcb 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40013800 	.word	0x40013800
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010800 	.word	0x40010800
 8001c98:	200001e4 	.word	0x200001e4
 8001c9c:	40020058 	.word	0x40020058

08001ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <NMI_Handler+0x4>

08001ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce6:	f000 fb35 	bl	8002354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <DMA1_Channel5_IRQHandler+0x10>)
 8001cf6:	f001 f919 	bl	8002f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200001e4 	.word	0x200001e4

08001d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART1_IRQHandler+0x10>)
 8001d0a:	f002 fdb9 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2000019c 	.word	0x2000019c

08001d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d20:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <_sbrk+0x5c>)
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <_sbrk+0x60>)
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d102      	bne.n	8001d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <_sbrk+0x64>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <_sbrk+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d207      	bcs.n	8001d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d48:	f003 fca8 	bl	800569c <__errno>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20005000 	.word	0x20005000
 8001d78:	00000400 	.word	0x00000400
 8001d7c:	20000364 	.word	0x20000364
 8001d80:	20000798 	.word	0x20000798

08001d84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2102      	movs	r1, #2
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <ssd1306_Reset+0x34>)
 8001d9a:	f001 fb96 	bl	80034ca <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2101      	movs	r1, #1
 8001da2:	4808      	ldr	r0, [pc, #32]	; (8001dc4 <ssd1306_Reset+0x34>)
 8001da4:	f001 fb91 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 faef 	bl	800238c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2101      	movs	r1, #1
 8001db2:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <ssd1306_Reset+0x34>)
 8001db4:	f001 fb89 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001db8:	200a      	movs	r0, #10
 8001dba:	f000 fae7 	bl	800238c <HAL_Delay>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010c00 	.word	0x40010c00

08001dc8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <ssd1306_WriteCommand+0x40>)
 8001dd8:	f001 fb77 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <ssd1306_WriteCommand+0x44>)
 8001de2:	f001 fb72 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8001de6:	1df9      	adds	r1, r7, #7
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	2201      	movs	r2, #1
 8001dee:	4808      	ldr	r0, [pc, #32]	; (8001e10 <ssd1306_WriteCommand+0x48>)
 8001df0:	f002 f818 	bl	8003e24 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001df4:	2201      	movs	r2, #1
 8001df6:	2102      	movs	r1, #2
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <ssd1306_WriteCommand+0x40>)
 8001dfa:	f001 fb66 	bl	80034ca <HAL_GPIO_WritePin>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	200000fc 	.word	0x200000fc

08001e14 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2102      	movs	r1, #2
 8001e22:	480c      	ldr	r0, [pc, #48]	; (8001e54 <ssd1306_WriteData+0x40>)
 8001e24:	f001 fb51 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2140      	movs	r1, #64	; 0x40
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <ssd1306_WriteData+0x44>)
 8001e2e:	f001 fb4c 	bl	80034ca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <ssd1306_WriteData+0x48>)
 8001e3e:	f001 fff1 	bl	8003e24 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001e42:	2201      	movs	r2, #1
 8001e44:	2102      	movs	r1, #2
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <ssd1306_WriteData+0x40>)
 8001e48:	f001 fb3f 	bl	80034ca <HAL_GPIO_WritePin>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40010c00 	.word	0x40010c00
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	200000fc 	.word	0x200000fc

08001e60 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e64:	f7ff ff94 	bl	8001d90 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e68:	2064      	movs	r0, #100	; 0x64
 8001e6a:	f000 fa8f 	bl	800238c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f000 f9e6 	bl	8002240 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e74:	2020      	movs	r0, #32
 8001e76:	f7ff ffa7 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff ffa4 	bl	8001dc8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e80:	20b0      	movs	r0, #176	; 0xb0
 8001e82:	f7ff ffa1 	bl	8001dc8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e86:	20c8      	movs	r0, #200	; 0xc8
 8001e88:	f7ff ff9e 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff ff9b 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e92:	2010      	movs	r0, #16
 8001e94:	f7ff ff98 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e98:	2040      	movs	r0, #64	; 0x40
 8001e9a:	f7ff ff95 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e9e:	20ff      	movs	r0, #255	; 0xff
 8001ea0:	f000 f9ba 	bl	8002218 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001ea4:	20a1      	movs	r0, #161	; 0xa1
 8001ea6:	f7ff ff8f 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001eaa:	20a6      	movs	r0, #166	; 0xa6
 8001eac:	f7ff ff8c 	bl	8001dc8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001eb0:	20a8      	movs	r0, #168	; 0xa8
 8001eb2:	f7ff ff89 	bl	8001dc8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001eb6:	203f      	movs	r0, #63	; 0x3f
 8001eb8:	f7ff ff86 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ebc:	20a4      	movs	r0, #164	; 0xa4
 8001ebe:	f7ff ff83 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001ec2:	20d3      	movs	r0, #211	; 0xd3
 8001ec4:	f7ff ff80 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff ff7d 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ece:	20d5      	movs	r0, #213	; 0xd5
 8001ed0:	f7ff ff7a 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ed4:	20f0      	movs	r0, #240	; 0xf0
 8001ed6:	f7ff ff77 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001eda:	20d9      	movs	r0, #217	; 0xd9
 8001edc:	f7ff ff74 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ee0:	2022      	movs	r0, #34	; 0x22
 8001ee2:	f7ff ff71 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ee6:	20da      	movs	r0, #218	; 0xda
 8001ee8:	f7ff ff6e 	bl	8001dc8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001eec:	2012      	movs	r0, #18
 8001eee:	f7ff ff6b 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ef2:	20db      	movs	r0, #219	; 0xdb
 8001ef4:	f7ff ff68 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ef8:	2020      	movs	r0, #32
 8001efa:	f7ff ff65 	bl	8001dc8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001efe:	208d      	movs	r0, #141	; 0x8d
 8001f00:	f7ff ff62 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001f04:	2014      	movs	r0, #20
 8001f06:	f7ff ff5f 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 f998 	bl	8002240 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f000 f80f 	bl	8001f34 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f16:	f000 f82f 	bl	8001f78 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <ssd1306_Init+0xd0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <ssd1306_Init+0xd0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f26:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <ssd1306_Init+0xd0>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	711a      	strb	r2, [r3, #4]
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000778 	.word	0x20000778

08001f34 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e00d      	b.n	8001f60 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <ssd1306_Fill+0x1a>
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	e000      	b.n	8001f50 <ssd1306_Fill+0x1c>
 8001f4e:	21ff      	movs	r1, #255	; 0xff
 8001f50:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <ssd1306_Fill+0x40>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	460a      	mov	r2, r1
 8001f58:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8001f66:	d3ed      	bcc.n	8001f44 <ssd1306_Fill+0x10>
    }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	20000368 	.word	0x20000368

08001f78 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f7e:	2300      	movs	r3, #0
 8001f80:	71fb      	strb	r3, [r7, #7]
 8001f82:	e01a      	b.n	8001fba <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	3b50      	subs	r3, #80	; 0x50
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff1c 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ff19 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f96:	2010      	movs	r0, #16
 8001f98:	f7ff ff16 	bl	8001dc8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	019b      	lsls	r3, r3, #6
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <ssd1306_UpdateScreen+0x54>)
 8001faa:	4413      	add	r3, r2
 8001fac:	2182      	movs	r1, #130	; 0x82
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff30 	bl	8001e14 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	71fb      	strb	r3, [r7, #7]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b07      	cmp	r3, #7
 8001fbe:	d9e1      	bls.n	8001f84 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000368 	.word	0x20000368

08001fd0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fd0:	b490      	push	{r4, r7}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b81      	cmp	r3, #129	; 0x81
 8001fe6:	d849      	bhi.n	800207c <ssd1306_DrawPixel+0xac>
 8001fe8:	79bb      	ldrb	r3, [r7, #6]
 8001fea:	2b3f      	cmp	r3, #63	; 0x3f
 8001fec:	d846      	bhi.n	800207c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001fee:	797b      	ldrb	r3, [r7, #5]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d120      	bne.n	8002036 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	79bb      	ldrb	r3, [r7, #6]
 8001ff8:	08db      	lsrs	r3, r3, #3
 8001ffa:	b2d8      	uxtb	r0, r3
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	440b      	add	r3, r1
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <ssd1306_DrawPixel+0xb8>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	b25a      	sxtb	r2, r3
 800200e:	79bb      	ldrb	r3, [r7, #6]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	b25b      	sxtb	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b25c      	sxtb	r4, r3
 8002020:	79fa      	ldrb	r2, [r7, #7]
 8002022:	4601      	mov	r1, r0
 8002024:	460b      	mov	r3, r1
 8002026:	019b      	lsls	r3, r3, #6
 8002028:	440b      	add	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	b2e1      	uxtb	r1, r4
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <ssd1306_DrawPixel+0xb8>)
 8002032:	54d1      	strb	r1, [r2, r3]
 8002034:	e023      	b.n	800207e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002036:	79fa      	ldrb	r2, [r7, #7]
 8002038:	79bb      	ldrb	r3, [r7, #6]
 800203a:	08db      	lsrs	r3, r3, #3
 800203c:	b2d8      	uxtb	r0, r3
 800203e:	4601      	mov	r1, r0
 8002040:	460b      	mov	r3, r1
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	440b      	add	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <ssd1306_DrawPixel+0xb8>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	b25a      	sxtb	r2, r3
 8002050:	79bb      	ldrb	r3, [r7, #6]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	2101      	movs	r1, #1
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	b25b      	sxtb	r3, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	b25b      	sxtb	r3, r3
 8002062:	4013      	ands	r3, r2
 8002064:	b25c      	sxtb	r4, r3
 8002066:	79fa      	ldrb	r2, [r7, #7]
 8002068:	4601      	mov	r1, r0
 800206a:	460b      	mov	r3, r1
 800206c:	019b      	lsls	r3, r3, #6
 800206e:	440b      	add	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	b2e1      	uxtb	r1, r4
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <ssd1306_DrawPixel+0xb8>)
 8002078:	54d1      	strb	r1, [r2, r3]
 800207a:	e000      	b.n	800207e <ssd1306_DrawPixel+0xae>
        return;
 800207c:	bf00      	nop
    }
}
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bc90      	pop	{r4, r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000368 	.word	0x20000368

0800208c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800208c:	b590      	push	{r4, r7, lr}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	4604      	mov	r4, r0
 8002094:	1d38      	adds	r0, r7, #4
 8002096:	e880 0006 	stmia.w	r0, {r1, r2}
 800209a:	461a      	mov	r2, r3
 800209c:	4623      	mov	r3, r4
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	4613      	mov	r3, r2
 80020a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	2b1f      	cmp	r3, #31
 80020a8:	d902      	bls.n	80020b0 <ssd1306_WriteChar+0x24>
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b7e      	cmp	r3, #126	; 0x7e
 80020ae:	d901      	bls.n	80020b4 <ssd1306_WriteChar+0x28>
        return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e06d      	b.n	8002190 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <ssd1306_WriteChar+0x10c>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	793b      	ldrb	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	2b82      	cmp	r3, #130	; 0x82
 80020c0:	dc06      	bgt.n	80020d0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <ssd1306_WriteChar+0x10c>)
 80020c4:	885b      	ldrh	r3, [r3, #2]
 80020c6:	461a      	mov	r2, r3
 80020c8:	797b      	ldrb	r3, [r7, #5]
 80020ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	dd01      	ble.n	80020d4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e05d      	b.n	8002190 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e04c      	b.n	8002174 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3b20      	subs	r3, #32
 80020e0:	7979      	ldrb	r1, [r7, #5]
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	440b      	add	r3, r1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	e034      	b.n	8002164 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020fa:	697a      	ldr	r2, [r7, #20]
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <ssd1306_WriteChar+0x10c>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	b2d8      	uxtb	r0, r3
 8002118:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <ssd1306_WriteChar+0x10c>)
 800211a:	885b      	ldrh	r3, [r3, #2]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	7bba      	ldrb	r2, [r7, #14]
 8002128:	4619      	mov	r1, r3
 800212a:	f7ff ff51 	bl	8001fd0 <ssd1306_DrawPixel>
 800212e:	e016      	b.n	800215e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <ssd1306_WriteChar+0x10c>)
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4413      	add	r3, r2
 800213c:	b2d8      	uxtb	r0, r3
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <ssd1306_WriteChar+0x10c>)
 8002140:	885b      	ldrh	r3, [r3, #2]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4413      	add	r3, r2
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	f7ff ff39 	bl	8001fd0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3301      	adds	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	793b      	ldrb	r3, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4293      	cmp	r3, r2
 800216c:	d3c5      	bcc.n	80020fa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	461a      	mov	r2, r3
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	4293      	cmp	r3, r2
 800217c:	d3ad      	bcc.n	80020da <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <ssd1306_WriteChar+0x10c>)
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	793b      	ldrb	r3, [r7, #4]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4413      	add	r3, r2
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <ssd1306_WriteChar+0x10c>)
 800218c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3724      	adds	r7, #36	; 0x24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	20000778 	.word	0x20000778

0800219c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	1d38      	adds	r0, r7, #4
 80021a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80021aa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80021ac:	e012      	b.n	80021d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	7818      	ldrb	r0, [r3, #0]
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	ca06      	ldmia	r2, {r1, r2}
 80021b8:	f7ff ff68 	bl	800208c <ssd1306_WriteChar>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d002      	beq.n	80021ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	e008      	b.n	80021e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e8      	bne.n	80021ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <ssd1306_SetCursor+0x2c>)
 80021fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002200:	79bb      	ldrb	r3, [r7, #6]
 8002202:	b29a      	uxth	r2, r3
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <ssd1306_SetCursor+0x2c>)
 8002206:	805a      	strh	r2, [r3, #2]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000778 	.word	0x20000778

08002218 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002222:	2381      	movs	r3, #129	; 0x81
 8002224:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fdcd 	bl	8001dc8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fdc9 	bl	8001dc8 <ssd1306_WriteCommand>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002250:	23af      	movs	r3, #175	; 0xaf
 8002252:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <ssd1306_SetDisplayOn+0x38>)
 8002256:	2201      	movs	r2, #1
 8002258:	715a      	strb	r2, [r3, #5]
 800225a:	e004      	b.n	8002266 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800225c:	23ae      	movs	r3, #174	; 0xae
 800225e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <ssd1306_SetDisplayOn+0x38>)
 8002262:	2200      	movs	r2, #0
 8002264:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fdad 	bl	8001dc8 <ssd1306_WriteCommand>
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000778 	.word	0x20000778

0800227c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800227c:	f7ff fd82 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002288:	e002      	b.n	8002290 <LoopCopyDataInit>

0800228a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800228c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800228e:	3304      	adds	r3, #4

08002290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002294:	d3f9      	bcc.n	800228a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002298:	4c09      	ldr	r4, [pc, #36]	; (80022c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800229c:	e001      	b.n	80022a2 <LoopFillZerobss>

0800229e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800229e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a0:	3204      	adds	r2, #4

080022a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a4:	d3fb      	bcc.n	800229e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022a6:	f003 f9ff 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022aa:	f7ff f8d9 	bl	8001460 <main>
  bx lr
 80022ae:	4770      	bx	lr
  ldr r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80022b8:	0800a154 	.word	0x0800a154
  ldr r2, =_sbss
 80022bc:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80022c0:	20000794 	.word	0x20000794

080022c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c4:	e7fe      	b.n	80022c4 <ADC1_2_IRQHandler>
	...

080022c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_Init+0x28>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a07      	ldr	r2, [pc, #28]	; (80022f0 <HAL_Init+0x28>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d8:	2003      	movs	r0, #3
 80022da:	f000 fc77 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022de:	200f      	movs	r0, #15
 80022e0:	f000 f808 	bl	80022f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e4:	f7ff fb50 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40022000 	.word	0x40022000

080022f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_InitTick+0x54>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x58>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fc8f 	bl	8002c36 <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e00e      	b.n	8002340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b0f      	cmp	r3, #15
 8002326:	d80a      	bhi.n	800233e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002328:	2200      	movs	r2, #0
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f000 fc57 	bl	8002be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_InitTick+0x5c>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000020 	.word	0x20000020
 800234c:	20000050 	.word	0x20000050
 8002350:	2000004c 	.word	0x2000004c

08002354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x1c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	461a      	mov	r2, r3
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_IncTick+0x20>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4413      	add	r3, r2
 8002364:	4a03      	ldr	r2, [pc, #12]	; (8002374 <HAL_IncTick+0x20>)
 8002366:	6013      	str	r3, [r2, #0]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000050 	.word	0x20000050
 8002374:	20000780 	.word	0x20000780

08002378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return uwTick;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <HAL_GetTick+0x10>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000780 	.word	0x20000780

0800238c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002394:	f7ff fff0 	bl	8002378 <HAL_GetTick>
 8002398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d005      	beq.n	80023b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_Delay+0x44>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b2:	bf00      	nop
 80023b4:	f7ff ffe0 	bl	8002378 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d8f7      	bhi.n	80023b4 <HAL_Delay+0x28>
  {
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000050 	.word	0x20000050

080023d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0ed      	b.n	80025c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fafa 	bl	80019ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002408:	f7ff ffb6 	bl	8002378 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800240e:	e012      	b.n	8002436 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002410:	f7ff ffb2 	bl	8002378 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b0a      	cmp	r3, #10
 800241c:	d90b      	bls.n	8002436 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2205      	movs	r2, #5
 800242e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0c5      	b.n	80025c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0e5      	beq.n	8002410 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0202 	bic.w	r2, r2, #2
 8002452:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002454:	f7ff ff90 	bl	8002378 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800245a:	e012      	b.n	8002482 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800245c:	f7ff ff8c 	bl	8002378 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b0a      	cmp	r3, #10
 8002468:	d90b      	bls.n	8002482 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2205      	movs	r2, #5
 800247a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e09f      	b.n	80025c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e5      	bne.n	800245c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7e1b      	ldrb	r3, [r3, #24]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d108      	bne.n	80024aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e007      	b.n	80024ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	7e5b      	ldrb	r3, [r3, #25]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d108      	bne.n	80024d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e007      	b.n	80024e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	7e9b      	ldrb	r3, [r3, #26]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	e007      	b.n	800250e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0220 	bic.w	r2, r2, #32
 800250c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7edb      	ldrb	r3, [r3, #27]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d108      	bne.n	8002528 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0210 	bic.w	r2, r2, #16
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e007      	b.n	8002538 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0210 	orr.w	r2, r2, #16
 8002536:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7f1b      	ldrb	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d108      	bne.n	8002552 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0208 	orr.w	r2, r2, #8
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e007      	b.n	8002562 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0208 	bic.w	r2, r2, #8
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7f5b      	ldrb	r3, [r3, #29]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0204 	orr.w	r2, r2, #4
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	e007      	b.n	800258c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	ea42 0103 	orr.w	r1, r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	1e5a      	subs	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b087      	sub	sp, #28
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d003      	beq.n	80025f0 <HAL_CAN_ConfigFilter+0x26>
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	f040 80aa 	bne.w	8002744 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	2201      	movs	r2, #1
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d123      	bne.n	8002672 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43db      	mvns	r3, r3
 8002634:	401a      	ands	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800264c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3248      	adds	r2, #72	; 0x48
 8002652:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002666:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002668:	6979      	ldr	r1, [r7, #20]
 800266a:	3348      	adds	r3, #72	; 0x48
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d122      	bne.n	80026c0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800269a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3248      	adds	r2, #72	; 0x48
 80026a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	3348      	adds	r3, #72	; 0x48
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026da:	e007      	b.n	80026ec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002706:	e007      	b.n	8002718 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002736:	f023 0201 	bic.w	r2, r3, #1
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e006      	b.n	8002752 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d12e      	bne.n	80027ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002788:	f7ff fdf6 	bl	8002378 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800278e:	e012      	b.n	80027b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002790:	f7ff fdf2 	bl	8002378 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b0a      	cmp	r3, #10
 800279c:	d90b      	bls.n	80027b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2205      	movs	r2, #5
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e012      	b.n	80027dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e5      	bne.n	8002790 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e006      	b.n	80027dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
  }
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002802:	7ffb      	ldrb	r3, [r7, #31]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d003      	beq.n	8002810 <HAL_CAN_AddTxMessage+0x2c>
 8002808:	7ffb      	ldrb	r3, [r7, #31]
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 80ad 	bne.w	800296a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002820:	2b00      	cmp	r3, #0
 8002822:	d105      	bne.n	8002830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 8095 	beq.w	800295a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	0e1b      	lsrs	r3, r3, #24
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800283a:	2201      	movs	r2, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	409a      	lsls	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	6809      	ldr	r1, [r1, #0]
 800285a:	431a      	orrs	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3318      	adds	r3, #24
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	440b      	add	r3, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	e00f      	b.n	8002888 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002872:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800287c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3318      	adds	r3, #24
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	440b      	add	r3, r1
 8002886:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3318      	adds	r3, #24
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	7d1b      	ldrb	r3, [r3, #20]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d111      	bne.n	80028c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	3318      	adds	r3, #24
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	4413      	add	r3, r2
 80028b0:	3304      	adds	r3, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	6811      	ldr	r1, [r2, #0]
 80028b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3318      	adds	r3, #24
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	440b      	add	r3, r1
 80028c4:	3304      	adds	r3, #4
 80028c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3307      	adds	r3, #7
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	061a      	lsls	r2, r3, #24
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3306      	adds	r3, #6
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3305      	adds	r3, #5
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	4313      	orrs	r3, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	3204      	adds	r2, #4
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	4610      	mov	r0, r2
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	6811      	ldr	r1, [r2, #0]
 80028f0:	ea43 0200 	orr.w	r2, r3, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80028fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3303      	adds	r3, #3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	061a      	lsls	r2, r3, #24
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3302      	adds	r3, #2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	4313      	orrs	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	4610      	mov	r0, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6811      	ldr	r1, [r2, #0]
 8002926:	ea43 0200 	orr.w	r2, r3, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	440b      	add	r3, r1
 8002930:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002934:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3318      	adds	r3, #24
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	4413      	add	r3, r2
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3318      	adds	r3, #24
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e00e      	b.n	8002978 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e006      	b.n	8002978 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
  }
}
 8002978:	4618      	mov	r0, r3
 800297a:	3724      	adds	r7, #36	; 0x24
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002994:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002996:	7afb      	ldrb	r3, [r7, #11]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d002      	beq.n	80029a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800299c:	7afb      	ldrb	r3, [r7, #11]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d11d      	bne.n	80029de <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80029de:	68fb      	ldr	r3, [r7, #12]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d002      	beq.n	8002a08 <HAL_CAN_ActivateNotification+0x1e>
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d109      	bne.n	8002a1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6959      	ldr	r1, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4906      	ldr	r1, [pc, #24]	; (8002acc <__NVIC_EnableIRQ+0x34>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	db0a      	blt.n	8002afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <__NVIC_SetPriority+0x4c>)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	0112      	lsls	r2, r2, #4
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	440b      	add	r3, r1
 8002af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af8:	e00a      	b.n	8002b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	4908      	ldr	r1, [pc, #32]	; (8002b20 <__NVIC_SetPriority+0x50>)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	3b04      	subs	r3, #4
 8002b08:	0112      	lsls	r2, r2, #4
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	761a      	strb	r2, [r3, #24]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	e000e100 	.word	0xe000e100
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	; 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	bf28      	it	cs
 8002b42:	2304      	movcs	r3, #4
 8002b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2b06      	cmp	r3, #6
 8002b4c:	d902      	bls.n	8002b54 <NVIC_EncodePriority+0x30>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3b03      	subs	r3, #3
 8002b52:	e000      	b.n	8002b56 <NVIC_EncodePriority+0x32>
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	401a      	ands	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	43d9      	mvns	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	4313      	orrs	r3, r2
         );
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3724      	adds	r7, #36	; 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff90 	bl	8002ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff2d 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff42 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff90 	bl	8002b24 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5f 	bl	8002ad0 <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff35 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e043      	b.n	8002cee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_DMA_Init+0xa8>)
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a22      	ldr	r2, [pc, #136]	; (8002cfc <HAL_DMA_Init+0xac>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	009a      	lsls	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1f      	ldr	r2, [pc, #124]	; (8002d00 <HAL_DMA_Init+0xb0>)
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	bffdfff8 	.word	0xbffdfff8
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	40020000 	.word	0x40020000

08002d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Start_IT+0x20>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e04b      	b.n	8002dbc <HAL_DMA_Start_IT+0xb8>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d13a      	bne.n	8002dae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f9eb 	bl	8003138 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d008      	beq.n	8002d7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 020e 	orr.w	r2, r2, #14
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e00f      	b.n	8002d9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0204 	bic.w	r2, r2, #4
 8002d8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 020a 	orr.w	r2, r2, #10
 8002d9a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e005      	b.n	8002dba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d008      	beq.n	8002dee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e020      	b.n	8002e30 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020e 	bic.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d005      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e051      	b.n	8002f04 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <HAL_DMA_Abort_IT+0xd4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d029      	beq.n	8002ede <HAL_DMA_Abort_IT+0xa2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	; (8002f14 <HAL_DMA_Abort_IT+0xd8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_Abort_IT+0x9e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_DMA_Abort_IT+0xdc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01a      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x98>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DMA_Abort_IT+0xe0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d012      	beq.n	8002ece <HAL_DMA_Abort_IT+0x92>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <HAL_DMA_Abort_IT+0xe4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_DMA_Abort_IT+0x8c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_DMA_Abort_IT+0xe8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d102      	bne.n	8002ec2 <HAL_DMA_Abort_IT+0x86>
 8002ebc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ec0:	e00e      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002ec2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ec6:	e00b      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ecc:	e008      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	e005      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ed8:	e002      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002eda:	2310      	movs	r3, #16
 8002edc:	e000      	b.n	8002ee0 <HAL_DMA_Abort_IT+0xa4>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_DMA_Abort_IT+0xec>)
 8002ee2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
    } 
  }
  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40020008 	.word	0x40020008
 8002f14:	4002001c 	.word	0x4002001c
 8002f18:	40020030 	.word	0x40020030
 8002f1c:	40020044 	.word	0x40020044
 8002f20:	40020058 	.word	0x40020058
 8002f24:	4002006c 	.word	0x4002006c
 8002f28:	40020000 	.word	0x40020000

08002f2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	2204      	movs	r2, #4
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d04f      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0xc8>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d107      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0204 	bic.w	r2, r2, #4
 8002f7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a66      	ldr	r2, [pc, #408]	; (800311c <HAL_DMA_IRQHandler+0x1f0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d029      	beq.n	8002fda <HAL_DMA_IRQHandler+0xae>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a65      	ldr	r2, [pc, #404]	; (8003120 <HAL_DMA_IRQHandler+0x1f4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d022      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xaa>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a63      	ldr	r2, [pc, #396]	; (8003124 <HAL_DMA_IRQHandler+0x1f8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01a      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0xa4>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a62      	ldr	r2, [pc, #392]	; (8003128 <HAL_DMA_IRQHandler+0x1fc>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d012      	beq.n	8002fca <HAL_DMA_IRQHandler+0x9e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a60      	ldr	r2, [pc, #384]	; (800312c <HAL_DMA_IRQHandler+0x200>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x98>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	; (8003130 <HAL_DMA_IRQHandler+0x204>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d102      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x92>
 8002fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fbc:	e00e      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fc2:	e00b      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fc8:	e008      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fce:	e005      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd4:	e002      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fd6:	2340      	movs	r3, #64	; 0x40
 8002fd8:	e000      	b.n	8002fdc <HAL_DMA_IRQHandler+0xb0>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	4a55      	ldr	r2, [pc, #340]	; (8003134 <HAL_DMA_IRQHandler+0x208>)
 8002fde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8094 	beq.w	8003112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ff2:	e08e      	b.n	8003112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d056      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x186>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d051      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020a 	bic.w	r2, r2, #10
 800302a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a38      	ldr	r2, [pc, #224]	; (800311c <HAL_DMA_IRQHandler+0x1f0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d029      	beq.n	8003092 <HAL_DMA_IRQHandler+0x166>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a37      	ldr	r2, [pc, #220]	; (8003120 <HAL_DMA_IRQHandler+0x1f4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <HAL_DMA_IRQHandler+0x162>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a35      	ldr	r2, [pc, #212]	; (8003124 <HAL_DMA_IRQHandler+0x1f8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01a      	beq.n	8003088 <HAL_DMA_IRQHandler+0x15c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a34      	ldr	r2, [pc, #208]	; (8003128 <HAL_DMA_IRQHandler+0x1fc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d012      	beq.n	8003082 <HAL_DMA_IRQHandler+0x156>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a32      	ldr	r2, [pc, #200]	; (800312c <HAL_DMA_IRQHandler+0x200>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00a      	beq.n	800307c <HAL_DMA_IRQHandler+0x150>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a31      	ldr	r2, [pc, #196]	; (8003130 <HAL_DMA_IRQHandler+0x204>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <HAL_DMA_IRQHandler+0x14a>
 8003070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003074:	e00e      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 8003076:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800307a:	e00b      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 800307c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003080:	e008      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 8003082:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003086:	e005      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 8003088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800308c:	e002      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 800308e:	2320      	movs	r3, #32
 8003090:	e000      	b.n	8003094 <HAL_DMA_IRQHandler+0x168>
 8003092:	2302      	movs	r3, #2
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <HAL_DMA_IRQHandler+0x208>)
 8003096:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d034      	beq.n	8003112 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030b0:	e02f      	b.n	8003112 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2208      	movs	r2, #8
 80030b8:	409a      	lsls	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d028      	beq.n	8003114 <HAL_DMA_IRQHandler+0x1e8>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d023      	beq.n	8003114 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020e 	bic.w	r2, r2, #14
 80030da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
    }
  }
  return;
 8003112:	bf00      	nop
 8003114:	bf00      	nop
}
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40020008 	.word	0x40020008
 8003120:	4002001c 	.word	0x4002001c
 8003124:	40020030 	.word	0x40020030
 8003128:	40020044 	.word	0x40020044
 800312c:	40020058 	.word	0x40020058
 8003130:	4002006c 	.word	0x4002006c
 8003134:	40020000 	.word	0x40020000

08003138 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2101      	movs	r1, #1
 8003150:	fa01 f202 	lsl.w	r2, r1, r2
 8003154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b10      	cmp	r3, #16
 8003164:	d108      	bne.n	8003178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003176:	e007      	b.n	8003188 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
	...

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b08b      	sub	sp, #44	; 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	e169      	b.n	800347c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a8:	2201      	movs	r2, #1
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8158 	bne.w	8003476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4a9a      	ldr	r2, [pc, #616]	; (8003434 <HAL_GPIO_Init+0x2a0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d05e      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031d0:	4a98      	ldr	r2, [pc, #608]	; (8003434 <HAL_GPIO_Init+0x2a0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d875      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031d6:	4a98      	ldr	r2, [pc, #608]	; (8003438 <HAL_GPIO_Init+0x2a4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d058      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031dc:	4a96      	ldr	r2, [pc, #600]	; (8003438 <HAL_GPIO_Init+0x2a4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d86f      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031e2:	4a96      	ldr	r2, [pc, #600]	; (800343c <HAL_GPIO_Init+0x2a8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d052      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031e8:	4a94      	ldr	r2, [pc, #592]	; (800343c <HAL_GPIO_Init+0x2a8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d869      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031ee:	4a94      	ldr	r2, [pc, #592]	; (8003440 <HAL_GPIO_Init+0x2ac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d04c      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 80031f4:	4a92      	ldr	r2, [pc, #584]	; (8003440 <HAL_GPIO_Init+0x2ac>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d863      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 80031fa:	4a92      	ldr	r2, [pc, #584]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d046      	beq.n	800328e <HAL_GPIO_Init+0xfa>
 8003200:	4a90      	ldr	r2, [pc, #576]	; (8003444 <HAL_GPIO_Init+0x2b0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d85d      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 8003206:	2b12      	cmp	r3, #18
 8003208:	d82a      	bhi.n	8003260 <HAL_GPIO_Init+0xcc>
 800320a:	2b12      	cmp	r3, #18
 800320c:	d859      	bhi.n	80032c2 <HAL_GPIO_Init+0x12e>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_GPIO_Init+0x80>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	0800328f 	.word	0x0800328f
 8003218:	08003269 	.word	0x08003269
 800321c:	0800327b 	.word	0x0800327b
 8003220:	080032bd 	.word	0x080032bd
 8003224:	080032c3 	.word	0x080032c3
 8003228:	080032c3 	.word	0x080032c3
 800322c:	080032c3 	.word	0x080032c3
 8003230:	080032c3 	.word	0x080032c3
 8003234:	080032c3 	.word	0x080032c3
 8003238:	080032c3 	.word	0x080032c3
 800323c:	080032c3 	.word	0x080032c3
 8003240:	080032c3 	.word	0x080032c3
 8003244:	080032c3 	.word	0x080032c3
 8003248:	080032c3 	.word	0x080032c3
 800324c:	080032c3 	.word	0x080032c3
 8003250:	080032c3 	.word	0x080032c3
 8003254:	080032c3 	.word	0x080032c3
 8003258:	08003271 	.word	0x08003271
 800325c:	08003285 	.word	0x08003285
 8003260:	4a79      	ldr	r2, [pc, #484]	; (8003448 <HAL_GPIO_Init+0x2b4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d013      	beq.n	800328e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003266:	e02c      	b.n	80032c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	623b      	str	r3, [r7, #32]
          break;
 800326e:	e029      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	3304      	adds	r3, #4
 8003276:	623b      	str	r3, [r7, #32]
          break;
 8003278:	e024      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	3308      	adds	r3, #8
 8003280:	623b      	str	r3, [r7, #32]
          break;
 8003282:	e01f      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	330c      	adds	r3, #12
 800328a:	623b      	str	r3, [r7, #32]
          break;
 800328c:	e01a      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d102      	bne.n	800329c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003296:	2304      	movs	r3, #4
 8003298:	623b      	str	r3, [r7, #32]
          break;
 800329a:	e013      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d105      	bne.n	80032b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a4:	2308      	movs	r3, #8
 80032a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	611a      	str	r2, [r3, #16]
          break;
 80032ae:	e009      	b.n	80032c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b0:	2308      	movs	r3, #8
 80032b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	615a      	str	r2, [r3, #20]
          break;
 80032ba:	e003      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032bc:	2300      	movs	r3, #0
 80032be:	623b      	str	r3, [r7, #32]
          break;
 80032c0:	e000      	b.n	80032c4 <HAL_GPIO_Init+0x130>
          break;
 80032c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2bff      	cmp	r3, #255	; 0xff
 80032c8:	d801      	bhi.n	80032ce <HAL_GPIO_Init+0x13a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	e001      	b.n	80032d2 <HAL_GPIO_Init+0x13e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2bff      	cmp	r3, #255	; 0xff
 80032d8:	d802      	bhi.n	80032e0 <HAL_GPIO_Init+0x14c>
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	e002      	b.n	80032e6 <HAL_GPIO_Init+0x152>
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	3b08      	subs	r3, #8
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	210f      	movs	r1, #15
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	fa01 f303 	lsl.w	r3, r1, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	401a      	ands	r2, r3
 80032f8:	6a39      	ldr	r1, [r7, #32]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80b1 	beq.w	8003476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003314:	4b4d      	ldr	r3, [pc, #308]	; (800344c <HAL_GPIO_Init+0x2b8>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a4c      	ldr	r2, [pc, #304]	; (800344c <HAL_GPIO_Init+0x2b8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b4a      	ldr	r3, [pc, #296]	; (800344c <HAL_GPIO_Init+0x2b8>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800332c:	4a48      	ldr	r2, [pc, #288]	; (8003450 <HAL_GPIO_Init+0x2bc>)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	3302      	adds	r3, #2
 8003334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220f      	movs	r2, #15
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a40      	ldr	r2, [pc, #256]	; (8003454 <HAL_GPIO_Init+0x2c0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d013      	beq.n	8003380 <HAL_GPIO_Init+0x1ec>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3f      	ldr	r2, [pc, #252]	; (8003458 <HAL_GPIO_Init+0x2c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00d      	beq.n	800337c <HAL_GPIO_Init+0x1e8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3e      	ldr	r2, [pc, #248]	; (800345c <HAL_GPIO_Init+0x2c8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <HAL_GPIO_Init+0x1e4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <HAL_GPIO_Init+0x2cc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_GPIO_Init+0x1e0>
 8003370:	2303      	movs	r3, #3
 8003372:	e006      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003374:	2304      	movs	r3, #4
 8003376:	e004      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003378:	2302      	movs	r3, #2
 800337a:	e002      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_GPIO_Init+0x1ee>
 8003380:	2300      	movs	r3, #0
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	f002 0203 	and.w	r2, r2, #3
 8003388:	0092      	lsls	r2, r2, #2
 800338a:	4093      	lsls	r3, r2
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003392:	492f      	ldr	r1, [pc, #188]	; (8003450 <HAL_GPIO_Init+0x2bc>)
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	089b      	lsrs	r3, r3, #2
 8003398:	3302      	adds	r3, #2
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033ac:	4b2d      	ldr	r3, [pc, #180]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	492c      	ldr	r1, [pc, #176]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	4928      	ldr	r1, [pc, #160]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d006      	beq.n	80033e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4922      	ldr	r1, [pc, #136]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	60cb      	str	r3, [r1, #12]
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	491e      	ldr	r1, [pc, #120]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d006      	beq.n	800340a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4918      	ldr	r1, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
 8003408:	e006      	b.n	8003418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	43db      	mvns	r3, r3
 8003412:	4914      	ldr	r1, [pc, #80]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003414:	4013      	ands	r3, r2
 8003416:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d021      	beq.n	8003468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_GPIO_Init+0x2d0>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e021      	b.n	8003476 <HAL_GPIO_Init+0x2e2>
 8003432:	bf00      	nop
 8003434:	10320000 	.word	0x10320000
 8003438:	10310000 	.word	0x10310000
 800343c:	10220000 	.word	0x10220000
 8003440:	10210000 	.word	0x10210000
 8003444:	10120000 	.word	0x10120000
 8003448:	10110000 	.word	0x10110000
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	40010800 	.word	0x40010800
 8003458:	40010c00 	.word	0x40010c00
 800345c:	40011000 	.word	0x40011000
 8003460:	40011400 	.word	0x40011400
 8003464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_GPIO_Init+0x304>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	4909      	ldr	r1, [pc, #36]	; (8003498 <HAL_GPIO_Init+0x304>)
 8003472:	4013      	ands	r3, r2
 8003474:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	3301      	adds	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	f47f ae8e 	bne.w	80031a8 <HAL_GPIO_Init+0x14>
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	372c      	adds	r7, #44	; 0x2c
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40010400 	.word	0x40010400

0800349c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	807b      	strh	r3, [r7, #2]
 80034d6:	4613      	mov	r3, r2
 80034d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034da:	787b      	ldrb	r3, [r7, #1]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e0:	887a      	ldrh	r2, [r7, #2]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034e6:	e003      	b.n	80034f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	041a      	lsls	r2, r3, #16
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	611a      	str	r2, [r3, #16]
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e272      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8087 	beq.w	800362a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800351c:	4b92      	ldr	r3, [pc, #584]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b04      	cmp	r3, #4
 8003526:	d00c      	beq.n	8003542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003528:	4b8f      	ldr	r3, [pc, #572]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d112      	bne.n	800355a <HAL_RCC_OscConfig+0x5e>
 8003534:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d10b      	bne.n	800355a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003542:	4b89      	ldr	r3, [pc, #548]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d06c      	beq.n	8003628 <HAL_RCC_OscConfig+0x12c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d168      	bne.n	8003628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e24c      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x76>
 8003564:	4b80      	ldr	r3, [pc, #512]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7f      	ldr	r2, [pc, #508]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	e02e      	b.n	80035d0 <HAL_RCC_OscConfig+0xd4>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x98>
 800357a:	4b7b      	ldr	r3, [pc, #492]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7a      	ldr	r2, [pc, #488]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b78      	ldr	r3, [pc, #480]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a77      	ldr	r2, [pc, #476]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800358c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e01d      	b.n	80035d0 <HAL_RCC_OscConfig+0xd4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0xbc>
 800359e:	4b72      	ldr	r3, [pc, #456]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a71      	ldr	r2, [pc, #452]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e00b      	b.n	80035d0 <HAL_RCC_OscConfig+0xd4>
 80035b8:	4b6b      	ldr	r3, [pc, #428]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6a      	ldr	r2, [pc, #424]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b68      	ldr	r3, [pc, #416]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a67      	ldr	r2, [pc, #412]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fece 	bl	8002378 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe feca 	bl	8002378 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e200      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0xe4>
 80035fe:	e014      	b.n	800362a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe feba 	bl	8002378 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe feb6 	bl	8002378 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1ec      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x10c>
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d063      	beq.n	80036fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003636:	4b4c      	ldr	r3, [pc, #304]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 030c 	and.w	r3, r3, #12
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003642:	4b49      	ldr	r3, [pc, #292]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b08      	cmp	r3, #8
 800364c:	d11c      	bne.n	8003688 <HAL_RCC_OscConfig+0x18c>
 800364e:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d116      	bne.n	8003688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	4b43      	ldr	r3, [pc, #268]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_RCC_OscConfig+0x176>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e1c0      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4939      	ldr	r1, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	e03a      	b.n	80036fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d020      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <HAL_RCC_OscConfig+0x270>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe fe6f 	bl	8002378 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe fe6b 	bl	8002378 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1a1      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	4927      	ldr	r1, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]
 80036d0:	e015      	b.n	80036fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b26      	ldr	r3, [pc, #152]	; (800376c <HAL_RCC_OscConfig+0x270>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe fe4e 	bl	8002378 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e0:	f7fe fe4a 	bl	8002378 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e180      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03a      	beq.n	8003780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d019      	beq.n	8003746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <HAL_RCC_OscConfig+0x274>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003718:	f7fe fe2e 	bl	8002378 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003720:	f7fe fe2a 	bl	8002378 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e160      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x26c>)
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800373e:	2001      	movs	r0, #1
 8003740:	f000 face 	bl	8003ce0 <RCC_Delay>
 8003744:	e01c      	b.n	8003780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <HAL_RCC_OscConfig+0x274>)
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fe14 	bl	8002378 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003752:	e00f      	b.n	8003774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe fe10 	bl	8002378 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d908      	bls.n	8003774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e146      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	42420000 	.word	0x42420000
 8003770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	4b92      	ldr	r3, [pc, #584]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1e9      	bne.n	8003754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80a6 	beq.w	80038da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800378e:	2300      	movs	r3, #0
 8003790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003792:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10d      	bne.n	80037ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4a87      	ldr	r2, [pc, #540]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	61d3      	str	r3, [r2, #28]
 80037aa:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ba:	4b82      	ldr	r3, [pc, #520]	; (80039c4 <HAL_RCC_OscConfig+0x4c8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d118      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c6:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCC_OscConfig+0x4c8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a7e      	ldr	r2, [pc, #504]	; (80039c4 <HAL_RCC_OscConfig+0x4c8>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d2:	f7fe fdd1 	bl	8002378 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7fe fdcd 	bl	8002378 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b64      	cmp	r3, #100	; 0x64
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e103      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	4b75      	ldr	r3, [pc, #468]	; (80039c4 <HAL_RCC_OscConfig+0x4c8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d106      	bne.n	800380e <HAL_RCC_OscConfig+0x312>
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a6e      	ldr	r2, [pc, #440]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	e02d      	b.n	800386a <HAL_RCC_OscConfig+0x36e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x334>
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a69      	ldr	r2, [pc, #420]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6213      	str	r3, [r2, #32]
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a66      	ldr	r2, [pc, #408]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	6213      	str	r3, [r2, #32]
 800382e:	e01c      	b.n	800386a <HAL_RCC_OscConfig+0x36e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d10c      	bne.n	8003852 <HAL_RCC_OscConfig+0x356>
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a60      	ldr	r2, [pc, #384]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	4b5e      	ldr	r3, [pc, #376]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6213      	str	r3, [r2, #32]
 8003850:	e00b      	b.n	800386a <HAL_RCC_OscConfig+0x36e>
 8003852:	4b5b      	ldr	r3, [pc, #364]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4a5a      	ldr	r2, [pc, #360]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003858:	f023 0301 	bic.w	r3, r3, #1
 800385c:	6213      	str	r3, [r2, #32]
 800385e:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	4a57      	ldr	r2, [pc, #348]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003864:	f023 0304 	bic.w	r3, r3, #4
 8003868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d015      	beq.n	800389e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fd81 	bl	8002378 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fd7d 	bl	8002378 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0b1      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003890:	4b4b      	ldr	r3, [pc, #300]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0ee      	beq.n	800387a <HAL_RCC_OscConfig+0x37e>
 800389c:	e014      	b.n	80038c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe fd6b 	bl	8002378 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fd67 	bl	8002378 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e09b      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038bc:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1ee      	bne.n	80038a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d105      	bne.n	80038da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ce:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8087 	beq.w	80039f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d061      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d146      	bne.n	8003986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f8:	4b33      	ldr	r3, [pc, #204]	; (80039c8 <HAL_RCC_OscConfig+0x4cc>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fe fd3b 	bl	8002378 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fe fd37 	bl	8002378 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e06d      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003918:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d108      	bne.n	8003940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4921      	ldr	r1, [pc, #132]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003940:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a19      	ldr	r1, [r3, #32]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	430b      	orrs	r3, r1
 8003952:	491b      	ldr	r1, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fe fd0b 	bl	8002378 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe fd07 	bl	8002378 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e03d      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x46a>
 8003984:	e035      	b.n	80039f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe fcf4 	bl	8002378 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003994:	f7fe fcf0 	bl	8002378 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e026      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x498>
 80039b2:	e01e      	b.n	80039f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e019      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40007000 	.word	0x40007000
 80039c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x500>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0d0      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d910      	bls.n	8003a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	4965      	ldr	r1, [pc, #404]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a32:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d001      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0b8      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d020      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a5c:	4b59      	ldr	r3, [pc, #356]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a74:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	4a52      	ldr	r2, [pc, #328]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a80:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	494d      	ldr	r1, [pc, #308]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d040      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d115      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07f      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e073      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e06b      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4936      	ldr	r1, [pc, #216]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003af0:	f7fe fc42 	bl	8002378 <HAL_GetTick>
 8003af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af8:	f7fe fc3e 	bl	8002378 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e053      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 020c 	and.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d1eb      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d210      	bcs.n	8003b50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f023 0207 	bic.w	r2, r3, #7
 8003b36:	4922      	ldr	r1, [pc, #136]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e032      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4916      	ldr	r1, [pc, #88]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	490e      	ldr	r1, [pc, #56]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b8e:	f000 f821 	bl	8003bd4 <HAL_RCC_GetSysClockFreq>
 8003b92:	4602      	mov	r2, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	490a      	ldr	r1, [pc, #40]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	5ccb      	ldrb	r3, [r1, r3]
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x1cc>)
 8003ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003baa:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fba0 	bl	80022f4 <HAL_InitTick>

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08006118 	.word	0x08006118
 8003bcc:	20000020 	.word	0x20000020
 8003bd0:	2000004c 	.word	0x2000004c

08003bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x30>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x36>
 8003c02:	e027      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c06:	613b      	str	r3, [r7, #16]
      break;
 8003c08:	e027      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	0c9b      	lsrs	r3, r3, #18
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c14:	5cd3      	ldrb	r3, [r2, r3]
 8003c16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d010      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	0c5b      	lsrs	r3, r3, #17
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	4a11      	ldr	r2, [pc, #68]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c36:	fb03 f202 	mul.w	r2, r3, r2
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e004      	b.n	8003c4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	613b      	str	r3, [r7, #16]
      break;
 8003c52:	e002      	b.n	8003c5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c56:	613b      	str	r3, [r7, #16]
      break;
 8003c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5a:	693b      	ldr	r3, [r7, #16]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	007a1200 	.word	0x007a1200
 8003c70:	0800a104 	.word	0x0800a104
 8003c74:	0800a114 	.word	0x0800a114
 8003c78:	003d0900 	.word	0x003d0900

08003c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b02      	ldr	r3, [pc, #8]	; (8003c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	20000020 	.word	0x20000020

08003c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c94:	f7ff fff2 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4903      	ldr	r1, [pc, #12]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	08006128 	.word	0x08006128

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cbc:	f7ff ffde 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	0adb      	lsrs	r3, r3, #11
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4903      	ldr	r1, [pc, #12]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	08006128 	.word	0x08006128

08003ce0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <RCC_Delay+0x34>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0a      	ldr	r2, [pc, #40]	; (8003d18 <RCC_Delay+0x38>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	fb02 f303 	mul.w	r3, r2, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cfc:	bf00      	nop
  }
  while (Delay --);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	60fa      	str	r2, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f9      	bne.n	8003cfc <RCC_Delay+0x1c>
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	20000020 	.word	0x20000020
 8003d18:	10624dd3 	.word	0x10624dd3

08003d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e076      	b.n	8003e1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d108      	bne.n	8003d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3e:	d009      	beq.n	8003d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	61da      	str	r2, [r3, #28]
 8003d46:	e005      	b.n	8003d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fe9c 	bl	8001aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	ea42 0103 	orr.w	r1, r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	0c1a      	lsrs	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f002 0204 	and.w	r2, r2, #4
 8003dfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	69da      	ldr	r2, [r3, #28]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_Transmit+0x22>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e12d      	b.n	80040a2 <HAL_SPI_Transmit+0x27e>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4e:	f7fe fa93 	bl	8002378 <HAL_GetTick>
 8003e52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e68:	e116      	b.n	8004098 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SPI_Transmit+0x52>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e7a:	e10d      	b.n	8004098 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec2:	d10f      	bne.n	8003ee4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d007      	beq.n	8003f02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0a:	d14f      	bne.n	8003fac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_SPI_Transmit+0xf6>
 8003f14:	8afb      	ldrh	r3, [r7, #22]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d142      	bne.n	8003fa0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	881a      	ldrh	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	1c9a      	adds	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f3e:	e02f      	b.n	8003fa0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d112      	bne.n	8003f74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	1c9a      	adds	r2, r3, #2
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f72:	e015      	b.n	8003fa0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f74:	f7fe fa00 	bl	8002378 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d803      	bhi.n	8003f8c <HAL_SPI_Transmit+0x168>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d102      	bne.n	8003f92 <HAL_SPI_Transmit+0x16e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f9e:	e07b      	b.n	8004098 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1ca      	bne.n	8003f40 <HAL_SPI_Transmit+0x11c>
 8003faa:	e050      	b.n	800404e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_Transmit+0x196>
 8003fb4:	8afb      	ldrh	r3, [r7, #22]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d144      	bne.n	8004044 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fe0:	e030      	b.n	8004044 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d113      	bne.n	8004018 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	86da      	strh	r2, [r3, #54]	; 0x36
 8004016:	e015      	b.n	8004044 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004018:	f7fe f9ae 	bl	8002378 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d803      	bhi.n	8004030 <HAL_SPI_Transmit+0x20c>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d102      	bne.n	8004036 <HAL_SPI_Transmit+0x212>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004042:	e029      	b.n	8004098 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1c9      	bne.n	8003fe2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f8b2 	bl	80041bc <SPI_EndRxTxTransaction>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e003      	b.n	8004098 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	4613      	mov	r3, r2
 80040ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040bc:	f7fe f95c 	bl	8002378 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	4413      	add	r3, r2
 80040ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040cc:	f7fe f954 	bl	8002378 <HAL_GetTick>
 80040d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	015b      	lsls	r3, r3, #5
 80040d8:	0d1b      	lsrs	r3, r3, #20
 80040da:	69fa      	ldr	r2, [r7, #28]
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040e2:	e054      	b.n	800418e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ea:	d050      	beq.n	800418e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ec:	f7fe f944 	bl	8002378 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	69fa      	ldr	r2, [r7, #28]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d902      	bls.n	8004102 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d13d      	bne.n	800417e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004110:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411a:	d111      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x94>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004124:	d004      	beq.n	8004130 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412e:	d107      	bne.n	8004140 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d10f      	bne.n	800416a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004168:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e017      	b.n	80041ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3b01      	subs	r3, #1
 800418c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	429a      	cmp	r2, r3
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d19b      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000020 	.word	0x20000020

080041bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff ff6a 	bl	80040ac <SPI_WaitFlagStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e000      	b.n	80041f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e093      	b.n	8004334 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fd fc81 	bl	8001b28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423c:	f023 0307 	bic.w	r3, r3, #7
 8004240:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 f903 	bl	8004458 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	021b      	lsls	r3, r3, #8
 800428a:	4313      	orrs	r3, r2
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004298:	f023 030c 	bic.w	r3, r3, #12
 800429c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	4313      	orrs	r3, r2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	011a      	lsls	r2, r3, #4
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	031b      	lsls	r3, r3, #12
 80042c8:	4313      	orrs	r3, r2
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4313      	orrs	r3, r2
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004354:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800435c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004364:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d110      	bne.n	800438e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d102      	bne.n	8004378 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004372:	7b7b      	ldrb	r3, [r7, #13]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e069      	b.n	8004450 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	e031      	b.n	80043f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d110      	bne.n	80043b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004394:	7bbb      	ldrb	r3, [r7, #14]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800439a:	7b3b      	ldrb	r3, [r7, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e055      	b.n	8004450 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b4:	e01d      	b.n	80043f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043bc:	7bbb      	ldrb	r3, [r7, #14]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d105      	bne.n	80043ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c2:	7b7b      	ldrb	r3, [r7, #13]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d102      	bne.n	80043ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043c8:	7b3b      	ldrb	r3, [r7, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d001      	beq.n	80043d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e03e      	b.n	8004450 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2202      	movs	r2, #2
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2202      	movs	r2, #2
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_TIM_Encoder_Start+0xc4>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d008      	beq.n	8004410 <HAL_TIM_Encoder_Start+0xd4>
 80043fe:	e00f      	b.n	8004420 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2201      	movs	r2, #1
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f000 f887 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800440e:	e016      	b.n	800443e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	2104      	movs	r1, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f000 f87f 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800441e:	e00e      	b.n	800443e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	2100      	movs	r1, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f877 	bl	800451c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	2104      	movs	r1, #4
 8004436:	4618      	mov	r0, r3
 8004438:	f000 f870 	bl	800451c <TIM_CCxChannelCmd>
      break;
 800443c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a29      	ldr	r2, [pc, #164]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d007      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a26      	ldr	r2, [pc, #152]	; (8004514 <TIM_Base_SetConfig+0xbc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0x30>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a25      	ldr	r2, [pc, #148]	; (8004518 <TIM_Base_SetConfig+0xc0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d007      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a19      	ldr	r2, [pc, #100]	; (8004514 <TIM_Base_SetConfig+0xbc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_Base_SetConfig+0x62>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a18      	ldr	r2, [pc, #96]	; (8004518 <TIM_Base_SetConfig+0xc0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d108      	bne.n	80044cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <TIM_Base_SetConfig+0xb8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d103      	bne.n	8004500 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	615a      	str	r2, [r3, #20]
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr
 8004510:	40012c00 	.word	0x40012c00
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800

0800451c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e046      	b.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a16      	ldr	r2, [pc, #88]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c8:	d009      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a10      	ldr	r2, [pc, #64]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800

08004620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e042      	b.n	80046b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d106      	bne.n	800464c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd faac 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2224      	movs	r2, #36	; 0x24
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 ff8b 	bl	8005580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695a      	ldr	r2, [r3, #20]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d16d      	bne.n	80047bc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_UART_Transmit+0x2c>
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e066      	b.n	80047be <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046fe:	f7fd fe3b 	bl	8002378 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d108      	bne.n	800472c <HAL_UART_Transmit+0x6c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d104      	bne.n	800472c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e003      	b.n	8004734 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004734:	e02a      	b.n	800478c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	; 0x80
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fc53 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e036      	b.n	80047be <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e007      	b.n	800477e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1cf      	bne.n	8004736 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2140      	movs	r1, #64	; 0x40
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fc23 	bl	8004fec <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e006      	b.n	80047be <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e000      	b.n	80047be <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047bc:	2302      	movs	r3, #2
  }
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b08c      	sub	sp, #48	; 0x30
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d14a      	bne.n	8004876 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e043      	b.n	8004878 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047fc:	88fb      	ldrh	r3, [r7, #6]
 80047fe:	461a      	mov	r2, r3
 8004800:	68b9      	ldr	r1, [r7, #8]
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 fc60 	bl	80050c8 <UART_Start_Receive_DMA>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800480e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004812:	2b00      	cmp	r3, #0
 8004814:	d12c      	bne.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	2b01      	cmp	r3, #1
 800481c:	d125      	bne.n	800486a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	617b      	str	r3, [r7, #20]
   return(result);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f043 0310 	orr.w	r3, r3, #16
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004854:	627a      	str	r2, [r7, #36]	; 0x24
 8004856:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6a39      	ldr	r1, [r7, #32]
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	61fb      	str	r3, [r7, #28]
   return(result);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004868:	e002      	b.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004874:	e000      	b.n	8004878 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3730      	adds	r7, #48	; 0x30
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ba      	sub	sp, #232	; 0xe8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
 80048d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fd90 	bl	8005404 <UART_Receive_IT>
      return;
 80048e4:	e25b      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80de 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80d1 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
 800493a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f043 0202 	orr.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
 800495e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 81f2 	beq.w	8004d94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fd1b 	bl	8005404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_UART_IRQHandler+0x17a>
 80049f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d04f      	beq.n	8004a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fc25 	bl	800524a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d041      	beq.n	8004a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1d9      	bne.n	8004a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d013      	beq.n	8004a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	4a7e      	ldr	r2, [pc, #504]	; (8004c60 <HAL_UART_IRQHandler+0x3e0>)
 8004a68:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe f9e4 	bl	8002e3c <HAL_DMA_Abort_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e00e      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fb fb5e 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e00a      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fb fb5a 	bl	800014c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e006      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fb fb56 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004aa6:	e175      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	bf00      	nop
    return;
 8004aaa:	e173      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 814f 	bne.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8148 	beq.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8141 	beq.w	8004d54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80b6 	beq.w	8004c64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8145 	beq.w	8004d98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b16:	429a      	cmp	r2, r3
 8004b18:	f080 813e 	bcs.w	8004d98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	f000 8088 	beq.w	8004c40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b3e:	e853 3f00 	ldrex	r3, [r3]
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b5c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1d9      	bne.n	8004b30 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3314      	adds	r3, #20
 8004b9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ba0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ba4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e1      	bne.n	8004b7c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3314      	adds	r3, #20
 8004bd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bdc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004be2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e3      	bne.n	8004bb8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	330c      	adds	r3, #12
 8004c1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c22:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c24:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e3      	bne.n	8004bfe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe f8c2 	bl	8002dc4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fb fb0c 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c5c:	e09c      	b.n	8004d98 <HAL_UART_IRQHandler+0x518>
 8004c5e:	bf00      	nop
 8004c60:	0800530f 	.word	0x0800530f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 808e 	beq.w	8004d9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8089 	beq.w	8004d9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cae:	647a      	str	r2, [r7, #68]	; 0x44
 8004cb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e3      	bne.n	8004c8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	f023 0301 	bic.w	r3, r3, #1
 8004cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d2c:	61fa      	str	r2, [r7, #28]
 8004d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fb fa91 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d52:	e023      	b.n	8004d9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_UART_IRQHandler+0x4f4>
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fae2 	bl	8005336 <UART_Transmit_IT>
    return;
 8004d72:	e014      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <HAL_UART_IRQHandler+0x51e>
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fb21 	bl	80053d4 <UART_EndTransmit_IT>
    return;
 8004d92:	e004      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d94:	bf00      	nop
 8004d96:	e002      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d9c:	bf00      	nop
  }
}
 8004d9e:	37e8      	adds	r7, #232	; 0xe8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b09c      	sub	sp, #112	; 0x70
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d172      	bne.n	8004ef2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0e:	2200      	movs	r2, #0
 8004e10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	330c      	adds	r3, #12
 8004e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e32:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e34:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e5      	bne.n	8004e12 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e66:	647a      	str	r2, [r7, #68]	; 0x44
 8004e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	623b      	str	r3, [r7, #32]
   return(result);
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e90:	663b      	str	r3, [r7, #96]	; 0x60
 8004e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e9a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d119      	bne.n	8004ef2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
 8004ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	617b      	str	r3, [r7, #20]
   return(result);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d106      	bne.n	8004f0e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f04:	4619      	mov	r1, r3
 8004f06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f08:	f7fb f9b4 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f0c:	e002      	b.n	8004f14 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004f0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f10:	f7ff ff51 	bl	8004db6 <HAL_UART_RxCpltCallback>
}
 8004f14:	bf00      	nop
 8004f16:	3770      	adds	r7, #112	; 0x70
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4619      	mov	r1, r3
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7fb f996 	bl	8000274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f48:	e002      	b.n	8004f50 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff ff3c 	bl	8004dc8 <HAL_UART_RxHalfCpltCallback>
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b21      	cmp	r3, #33	; 0x21
 8004f8a:	d108      	bne.n	8004f9e <UART_DMAError+0x46>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f98:	68b8      	ldr	r0, [r7, #8]
 8004f9a:	f000 f92f 	bl	80051fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b22      	cmp	r3, #34	; 0x22
 8004fbe:	d108      	bne.n	8004fd2 <UART_DMAError+0x7a>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004fcc:	68b8      	ldr	r0, [r7, #8]
 8004fce:	f000 f93c 	bl	800524a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f043 0210 	orr.w	r2, r3, #16
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fde:	68b8      	ldr	r0, [r7, #8]
 8004fe0:	f7fb f8b4 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe4:	bf00      	nop
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b090      	sub	sp, #64	; 0x40
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ffc:	e050      	b.n	80050a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d04c      	beq.n	80050a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <UART_WaitOnFlagUntilTimeout+0x30>
 800500c:	f7fd f9b4 	bl	8002378 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005018:	429a      	cmp	r2, r3
 800501a:	d241      	bcs.n	80050a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503c:	637a      	str	r2, [r7, #52]	; 0x34
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3314      	adds	r3, #20
 8005056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	613b      	str	r3, [r7, #16]
   return(result);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f023 0301 	bic.w	r3, r3, #1
 8005066:	63bb      	str	r3, [r7, #56]	; 0x38
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005070:	623a      	str	r2, [r7, #32]
 8005072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	69f9      	ldr	r1, [r7, #28]
 8005076:	6a3a      	ldr	r2, [r7, #32]
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	61bb      	str	r3, [r7, #24]
   return(result);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e00f      	b.n	80050c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	bf0c      	ite	eq
 80050b0:	2301      	moveq	r3, #1
 80050b2:	2300      	movne	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d09f      	beq.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3740      	adds	r7, #64	; 0x40
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b098      	sub	sp, #96	; 0x60
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2222      	movs	r2, #34	; 0x22
 80050ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	4a3e      	ldr	r2, [pc, #248]	; (80051f0 <UART_Start_Receive_DMA+0x128>)
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fc:	4a3d      	ldr	r2, [pc, #244]	; (80051f4 <UART_Start_Receive_DMA+0x12c>)
 80050fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <UART_Start_Receive_DMA+0x130>)
 8005106:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3304      	adds	r3, #4
 8005120:	4619      	mov	r1, r3
 8005122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	f7fd fdec 	bl	8002d04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d019      	beq.n	800517e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800515a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	65bb      	str	r3, [r7, #88]	; 0x58
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	330c      	adds	r3, #12
 8005168:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800516a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005170:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005172:	e841 2300 	strex	r3, r2, [r1]
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1e5      	bne.n	800514a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3314      	adds	r3, #20
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	657b      	str	r3, [r7, #84]	; 0x54
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3314      	adds	r3, #20
 800519c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800519e:	63ba      	str	r2, [r7, #56]	; 0x38
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	617b      	str	r3, [r7, #20]
   return(result);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051d2:	627a      	str	r2, [r7, #36]	; 0x24
 80051d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6a39      	ldr	r1, [r7, #32]
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e5      	bne.n	80051b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3760      	adds	r7, #96	; 0x60
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	08004df1 	.word	0x08004df1
 80051f4:	08004f1d 	.word	0x08004f1d
 80051f8:	08004f59 	.word	0x08004f59

080051fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60bb      	str	r3, [r7, #8]
   return(result);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	69fa      	ldr	r2, [r7, #28]
 8005224:	61ba      	str	r2, [r7, #24]
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	6979      	ldr	r1, [r7, #20]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	613b      	str	r3, [r7, #16]
   return(result);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005240:	bf00      	nop
 8005242:	3724      	adds	r7, #36	; 0x24
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800524a:	b480      	push	{r7}
 800524c:	b095      	sub	sp, #84	; 0x54
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005272:	643a      	str	r2, [r7, #64]	; 0x40
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005278:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e5      	bne.n	8005252 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3314      	adds	r3, #20
 800528c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	61fb      	str	r3, [r7, #28]
   return(result);
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f023 0301 	bic.w	r3, r3, #1
 800529c:	64bb      	str	r3, [r7, #72]	; 0x48
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3314      	adds	r3, #20
 80052a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e5      	bne.n	8005286 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d119      	bne.n	80052f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	e853 3f00 	ldrex	r3, [r3]
 80052d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 0310 	bic.w	r3, r3, #16
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	330c      	adds	r3, #12
 80052e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052e2:	61ba      	str	r2, [r7, #24]
 80052e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6979      	ldr	r1, [r7, #20]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e5      	bne.n	80052c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005304:	bf00      	nop
 8005306:	3754      	adds	r7, #84	; 0x54
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7fa ff0f 	bl	800014c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b21      	cmp	r3, #33	; 0x21
 8005348:	d13e      	bne.n	80053c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d114      	bne.n	800537e <UART_Transmit_IT+0x48>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	e008      	b.n	8005390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6211      	str	r1, [r2, #32]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29b      	uxth	r3, r3
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4619      	mov	r1, r3
 800539e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fcd5 	bl	8004da4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	; 0x30
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b22      	cmp	r3, #34	; 0x22
 8005416:	f040 80ae 	bne.w	8005576 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d117      	bne.n	8005454 <UART_Receive_IT+0x50>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d113      	bne.n	8005454 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	b29b      	uxth	r3, r3
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	b29a      	uxth	r2, r3
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	1c9a      	adds	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	629a      	str	r2, [r3, #40]	; 0x28
 8005452:	e026      	b.n	80054a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d007      	beq.n	8005478 <UART_Receive_IT+0x74>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <UART_Receive_IT+0x82>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e008      	b.n	8005498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	4619      	mov	r1, r3
 80054b0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d15d      	bne.n	8005572 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0220 	bic.w	r2, r2, #32
 80054c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d135      	bne.n	8005568 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	613b      	str	r3, [r7, #16]
   return(result);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f023 0310 	bic.w	r3, r3, #16
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	330c      	adds	r3, #12
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	623a      	str	r2, [r7, #32]
 8005524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e5      	bne.n	8005502 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0310 	and.w	r3, r3, #16
 8005540:	2b10      	cmp	r3, #16
 8005542:	d10a      	bne.n	800555a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fa fe87 	bl	8000274 <HAL_UARTEx_RxEventCallback>
 8005566:	e002      	b.n	800556e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fc24 	bl	8004db6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e002      	b.n	8005578 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	e000      	b.n	8005578 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005576:	2302      	movs	r3, #2
  }
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055ba:	f023 030c 	bic.w	r3, r3, #12
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	430b      	orrs	r3, r1
 80055c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <UART_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055e8:	f7fe fb66 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	e002      	b.n	80055f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe fb4e 	bl	8003c90 <HAL_RCC_GetPCLK1Freq>
 80055f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	009a      	lsls	r2, r3, #2
 8005600:	441a      	add	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	4a22      	ldr	r2, [pc, #136]	; (8005698 <UART_SetConfig+0x118>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	0119      	lsls	r1, r3, #4
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f2f3 	udiv	r2, r2, r3
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <UART_SetConfig+0x118>)
 800562e:	fba3 0302 	umull	r0, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2064      	movs	r0, #100	; 0x64
 8005636:	fb00 f303 	mul.w	r3, r0, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	; 0x32
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <UART_SetConfig+0x118>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564c:	4419      	add	r1, r3
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009a      	lsls	r2, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	fbb2 f2f3 	udiv	r2, r2, r3
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <UART_SetConfig+0x118>)
 8005666:	fba3 0302 	umull	r0, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2064      	movs	r0, #100	; 0x64
 800566e:	fb00 f303 	mul.w	r3, r0, r3
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4a07      	ldr	r2, [pc, #28]	; (8005698 <UART_SetConfig+0x118>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 020f 	and.w	r2, r3, #15
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	440a      	add	r2, r1
 800568a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800568c:	bf00      	nop
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40013800 	.word	0x40013800
 8005698:	51eb851f 	.word	0x51eb851f

0800569c <__errno>:
 800569c:	4b01      	ldr	r3, [pc, #4]	; (80056a4 <__errno+0x8>)
 800569e:	6818      	ldr	r0, [r3, #0]
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000054 	.word	0x20000054

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	2600      	movs	r6, #0
 80056ac:	4d0c      	ldr	r5, [pc, #48]	; (80056e0 <__libc_init_array+0x38>)
 80056ae:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056b0:	1b64      	subs	r4, r4, r5
 80056b2:	10a4      	asrs	r4, r4, #2
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	f000 fcb0 	bl	800601c <_init>
 80056bc:	2600      	movs	r6, #0
 80056be:	4d0a      	ldr	r5, [pc, #40]	; (80056e8 <__libc_init_array+0x40>)
 80056c0:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x44>)
 80056c2:	1b64      	subs	r4, r4, r5
 80056c4:	10a4      	asrs	r4, r4, #2
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	0800a14c 	.word	0x0800a14c
 80056e4:	0800a14c 	.word	0x0800a14c
 80056e8:	0800a14c 	.word	0x0800a14c
 80056ec:	0800a150 	.word	0x0800a150

080056f0 <memcpy>:
 80056f0:	440a      	add	r2, r1
 80056f2:	4291      	cmp	r1, r2
 80056f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056f8:	d100      	bne.n	80056fc <memcpy+0xc>
 80056fa:	4770      	bx	lr
 80056fc:	b510      	push	{r4, lr}
 80056fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005702:	4291      	cmp	r1, r2
 8005704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005708:	d1f9      	bne.n	80056fe <memcpy+0xe>
 800570a:	bd10      	pop	{r4, pc}

0800570c <memmove>:
 800570c:	4288      	cmp	r0, r1
 800570e:	b510      	push	{r4, lr}
 8005710:	eb01 0402 	add.w	r4, r1, r2
 8005714:	d902      	bls.n	800571c <memmove+0x10>
 8005716:	4284      	cmp	r4, r0
 8005718:	4623      	mov	r3, r4
 800571a:	d807      	bhi.n	800572c <memmove+0x20>
 800571c:	1e43      	subs	r3, r0, #1
 800571e:	42a1      	cmp	r1, r4
 8005720:	d008      	beq.n	8005734 <memmove+0x28>
 8005722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800572a:	e7f8      	b.n	800571e <memmove+0x12>
 800572c:	4601      	mov	r1, r0
 800572e:	4402      	add	r2, r0
 8005730:	428a      	cmp	r2, r1
 8005732:	d100      	bne.n	8005736 <memmove+0x2a>
 8005734:	bd10      	pop	{r4, pc}
 8005736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800573a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800573e:	e7f7      	b.n	8005730 <memmove+0x24>

08005740 <memset>:
 8005740:	4603      	mov	r3, r0
 8005742:	4402      	add	r2, r0
 8005744:	4293      	cmp	r3, r2
 8005746:	d100      	bne.n	800574a <memset+0xa>
 8005748:	4770      	bx	lr
 800574a:	f803 1b01 	strb.w	r1, [r3], #1
 800574e:	e7f9      	b.n	8005744 <memset+0x4>

08005750 <sniprintf>:
 8005750:	b40c      	push	{r2, r3}
 8005752:	b530      	push	{r4, r5, lr}
 8005754:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <sniprintf+0x64>)
 8005756:	1e0c      	subs	r4, r1, #0
 8005758:	681d      	ldr	r5, [r3, #0]
 800575a:	b09d      	sub	sp, #116	; 0x74
 800575c:	da08      	bge.n	8005770 <sniprintf+0x20>
 800575e:	238b      	movs	r3, #139	; 0x8b
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	b01d      	add	sp, #116	; 0x74
 8005768:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800576c:	b002      	add	sp, #8
 800576e:	4770      	bx	lr
 8005770:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005774:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005778:	bf0c      	ite	eq
 800577a:	4623      	moveq	r3, r4
 800577c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	9307      	str	r3, [sp, #28]
 8005784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005788:	9002      	str	r0, [sp, #8]
 800578a:	9006      	str	r0, [sp, #24]
 800578c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005790:	4628      	mov	r0, r5
 8005792:	ab21      	add	r3, sp, #132	; 0x84
 8005794:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005796:	a902      	add	r1, sp, #8
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	f000 f869 	bl	8005870 <_svfiprintf_r>
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	bfbc      	itt	lt
 80057a2:	238b      	movlt	r3, #139	; 0x8b
 80057a4:	602b      	strlt	r3, [r5, #0]
 80057a6:	2c00      	cmp	r4, #0
 80057a8:	d0dd      	beq.n	8005766 <sniprintf+0x16>
 80057aa:	2200      	movs	r2, #0
 80057ac:	9b02      	ldr	r3, [sp, #8]
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e7d9      	b.n	8005766 <sniprintf+0x16>
 80057b2:	bf00      	nop
 80057b4:	20000054 	.word	0x20000054

080057b8 <__ssputs_r>:
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057bc:	688e      	ldr	r6, [r1, #8]
 80057be:	4682      	mov	sl, r0
 80057c0:	429e      	cmp	r6, r3
 80057c2:	460c      	mov	r4, r1
 80057c4:	4690      	mov	r8, r2
 80057c6:	461f      	mov	r7, r3
 80057c8:	d838      	bhi.n	800583c <__ssputs_r+0x84>
 80057ca:	898a      	ldrh	r2, [r1, #12]
 80057cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d0:	d032      	beq.n	8005838 <__ssputs_r+0x80>
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	6909      	ldr	r1, [r1, #16]
 80057d6:	3301      	adds	r3, #1
 80057d8:	eba5 0901 	sub.w	r9, r5, r1
 80057dc:	6965      	ldr	r5, [r4, #20]
 80057de:	444b      	add	r3, r9
 80057e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057e8:	106d      	asrs	r5, r5, #1
 80057ea:	429d      	cmp	r5, r3
 80057ec:	bf38      	it	cc
 80057ee:	461d      	movcc	r5, r3
 80057f0:	0553      	lsls	r3, r2, #21
 80057f2:	d531      	bpl.n	8005858 <__ssputs_r+0xa0>
 80057f4:	4629      	mov	r1, r5
 80057f6:	f000 fb47 	bl	8005e88 <_malloc_r>
 80057fa:	4606      	mov	r6, r0
 80057fc:	b950      	cbnz	r0, 8005814 <__ssputs_r+0x5c>
 80057fe:	230c      	movs	r3, #12
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	f8ca 3000 	str.w	r3, [sl]
 8005808:	89a3      	ldrh	r3, [r4, #12]
 800580a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580e:	81a3      	strh	r3, [r4, #12]
 8005810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005814:	464a      	mov	r2, r9
 8005816:	6921      	ldr	r1, [r4, #16]
 8005818:	f7ff ff6a 	bl	80056f0 <memcpy>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	6126      	str	r6, [r4, #16]
 800582a:	444e      	add	r6, r9
 800582c:	6026      	str	r6, [r4, #0]
 800582e:	463e      	mov	r6, r7
 8005830:	6165      	str	r5, [r4, #20]
 8005832:	eba5 0509 	sub.w	r5, r5, r9
 8005836:	60a5      	str	r5, [r4, #8]
 8005838:	42be      	cmp	r6, r7
 800583a:	d900      	bls.n	800583e <__ssputs_r+0x86>
 800583c:	463e      	mov	r6, r7
 800583e:	4632      	mov	r2, r6
 8005840:	4641      	mov	r1, r8
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	f7ff ff62 	bl	800570c <memmove>
 8005848:	68a3      	ldr	r3, [r4, #8]
 800584a:	2000      	movs	r0, #0
 800584c:	1b9b      	subs	r3, r3, r6
 800584e:	60a3      	str	r3, [r4, #8]
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	4433      	add	r3, r6
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	e7db      	b.n	8005810 <__ssputs_r+0x58>
 8005858:	462a      	mov	r2, r5
 800585a:	f000 fb89 	bl	8005f70 <_realloc_r>
 800585e:	4606      	mov	r6, r0
 8005860:	2800      	cmp	r0, #0
 8005862:	d1e1      	bne.n	8005828 <__ssputs_r+0x70>
 8005864:	4650      	mov	r0, sl
 8005866:	6921      	ldr	r1, [r4, #16]
 8005868:	f000 faa6 	bl	8005db8 <_free_r>
 800586c:	e7c7      	b.n	80057fe <__ssputs_r+0x46>
	...

08005870 <_svfiprintf_r>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	4698      	mov	r8, r3
 8005876:	898b      	ldrh	r3, [r1, #12]
 8005878:	4607      	mov	r7, r0
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	460d      	mov	r5, r1
 800587e:	4614      	mov	r4, r2
 8005880:	b09d      	sub	sp, #116	; 0x74
 8005882:	d50e      	bpl.n	80058a2 <_svfiprintf_r+0x32>
 8005884:	690b      	ldr	r3, [r1, #16]
 8005886:	b963      	cbnz	r3, 80058a2 <_svfiprintf_r+0x32>
 8005888:	2140      	movs	r1, #64	; 0x40
 800588a:	f000 fafd 	bl	8005e88 <_malloc_r>
 800588e:	6028      	str	r0, [r5, #0]
 8005890:	6128      	str	r0, [r5, #16]
 8005892:	b920      	cbnz	r0, 800589e <_svfiprintf_r+0x2e>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e0d1      	b.n	8005a42 <_svfiprintf_r+0x1d2>
 800589e:	2340      	movs	r3, #64	; 0x40
 80058a0:	616b      	str	r3, [r5, #20]
 80058a2:	2300      	movs	r3, #0
 80058a4:	9309      	str	r3, [sp, #36]	; 0x24
 80058a6:	2320      	movs	r3, #32
 80058a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058ac:	2330      	movs	r3, #48	; 0x30
 80058ae:	f04f 0901 	mov.w	r9, #1
 80058b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80058b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a5c <_svfiprintf_r+0x1ec>
 80058ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058be:	4623      	mov	r3, r4
 80058c0:	469a      	mov	sl, r3
 80058c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058c6:	b10a      	cbz	r2, 80058cc <_svfiprintf_r+0x5c>
 80058c8:	2a25      	cmp	r2, #37	; 0x25
 80058ca:	d1f9      	bne.n	80058c0 <_svfiprintf_r+0x50>
 80058cc:	ebba 0b04 	subs.w	fp, sl, r4
 80058d0:	d00b      	beq.n	80058ea <_svfiprintf_r+0x7a>
 80058d2:	465b      	mov	r3, fp
 80058d4:	4622      	mov	r2, r4
 80058d6:	4629      	mov	r1, r5
 80058d8:	4638      	mov	r0, r7
 80058da:	f7ff ff6d 	bl	80057b8 <__ssputs_r>
 80058de:	3001      	adds	r0, #1
 80058e0:	f000 80aa 	beq.w	8005a38 <_svfiprintf_r+0x1c8>
 80058e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e6:	445a      	add	r2, fp
 80058e8:	9209      	str	r2, [sp, #36]	; 0x24
 80058ea:	f89a 3000 	ldrb.w	r3, [sl]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 80a2 	beq.w	8005a38 <_svfiprintf_r+0x1c8>
 80058f4:	2300      	movs	r3, #0
 80058f6:	f04f 32ff 	mov.w	r2, #4294967295
 80058fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058fe:	f10a 0a01 	add.w	sl, sl, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800590a:	931a      	str	r3, [sp, #104]	; 0x68
 800590c:	4654      	mov	r4, sl
 800590e:	2205      	movs	r2, #5
 8005910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005914:	4851      	ldr	r0, [pc, #324]	; (8005a5c <_svfiprintf_r+0x1ec>)
 8005916:	f000 fa41 	bl	8005d9c <memchr>
 800591a:	9a04      	ldr	r2, [sp, #16]
 800591c:	b9d8      	cbnz	r0, 8005956 <_svfiprintf_r+0xe6>
 800591e:	06d0      	lsls	r0, r2, #27
 8005920:	bf44      	itt	mi
 8005922:	2320      	movmi	r3, #32
 8005924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005928:	0711      	lsls	r1, r2, #28
 800592a:	bf44      	itt	mi
 800592c:	232b      	movmi	r3, #43	; 0x2b
 800592e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005932:	f89a 3000 	ldrb.w	r3, [sl]
 8005936:	2b2a      	cmp	r3, #42	; 0x2a
 8005938:	d015      	beq.n	8005966 <_svfiprintf_r+0xf6>
 800593a:	4654      	mov	r4, sl
 800593c:	2000      	movs	r0, #0
 800593e:	f04f 0c0a 	mov.w	ip, #10
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	4621      	mov	r1, r4
 8005946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800594a:	3b30      	subs	r3, #48	; 0x30
 800594c:	2b09      	cmp	r3, #9
 800594e:	d94e      	bls.n	80059ee <_svfiprintf_r+0x17e>
 8005950:	b1b0      	cbz	r0, 8005980 <_svfiprintf_r+0x110>
 8005952:	9207      	str	r2, [sp, #28]
 8005954:	e014      	b.n	8005980 <_svfiprintf_r+0x110>
 8005956:	eba0 0308 	sub.w	r3, r0, r8
 800595a:	fa09 f303 	lsl.w	r3, r9, r3
 800595e:	4313      	orrs	r3, r2
 8005960:	46a2      	mov	sl, r4
 8005962:	9304      	str	r3, [sp, #16]
 8005964:	e7d2      	b.n	800590c <_svfiprintf_r+0x9c>
 8005966:	9b03      	ldr	r3, [sp, #12]
 8005968:	1d19      	adds	r1, r3, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	9103      	str	r1, [sp, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfbb      	ittet	lt
 8005972:	425b      	neglt	r3, r3
 8005974:	f042 0202 	orrlt.w	r2, r2, #2
 8005978:	9307      	strge	r3, [sp, #28]
 800597a:	9307      	strlt	r3, [sp, #28]
 800597c:	bfb8      	it	lt
 800597e:	9204      	strlt	r2, [sp, #16]
 8005980:	7823      	ldrb	r3, [r4, #0]
 8005982:	2b2e      	cmp	r3, #46	; 0x2e
 8005984:	d10c      	bne.n	80059a0 <_svfiprintf_r+0x130>
 8005986:	7863      	ldrb	r3, [r4, #1]
 8005988:	2b2a      	cmp	r3, #42	; 0x2a
 800598a:	d135      	bne.n	80059f8 <_svfiprintf_r+0x188>
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	3402      	adds	r4, #2
 8005990:	1d1a      	adds	r2, r3, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	9203      	str	r2, [sp, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfb8      	it	lt
 800599a:	f04f 33ff 	movlt.w	r3, #4294967295
 800599e:	9305      	str	r3, [sp, #20]
 80059a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a60 <_svfiprintf_r+0x1f0>
 80059a4:	2203      	movs	r2, #3
 80059a6:	4650      	mov	r0, sl
 80059a8:	7821      	ldrb	r1, [r4, #0]
 80059aa:	f000 f9f7 	bl	8005d9c <memchr>
 80059ae:	b140      	cbz	r0, 80059c2 <_svfiprintf_r+0x152>
 80059b0:	2340      	movs	r3, #64	; 0x40
 80059b2:	eba0 000a 	sub.w	r0, r0, sl
 80059b6:	fa03 f000 	lsl.w	r0, r3, r0
 80059ba:	9b04      	ldr	r3, [sp, #16]
 80059bc:	3401      	adds	r4, #1
 80059be:	4303      	orrs	r3, r0
 80059c0:	9304      	str	r3, [sp, #16]
 80059c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059c6:	2206      	movs	r2, #6
 80059c8:	4826      	ldr	r0, [pc, #152]	; (8005a64 <_svfiprintf_r+0x1f4>)
 80059ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059ce:	f000 f9e5 	bl	8005d9c <memchr>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d038      	beq.n	8005a48 <_svfiprintf_r+0x1d8>
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <_svfiprintf_r+0x1f8>)
 80059d8:	bb1b      	cbnz	r3, 8005a22 <_svfiprintf_r+0x1b2>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	3307      	adds	r3, #7
 80059de:	f023 0307 	bic.w	r3, r3, #7
 80059e2:	3308      	adds	r3, #8
 80059e4:	9303      	str	r3, [sp, #12]
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	4433      	add	r3, r6
 80059ea:	9309      	str	r3, [sp, #36]	; 0x24
 80059ec:	e767      	b.n	80058be <_svfiprintf_r+0x4e>
 80059ee:	460c      	mov	r4, r1
 80059f0:	2001      	movs	r0, #1
 80059f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059f6:	e7a5      	b.n	8005944 <_svfiprintf_r+0xd4>
 80059f8:	2300      	movs	r3, #0
 80059fa:	f04f 0c0a 	mov.w	ip, #10
 80059fe:	4619      	mov	r1, r3
 8005a00:	3401      	adds	r4, #1
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	4620      	mov	r0, r4
 8005a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a0a:	3a30      	subs	r2, #48	; 0x30
 8005a0c:	2a09      	cmp	r2, #9
 8005a0e:	d903      	bls.n	8005a18 <_svfiprintf_r+0x1a8>
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0c5      	beq.n	80059a0 <_svfiprintf_r+0x130>
 8005a14:	9105      	str	r1, [sp, #20]
 8005a16:	e7c3      	b.n	80059a0 <_svfiprintf_r+0x130>
 8005a18:	4604      	mov	r4, r0
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a20:	e7f0      	b.n	8005a04 <_svfiprintf_r+0x194>
 8005a22:	ab03      	add	r3, sp, #12
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	462a      	mov	r2, r5
 8005a28:	4638      	mov	r0, r7
 8005a2a:	4b10      	ldr	r3, [pc, #64]	; (8005a6c <_svfiprintf_r+0x1fc>)
 8005a2c:	a904      	add	r1, sp, #16
 8005a2e:	f3af 8000 	nop.w
 8005a32:	1c42      	adds	r2, r0, #1
 8005a34:	4606      	mov	r6, r0
 8005a36:	d1d6      	bne.n	80059e6 <_svfiprintf_r+0x176>
 8005a38:	89ab      	ldrh	r3, [r5, #12]
 8005a3a:	065b      	lsls	r3, r3, #25
 8005a3c:	f53f af2c 	bmi.w	8005898 <_svfiprintf_r+0x28>
 8005a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a42:	b01d      	add	sp, #116	; 0x74
 8005a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a48:	ab03      	add	r3, sp, #12
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4638      	mov	r0, r7
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <_svfiprintf_r+0x1fc>)
 8005a52:	a904      	add	r1, sp, #16
 8005a54:	f000 f87c 	bl	8005b50 <_printf_i>
 8005a58:	e7eb      	b.n	8005a32 <_svfiprintf_r+0x1c2>
 8005a5a:	bf00      	nop
 8005a5c:	0800a116 	.word	0x0800a116
 8005a60:	0800a11c 	.word	0x0800a11c
 8005a64:	0800a120 	.word	0x0800a120
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	080057b9 	.word	0x080057b9

08005a70 <_printf_common>:
 8005a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	4616      	mov	r6, r2
 8005a76:	4699      	mov	r9, r3
 8005a78:	688a      	ldr	r2, [r1, #8]
 8005a7a:	690b      	ldr	r3, [r1, #16]
 8005a7c:	4607      	mov	r7, r0
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	bfb8      	it	lt
 8005a82:	4613      	movlt	r3, r2
 8005a84:	6033      	str	r3, [r6, #0]
 8005a86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a90:	b10a      	cbz	r2, 8005a96 <_printf_common+0x26>
 8005a92:	3301      	adds	r3, #1
 8005a94:	6033      	str	r3, [r6, #0]
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	0699      	lsls	r1, r3, #26
 8005a9a:	bf42      	ittt	mi
 8005a9c:	6833      	ldrmi	r3, [r6, #0]
 8005a9e:	3302      	addmi	r3, #2
 8005aa0:	6033      	strmi	r3, [r6, #0]
 8005aa2:	6825      	ldr	r5, [r4, #0]
 8005aa4:	f015 0506 	ands.w	r5, r5, #6
 8005aa8:	d106      	bne.n	8005ab8 <_printf_common+0x48>
 8005aaa:	f104 0a19 	add.w	sl, r4, #25
 8005aae:	68e3      	ldr	r3, [r4, #12]
 8005ab0:	6832      	ldr	r2, [r6, #0]
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	dc28      	bgt.n	8005b0a <_printf_common+0x9a>
 8005ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005abc:	1e13      	subs	r3, r2, #0
 8005abe:	6822      	ldr	r2, [r4, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	2301      	movne	r3, #1
 8005ac4:	0692      	lsls	r2, r2, #26
 8005ac6:	d42d      	bmi.n	8005b24 <_printf_common+0xb4>
 8005ac8:	4649      	mov	r1, r9
 8005aca:	4638      	mov	r0, r7
 8005acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d020      	beq.n	8005b18 <_printf_common+0xa8>
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	68e5      	ldr	r5, [r4, #12]
 8005ada:	f003 0306 	and.w	r3, r3, #6
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	bf18      	it	ne
 8005ae2:	2500      	movne	r5, #0
 8005ae4:	6832      	ldr	r2, [r6, #0]
 8005ae6:	f04f 0600 	mov.w	r6, #0
 8005aea:	68a3      	ldr	r3, [r4, #8]
 8005aec:	bf08      	it	eq
 8005aee:	1aad      	subeq	r5, r5, r2
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	bf08      	it	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bfc4      	itt	gt
 8005afc:	1a9b      	subgt	r3, r3, r2
 8005afe:	18ed      	addgt	r5, r5, r3
 8005b00:	341a      	adds	r4, #26
 8005b02:	42b5      	cmp	r5, r6
 8005b04:	d11a      	bne.n	8005b3c <_printf_common+0xcc>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e008      	b.n	8005b1c <_printf_common+0xac>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	4649      	mov	r1, r9
 8005b10:	4638      	mov	r0, r7
 8005b12:	47c0      	blx	r8
 8005b14:	3001      	adds	r0, #1
 8005b16:	d103      	bne.n	8005b20 <_printf_common+0xb0>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	3501      	adds	r5, #1
 8005b22:	e7c4      	b.n	8005aae <_printf_common+0x3e>
 8005b24:	2030      	movs	r0, #48	; 0x30
 8005b26:	18e1      	adds	r1, r4, r3
 8005b28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b2c:	1c5a      	adds	r2, r3, #1
 8005b2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b32:	4422      	add	r2, r4
 8005b34:	3302      	adds	r3, #2
 8005b36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b3a:	e7c5      	b.n	8005ac8 <_printf_common+0x58>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4649      	mov	r1, r9
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c0      	blx	r8
 8005b46:	3001      	adds	r0, #1
 8005b48:	d0e6      	beq.n	8005b18 <_printf_common+0xa8>
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7d9      	b.n	8005b02 <_printf_common+0x92>
	...

08005b50 <_printf_i>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	7e0f      	ldrb	r7, [r1, #24]
 8005b56:	4691      	mov	r9, r2
 8005b58:	2f78      	cmp	r7, #120	; 0x78
 8005b5a:	4680      	mov	r8, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	469a      	mov	sl, r3
 8005b60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b66:	d807      	bhi.n	8005b78 <_printf_i+0x28>
 8005b68:	2f62      	cmp	r7, #98	; 0x62
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x32>
 8005b6c:	2f00      	cmp	r7, #0
 8005b6e:	f000 80d9 	beq.w	8005d24 <_printf_i+0x1d4>
 8005b72:	2f58      	cmp	r7, #88	; 0x58
 8005b74:	f000 80a4 	beq.w	8005cc0 <_printf_i+0x170>
 8005b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b80:	e03a      	b.n	8005bf8 <_printf_i+0xa8>
 8005b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b86:	2b15      	cmp	r3, #21
 8005b88:	d8f6      	bhi.n	8005b78 <_printf_i+0x28>
 8005b8a:	a101      	add	r1, pc, #4	; (adr r1, 8005b90 <_printf_i+0x40>)
 8005b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005b79 	.word	0x08005b79
 8005b9c:	08005b79 	.word	0x08005b79
 8005ba0:	08005b79 	.word	0x08005b79
 8005ba4:	08005b79 	.word	0x08005b79
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b79 	.word	0x08005b79
 8005bb0:	08005b79 	.word	0x08005b79
 8005bb4:	08005b79 	.word	0x08005b79
 8005bb8:	08005b79 	.word	0x08005b79
 8005bbc:	08005d0b 	.word	0x08005d0b
 8005bc0:	08005c2d 	.word	0x08005c2d
 8005bc4:	08005ced 	.word	0x08005ced
 8005bc8:	08005b79 	.word	0x08005b79
 8005bcc:	08005b79 	.word	0x08005b79
 8005bd0:	08005d2d 	.word	0x08005d2d
 8005bd4:	08005b79 	.word	0x08005b79
 8005bd8:	08005c2d 	.word	0x08005c2d
 8005bdc:	08005b79 	.word	0x08005b79
 8005be0:	08005b79 	.word	0x08005b79
 8005be4:	08005cf5 	.word	0x08005cf5
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	602a      	str	r2, [r5, #0]
 8005bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0a4      	b.n	8005d46 <_printf_i+0x1f6>
 8005bfc:	6820      	ldr	r0, [r4, #0]
 8005bfe:	6829      	ldr	r1, [r5, #0]
 8005c00:	0606      	lsls	r6, r0, #24
 8005c02:	f101 0304 	add.w	r3, r1, #4
 8005c06:	d50a      	bpl.n	8005c1e <_printf_i+0xce>
 8005c08:	680e      	ldr	r6, [r1, #0]
 8005c0a:	602b      	str	r3, [r5, #0]
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	da03      	bge.n	8005c18 <_printf_i+0xc8>
 8005c10:	232d      	movs	r3, #45	; 0x2d
 8005c12:	4276      	negs	r6, r6
 8005c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c18:	230a      	movs	r3, #10
 8005c1a:	485e      	ldr	r0, [pc, #376]	; (8005d94 <_printf_i+0x244>)
 8005c1c:	e019      	b.n	8005c52 <_printf_i+0x102>
 8005c1e:	680e      	ldr	r6, [r1, #0]
 8005c20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c24:	602b      	str	r3, [r5, #0]
 8005c26:	bf18      	it	ne
 8005c28:	b236      	sxthne	r6, r6
 8005c2a:	e7ef      	b.n	8005c0c <_printf_i+0xbc>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	1d19      	adds	r1, r3, #4
 8005c32:	6029      	str	r1, [r5, #0]
 8005c34:	0601      	lsls	r1, r0, #24
 8005c36:	d501      	bpl.n	8005c3c <_printf_i+0xec>
 8005c38:	681e      	ldr	r6, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <_printf_i+0xf2>
 8005c3c:	0646      	lsls	r6, r0, #25
 8005c3e:	d5fb      	bpl.n	8005c38 <_printf_i+0xe8>
 8005c40:	881e      	ldrh	r6, [r3, #0]
 8005c42:	2f6f      	cmp	r7, #111	; 0x6f
 8005c44:	bf0c      	ite	eq
 8005c46:	2308      	moveq	r3, #8
 8005c48:	230a      	movne	r3, #10
 8005c4a:	4852      	ldr	r0, [pc, #328]	; (8005d94 <_printf_i+0x244>)
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c52:	6865      	ldr	r5, [r4, #4]
 8005c54:	2d00      	cmp	r5, #0
 8005c56:	bfa8      	it	ge
 8005c58:	6821      	ldrge	r1, [r4, #0]
 8005c5a:	60a5      	str	r5, [r4, #8]
 8005c5c:	bfa4      	itt	ge
 8005c5e:	f021 0104 	bicge.w	r1, r1, #4
 8005c62:	6021      	strge	r1, [r4, #0]
 8005c64:	b90e      	cbnz	r6, 8005c6a <_printf_i+0x11a>
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	d04d      	beq.n	8005d06 <_printf_i+0x1b6>
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c70:	fb03 6711 	mls	r7, r3, r1, r6
 8005c74:	5dc7      	ldrb	r7, [r0, r7]
 8005c76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c7a:	4637      	mov	r7, r6
 8005c7c:	42bb      	cmp	r3, r7
 8005c7e:	460e      	mov	r6, r1
 8005c80:	d9f4      	bls.n	8005c6c <_printf_i+0x11c>
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d10b      	bne.n	8005c9e <_printf_i+0x14e>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	07de      	lsls	r6, r3, #31
 8005c8a:	d508      	bpl.n	8005c9e <_printf_i+0x14e>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	6861      	ldr	r1, [r4, #4]
 8005c90:	4299      	cmp	r1, r3
 8005c92:	bfde      	ittt	le
 8005c94:	2330      	movle	r3, #48	; 0x30
 8005c96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c9e:	1b52      	subs	r2, r2, r5
 8005ca0:	6122      	str	r2, [r4, #16]
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4640      	mov	r0, r8
 8005ca8:	f8cd a000 	str.w	sl, [sp]
 8005cac:	aa03      	add	r2, sp, #12
 8005cae:	f7ff fedf 	bl	8005a70 <_printf_common>
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d14c      	bne.n	8005d50 <_printf_i+0x200>
 8005cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cba:	b004      	add	sp, #16
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	4834      	ldr	r0, [pc, #208]	; (8005d94 <_printf_i+0x244>)
 8005cc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005cc6:	6829      	ldr	r1, [r5, #0]
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cce:	6029      	str	r1, [r5, #0]
 8005cd0:	061d      	lsls	r5, r3, #24
 8005cd2:	d514      	bpl.n	8005cfe <_printf_i+0x1ae>
 8005cd4:	07df      	lsls	r7, r3, #31
 8005cd6:	bf44      	itt	mi
 8005cd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cdc:	6023      	strmi	r3, [r4, #0]
 8005cde:	b91e      	cbnz	r6, 8005ce8 <_printf_i+0x198>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f023 0320 	bic.w	r3, r3, #32
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	2310      	movs	r3, #16
 8005cea:	e7af      	b.n	8005c4c <_printf_i+0xfc>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f043 0320 	orr.w	r3, r3, #32
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	2378      	movs	r3, #120	; 0x78
 8005cf6:	4828      	ldr	r0, [pc, #160]	; (8005d98 <_printf_i+0x248>)
 8005cf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cfc:	e7e3      	b.n	8005cc6 <_printf_i+0x176>
 8005cfe:	0659      	lsls	r1, r3, #25
 8005d00:	bf48      	it	mi
 8005d02:	b2b6      	uxthmi	r6, r6
 8005d04:	e7e6      	b.n	8005cd4 <_printf_i+0x184>
 8005d06:	4615      	mov	r5, r2
 8005d08:	e7bb      	b.n	8005c82 <_printf_i+0x132>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	6826      	ldr	r6, [r4, #0]
 8005d0e:	1d18      	adds	r0, r3, #4
 8005d10:	6961      	ldr	r1, [r4, #20]
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	0635      	lsls	r5, r6, #24
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	d501      	bpl.n	8005d1e <_printf_i+0x1ce>
 8005d1a:	6019      	str	r1, [r3, #0]
 8005d1c:	e002      	b.n	8005d24 <_printf_i+0x1d4>
 8005d1e:	0670      	lsls	r0, r6, #25
 8005d20:	d5fb      	bpl.n	8005d1a <_printf_i+0x1ca>
 8005d22:	8019      	strh	r1, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	4615      	mov	r5, r2
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	e7ba      	b.n	8005ca2 <_printf_i+0x152>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	2100      	movs	r1, #0
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	602a      	str	r2, [r5, #0]
 8005d34:	681d      	ldr	r5, [r3, #0]
 8005d36:	6862      	ldr	r2, [r4, #4]
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 f82f 	bl	8005d9c <memchr>
 8005d3e:	b108      	cbz	r0, 8005d44 <_printf_i+0x1f4>
 8005d40:	1b40      	subs	r0, r0, r5
 8005d42:	6060      	str	r0, [r4, #4]
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4e:	e7a8      	b.n	8005ca2 <_printf_i+0x152>
 8005d50:	462a      	mov	r2, r5
 8005d52:	4649      	mov	r1, r9
 8005d54:	4640      	mov	r0, r8
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	47d0      	blx	sl
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d0ab      	beq.n	8005cb6 <_printf_i+0x166>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	079b      	lsls	r3, r3, #30
 8005d62:	d413      	bmi.n	8005d8c <_printf_i+0x23c>
 8005d64:	68e0      	ldr	r0, [r4, #12]
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	4298      	cmp	r0, r3
 8005d6a:	bfb8      	it	lt
 8005d6c:	4618      	movlt	r0, r3
 8005d6e:	e7a4      	b.n	8005cba <_printf_i+0x16a>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4632      	mov	r2, r6
 8005d74:	4649      	mov	r1, r9
 8005d76:	4640      	mov	r0, r8
 8005d78:	47d0      	blx	sl
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d09b      	beq.n	8005cb6 <_printf_i+0x166>
 8005d7e:	3501      	adds	r5, #1
 8005d80:	68e3      	ldr	r3, [r4, #12]
 8005d82:	9903      	ldr	r1, [sp, #12]
 8005d84:	1a5b      	subs	r3, r3, r1
 8005d86:	42ab      	cmp	r3, r5
 8005d88:	dcf2      	bgt.n	8005d70 <_printf_i+0x220>
 8005d8a:	e7eb      	b.n	8005d64 <_printf_i+0x214>
 8005d8c:	2500      	movs	r5, #0
 8005d8e:	f104 0619 	add.w	r6, r4, #25
 8005d92:	e7f5      	b.n	8005d80 <_printf_i+0x230>
 8005d94:	0800a127 	.word	0x0800a127
 8005d98:	0800a138 	.word	0x0800a138

08005d9c <memchr>:
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	b2c9      	uxtb	r1, r1
 8005da2:	4402      	add	r2, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	d101      	bne.n	8005dae <memchr+0x12>
 8005daa:	2000      	movs	r0, #0
 8005dac:	e003      	b.n	8005db6 <memchr+0x1a>
 8005dae:	7804      	ldrb	r4, [r0, #0]
 8005db0:	3301      	adds	r3, #1
 8005db2:	428c      	cmp	r4, r1
 8005db4:	d1f6      	bne.n	8005da4 <memchr+0x8>
 8005db6:	bd10      	pop	{r4, pc}

08005db8 <_free_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4605      	mov	r5, r0
 8005dbc:	2900      	cmp	r1, #0
 8005dbe:	d040      	beq.n	8005e42 <_free_r+0x8a>
 8005dc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc4:	1f0c      	subs	r4, r1, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	bfb8      	it	lt
 8005dca:	18e4      	addlt	r4, r4, r3
 8005dcc:	f000 f910 	bl	8005ff0 <__malloc_lock>
 8005dd0:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <_free_r+0x8c>)
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	b933      	cbnz	r3, 8005de4 <_free_r+0x2c>
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	6014      	str	r4, [r2, #0]
 8005dda:	4628      	mov	r0, r5
 8005ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de0:	f000 b90c 	b.w	8005ffc <__malloc_unlock>
 8005de4:	42a3      	cmp	r3, r4
 8005de6:	d908      	bls.n	8005dfa <_free_r+0x42>
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	1821      	adds	r1, r4, r0
 8005dec:	428b      	cmp	r3, r1
 8005dee:	bf01      	itttt	eq
 8005df0:	6819      	ldreq	r1, [r3, #0]
 8005df2:	685b      	ldreq	r3, [r3, #4]
 8005df4:	1809      	addeq	r1, r1, r0
 8005df6:	6021      	streq	r1, [r4, #0]
 8005df8:	e7ed      	b.n	8005dd6 <_free_r+0x1e>
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	b10b      	cbz	r3, 8005e04 <_free_r+0x4c>
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	d9fa      	bls.n	8005dfa <_free_r+0x42>
 8005e04:	6811      	ldr	r1, [r2, #0]
 8005e06:	1850      	adds	r0, r2, r1
 8005e08:	42a0      	cmp	r0, r4
 8005e0a:	d10b      	bne.n	8005e24 <_free_r+0x6c>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	4401      	add	r1, r0
 8005e10:	1850      	adds	r0, r2, r1
 8005e12:	4283      	cmp	r3, r0
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	d1e0      	bne.n	8005dda <_free_r+0x22>
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4401      	add	r1, r0
 8005e1e:	6011      	str	r1, [r2, #0]
 8005e20:	6053      	str	r3, [r2, #4]
 8005e22:	e7da      	b.n	8005dda <_free_r+0x22>
 8005e24:	d902      	bls.n	8005e2c <_free_r+0x74>
 8005e26:	230c      	movs	r3, #12
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	e7d6      	b.n	8005dda <_free_r+0x22>
 8005e2c:	6820      	ldr	r0, [r4, #0]
 8005e2e:	1821      	adds	r1, r4, r0
 8005e30:	428b      	cmp	r3, r1
 8005e32:	bf01      	itttt	eq
 8005e34:	6819      	ldreq	r1, [r3, #0]
 8005e36:	685b      	ldreq	r3, [r3, #4]
 8005e38:	1809      	addeq	r1, r1, r0
 8005e3a:	6021      	streq	r1, [r4, #0]
 8005e3c:	6063      	str	r3, [r4, #4]
 8005e3e:	6054      	str	r4, [r2, #4]
 8005e40:	e7cb      	b.n	8005dda <_free_r+0x22>
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20000784 	.word	0x20000784

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0e      	ldr	r6, [pc, #56]	; (8005e84 <sbrk_aligned+0x3c>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f000 f8bc 	bl	8005fd0 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f8b7 	bl	8005fd0 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d00a      	beq.n	8005e7c <sbrk_aligned+0x34>
 8005e66:	1cc4      	adds	r4, r0, #3
 8005e68:	f024 0403 	bic.w	r4, r4, #3
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	d007      	beq.n	8005e80 <sbrk_aligned+0x38>
 8005e70:	1a21      	subs	r1, r4, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f000 f8ac 	bl	8005fd0 <_sbrk_r>
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d101      	bne.n	8005e80 <sbrk_aligned+0x38>
 8005e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e80:	4620      	mov	r0, r4
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	20000788 	.word	0x20000788

08005e88 <_malloc_r>:
 8005e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e8c:	1ccd      	adds	r5, r1, #3
 8005e8e:	f025 0503 	bic.w	r5, r5, #3
 8005e92:	3508      	adds	r5, #8
 8005e94:	2d0c      	cmp	r5, #12
 8005e96:	bf38      	it	cc
 8005e98:	250c      	movcc	r5, #12
 8005e9a:	2d00      	cmp	r5, #0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	db01      	blt.n	8005ea4 <_malloc_r+0x1c>
 8005ea0:	42a9      	cmp	r1, r5
 8005ea2:	d905      	bls.n	8005eb0 <_malloc_r+0x28>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	603b      	str	r3, [r7, #0]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	4e2e      	ldr	r6, [pc, #184]	; (8005f6c <_malloc_r+0xe4>)
 8005eb2:	f000 f89d 	bl	8005ff0 <__malloc_lock>
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	461c      	mov	r4, r3
 8005eba:	bb34      	cbnz	r4, 8005f0a <_malloc_r+0x82>
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	f7ff ffc2 	bl	8005e48 <sbrk_aligned>
 8005ec4:	1c43      	adds	r3, r0, #1
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	d14d      	bne.n	8005f66 <_malloc_r+0xde>
 8005eca:	6834      	ldr	r4, [r6, #0]
 8005ecc:	4626      	mov	r6, r4
 8005ece:	2e00      	cmp	r6, #0
 8005ed0:	d140      	bne.n	8005f54 <_malloc_r+0xcc>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	eb04 0803 	add.w	r8, r4, r3
 8005edc:	f000 f878 	bl	8005fd0 <_sbrk_r>
 8005ee0:	4580      	cmp	r8, r0
 8005ee2:	d13a      	bne.n	8005f5a <_malloc_r+0xd2>
 8005ee4:	6821      	ldr	r1, [r4, #0]
 8005ee6:	3503      	adds	r5, #3
 8005ee8:	1a6d      	subs	r5, r5, r1
 8005eea:	f025 0503 	bic.w	r5, r5, #3
 8005eee:	3508      	adds	r5, #8
 8005ef0:	2d0c      	cmp	r5, #12
 8005ef2:	bf38      	it	cc
 8005ef4:	250c      	movcc	r5, #12
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	4629      	mov	r1, r5
 8005efa:	f7ff ffa5 	bl	8005e48 <sbrk_aligned>
 8005efe:	3001      	adds	r0, #1
 8005f00:	d02b      	beq.n	8005f5a <_malloc_r+0xd2>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	442b      	add	r3, r5
 8005f06:	6023      	str	r3, [r4, #0]
 8005f08:	e00e      	b.n	8005f28 <_malloc_r+0xa0>
 8005f0a:	6822      	ldr	r2, [r4, #0]
 8005f0c:	1b52      	subs	r2, r2, r5
 8005f0e:	d41e      	bmi.n	8005f4e <_malloc_r+0xc6>
 8005f10:	2a0b      	cmp	r2, #11
 8005f12:	d916      	bls.n	8005f42 <_malloc_r+0xba>
 8005f14:	1961      	adds	r1, r4, r5
 8005f16:	42a3      	cmp	r3, r4
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	6059      	strne	r1, [r3, #4]
 8005f1e:	6863      	ldr	r3, [r4, #4]
 8005f20:	bf08      	it	eq
 8005f22:	6031      	streq	r1, [r6, #0]
 8005f24:	5162      	str	r2, [r4, r5]
 8005f26:	604b      	str	r3, [r1, #4]
 8005f28:	4638      	mov	r0, r7
 8005f2a:	f104 060b 	add.w	r6, r4, #11
 8005f2e:	f000 f865 	bl	8005ffc <__malloc_unlock>
 8005f32:	f026 0607 	bic.w	r6, r6, #7
 8005f36:	1d23      	adds	r3, r4, #4
 8005f38:	1af2      	subs	r2, r6, r3
 8005f3a:	d0b6      	beq.n	8005eaa <_malloc_r+0x22>
 8005f3c:	1b9b      	subs	r3, r3, r6
 8005f3e:	50a3      	str	r3, [r4, r2]
 8005f40:	e7b3      	b.n	8005eaa <_malloc_r+0x22>
 8005f42:	6862      	ldr	r2, [r4, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	bf0c      	ite	eq
 8005f48:	6032      	streq	r2, [r6, #0]
 8005f4a:	605a      	strne	r2, [r3, #4]
 8005f4c:	e7ec      	b.n	8005f28 <_malloc_r+0xa0>
 8005f4e:	4623      	mov	r3, r4
 8005f50:	6864      	ldr	r4, [r4, #4]
 8005f52:	e7b2      	b.n	8005eba <_malloc_r+0x32>
 8005f54:	4634      	mov	r4, r6
 8005f56:	6876      	ldr	r6, [r6, #4]
 8005f58:	e7b9      	b.n	8005ece <_malloc_r+0x46>
 8005f5a:	230c      	movs	r3, #12
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	603b      	str	r3, [r7, #0]
 8005f60:	f000 f84c 	bl	8005ffc <__malloc_unlock>
 8005f64:	e7a1      	b.n	8005eaa <_malloc_r+0x22>
 8005f66:	6025      	str	r5, [r4, #0]
 8005f68:	e7de      	b.n	8005f28 <_malloc_r+0xa0>
 8005f6a:	bf00      	nop
 8005f6c:	20000784 	.word	0x20000784

08005f70 <_realloc_r>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	4614      	mov	r4, r2
 8005f78:	460e      	mov	r6, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x16>
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	f7ff bf81 	b.w	8005e88 <_malloc_r>
 8005f86:	b92a      	cbnz	r2, 8005f94 <_realloc_r+0x24>
 8005f88:	f7ff ff16 	bl	8005db8 <_free_r>
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	f000 f838 	bl	8006008 <_malloc_usable_size_r>
 8005f98:	4284      	cmp	r4, r0
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	d802      	bhi.n	8005fa4 <_realloc_r+0x34>
 8005f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fa2:	d812      	bhi.n	8005fca <_realloc_r+0x5a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff ff6e 	bl	8005e88 <_malloc_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0ed      	beq.n	8005f8e <_realloc_r+0x1e>
 8005fb2:	42bc      	cmp	r4, r7
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	bf28      	it	cs
 8005fba:	463a      	movcs	r2, r7
 8005fbc:	f7ff fb98 	bl	80056f0 <memcpy>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fef8 	bl	8005db8 <_free_r>
 8005fc8:	e7e1      	b.n	8005f8e <_realloc_r+0x1e>
 8005fca:	4635      	mov	r5, r6
 8005fcc:	e7df      	b.n	8005f8e <_realloc_r+0x1e>
	...

08005fd0 <_sbrk_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	4d05      	ldr	r5, [pc, #20]	; (8005fec <_sbrk_r+0x1c>)
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fb fe9c 	bl	8001d18 <_sbrk>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_sbrk_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_sbrk_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	2000078c 	.word	0x2000078c

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f000 b811 	b.w	8006018 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20000790 	.word	0x20000790

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f000 b80c 	b.w	800601a <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	20000790 	.word	0x20000790

08006008 <_malloc_usable_size_r>:
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f18      	subs	r0, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfbc      	itt	lt
 8006012:	580b      	ldrlt	r3, [r1, r0]
 8006014:	18c0      	addlt	r0, r0, r3
 8006016:	4770      	bx	lr

08006018 <__retarget_lock_acquire_recursive>:
 8006018:	4770      	bx	lr

0800601a <__retarget_lock_release_recursive>:
 800601a:	4770      	bx	lr

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
