
motor_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001384  080020f8  080020f8  000120f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800347c  0800347c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800347c  0800347c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800347c  0800347c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000014  08003498  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08003498  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae1f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0002ae5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172f0  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c832  00000000  00000000  000453d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a24  00000000  00000000  00051c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003220  00000000  00000000  000db678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080020e0 	.word	0x080020e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080020e0 	.word	0x080020e0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fce6 	bl	8000b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f836 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f906 	bl	8000368 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f878 	bl	8000250 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000160:	f000 f8ae 	bl	80002c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000164:	f000 faa8 	bl	80006b8 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	ssd1306_SetCursor(2, 2);
 8000168:	2102      	movs	r1, #2
 800016a:	2002      	movs	r0, #2
 800016c:	f000 fc68 	bl	8000a40 <ssd1306_SetCursor>
	ssd1306_Fill(Black);
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fb0b 	bl	800078c <ssd1306_Fill>
	ssd1306_WriteString("Start...", Font_16x26, White);
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <main+0x6c>)
 8000178:	2301      	movs	r3, #1
 800017a:	ca06      	ldmia	r2, {r1, r2}
 800017c:	480f      	ldr	r0, [pc, #60]	; (80001bc <main+0x70>)
 800017e:	f000 fc39 	bl	80009f4 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000182:	f000 fb25 	bl	80007d0 <ssd1306_UpdateScreen>
  	HAL_Delay(1500);
 8000186:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800018a:	f000 fd2b 	bl	8000be4 <HAL_Delay>
  	ssd1306_SetCursor(2, 20);
 800018e:	2114      	movs	r1, #20
 8000190:	2002      	movs	r0, #2
 8000192:	f000 fc55 	bl	8000a40 <ssd1306_SetCursor>
  	ssd1306_Fill(Black);
 8000196:	2000      	movs	r0, #0
 8000198:	f000 faf8 	bl	800078c <ssd1306_Fill>
  	ssd1306_WriteString("Stop...", Font_16x26, White);
 800019c:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <main+0x6c>)
 800019e:	2301      	movs	r3, #1
 80001a0:	ca06      	ldmia	r2, {r1, r2}
 80001a2:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x74>)
 80001a4:	f000 fc26 	bl	80009f4 <ssd1306_WriteString>
  	ssd1306_UpdateScreen();
 80001a8:	f000 fb12 	bl	80007d0 <ssd1306_UpdateScreen>
  	HAL_Delay(1500);
 80001ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80001b0:	f000 fd18 	bl	8000be4 <HAL_Delay>
	ssd1306_SetCursor(2, 2);
 80001b4:	e7d8      	b.n	8000168 <main+0x1c>
 80001b6:	bf00      	nop
 80001b8:	20000004 	.word	0x20000004
 80001bc:	080020f8 	.word	0x080020f8
 80001c0:	08002104 	.word	0x08002104

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b090      	sub	sp, #64	; 0x40
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 ff7c 	bl	80020d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e6:	2301      	movs	r3, #1
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f8:	2302      	movs	r3, #2
 80001fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000202:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000206:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000208:	f107 0318 	add.w	r3, r7, #24
 800020c:	4618      	mov	r0, r3
 800020e:	f000 ff8d 	bl	800112c <HAL_RCC_OscConfig>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d001      	beq.n	800021c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000218:	f000 f904 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021c:	230f      	movs	r3, #15
 800021e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000220:	2302      	movs	r3, #2
 8000222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f001 f9fa 	bl	8001630 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000242:	f000 f8ef 	bl	8000424 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	; 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <MX_SPI1_Init+0x6c>)
 8000258:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_SPI1_Init+0x68>)
 800025c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000260:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000264:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000268:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <MX_SPI1_Init+0x68>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000272:	2200      	movs	r2, #0
 8000274:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000276:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000278:	2200      	movs	r2, #0
 800027a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_SPI1_Init+0x68>)
 800027e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000282:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000286:	2230      	movs	r2, #48	; 0x30
 8000288:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <MX_SPI1_Init+0x68>)
 800028c:	2200      	movs	r2, #0
 800028e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000290:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000292:	2200      	movs	r2, #0
 8000294:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <MX_SPI1_Init+0x68>)
 8000298:	2200      	movs	r2, #0
 800029a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_SPI1_Init+0x68>)
 800029e:	220a      	movs	r2, #10
 80002a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <MX_SPI1_Init+0x68>)
 80002a4:	f001 fb20 	bl	80018e8 <HAL_SPI_Init>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80002ae:	f000 f8b9 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	20000030 	.word	0x20000030
 80002bc:	40013000 	.word	0x40013000

080002c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002c6:	f107 030c 	add.w	r3, r7, #12
 80002ca:	2224      	movs	r2, #36	; 0x24
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fefe 	bl	80020d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80002dc:	4b20      	ldr	r3, [pc, #128]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002de:	4a21      	ldr	r2, [pc, #132]	; (8000364 <MX_TIM4_Init+0xa4>)
 80002e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_TIM4_Init+0xa0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000302:	2301      	movs	r3, #1
 8000304:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000316:	2300      	movs	r3, #0
 8000318:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800031a:	2301      	movs	r3, #1
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4619      	mov	r1, r3
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_TIM4_Init+0xa0>)
 800032e:	f001 fd49 	bl	8001dc4 <HAL_TIM_Encoder_Init>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000338:	f000 f874 	bl	8000424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_TIM4_Init+0xa0>)
 800034a:	f001 fe3f 	bl	8001fcc <HAL_TIMEx_MasterConfigSynchronization>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 f866 	bl	8000424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3730      	adds	r7, #48	; 0x30
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20000088 	.word	0x20000088
 8000364:	40000800 	.word	0x40000800

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <MX_GPIO_Init+0xb0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a25      	ldr	r2, [pc, #148]	; (8000418 <MX_GPIO_Init+0xb0>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <MX_GPIO_Init+0xb0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	60fb      	str	r3, [r7, #12]
 8000392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000394:	4b20      	ldr	r3, [pc, #128]	; (8000418 <MX_GPIO_Init+0xb0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1f      	ldr	r2, [pc, #124]	; (8000418 <MX_GPIO_Init+0xb0>)
 800039a:	f043 0304 	orr.w	r3, r3, #4
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b1d      	ldr	r3, [pc, #116]	; (8000418 <MX_GPIO_Init+0xb0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0304 	and.w	r3, r3, #4
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b1a      	ldr	r3, [pc, #104]	; (8000418 <MX_GPIO_Init+0xb0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a19      	ldr	r2, [pc, #100]	; (8000418 <MX_GPIO_Init+0xb0>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <MX_GPIO_Init+0xb0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2140      	movs	r1, #64	; 0x40
 80003c8:	4814      	ldr	r0, [pc, #80]	; (800041c <MX_GPIO_Init+0xb4>)
 80003ca:	f000 fe97 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2103      	movs	r1, #3
 80003d2:	4813      	ldr	r0, [pc, #76]	; (8000420 <MX_GPIO_Init+0xb8>)
 80003d4:	f000 fe92 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80003d8:	2340      	movs	r3, #64	; 0x40
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	480b      	ldr	r0, [pc, #44]	; (800041c <MX_GPIO_Init+0xb4>)
 80003f0:	f000 fd00 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 80003f4:	2303      	movs	r3, #3
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2302      	movs	r3, #2
 8000402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_GPIO_Init+0xb8>)
 800040c:	f000 fcf2 	bl	8000df4 <HAL_GPIO_Init>

}
 8000410:	bf00      	nop
 8000412:	3720      	adds	r7, #32
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	40010c00 	.word	0x40010c00

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000428:	b672      	cpsid	i
}
 800042a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800042c:	e7fe      	b.n	800042c <Error_Handler+0x8>
	...

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000436:	4b15      	ldr	r3, [pc, #84]	; (800048c <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	4a14      	ldr	r2, [pc, #80]	; (800048c <HAL_MspInit+0x5c>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6193      	str	r3, [r2, #24]
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_MspInit+0x5c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_MspInit+0x5c>)
 8000454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x5c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_MspInit+0x60>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <HAL_MspInit+0x60>)
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	bf00      	nop
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40021000 	.word	0x40021000
 8000490:	40010000 	.word	0x40010000

08000494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a15      	ldr	r2, [pc, #84]	; (8000504 <HAL_SPI_MspInit+0x70>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d123      	bne.n	80004fc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_SPI_MspInit+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e8:	2302      	movs	r3, #2
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_SPI_MspInit+0x78>)
 80004f8:	f000 fc7c 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40013000 	.word	0x40013000
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <HAL_TIM_Encoder_MspInit+0x70>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d123      	bne.n	8000578 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4a13      	ldr	r2, [pc, #76]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	61d3      	str	r3, [r2, #28]
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000548:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <HAL_TIM_Encoder_MspInit+0x74>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0308 	and.w	r3, r3, #8
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000560:	23c0      	movs	r3, #192	; 0xc0
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <HAL_TIM_Encoder_MspInit+0x78>)
 8000574:	f000 fc3e 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40000800 	.word	0x40000800
 8000584:	40021000 	.word	0x40021000
 8000588:	40010c00 	.word	0x40010c00

0800058c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <NMI_Handler+0x4>

08000592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <MemManage_Handler+0x4>

0800059e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <BusFault_Handler+0x4>

080005a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <UsageFault_Handler+0x4>

080005aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 faeb 	bl	8000bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}

080005da <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
	...

080005e8 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <ssd1306_Reset+0x34>)
 80005f2:	f000 fd83 	bl	80010fc <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2101      	movs	r1, #1
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <ssd1306_Reset+0x34>)
 80005fc:	f000 fd7e 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 faef 	bl	8000be4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <ssd1306_Reset+0x34>)
 800060c:	f000 fd76 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fae7 	bl	8000be4 <HAL_Delay>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40010c00 	.word	0x40010c00

08000620 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <ssd1306_WriteCommand+0x40>)
 8000630:	f000 fd64 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 8000634:	2200      	movs	r2, #0
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	480a      	ldr	r0, [pc, #40]	; (8000664 <ssd1306_WriteCommand+0x44>)
 800063a:	f000 fd5f 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2201      	movs	r2, #1
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <ssd1306_WriteCommand+0x48>)
 8000648:	f001 f9d2 	bl	80019f0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800064c:	2201      	movs	r2, #1
 800064e:	2102      	movs	r1, #2
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <ssd1306_WriteCommand+0x40>)
 8000652:	f000 fd53 	bl	80010fc <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40010c00 	.word	0x40010c00
 8000664:	40010800 	.word	0x40010800
 8000668:	20000030 	.word	0x20000030

0800066c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8000676:	2200      	movs	r2, #0
 8000678:	2102      	movs	r1, #2
 800067a:	480c      	ldr	r0, [pc, #48]	; (80006ac <ssd1306_WriteData+0x40>)
 800067c:	f000 fd3e 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8000680:	2201      	movs	r2, #1
 8000682:	2140      	movs	r1, #64	; 0x40
 8000684:	480a      	ldr	r0, [pc, #40]	; (80006b0 <ssd1306_WriteData+0x44>)
 8000686:	f000 fd39 	bl	80010fc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b29a      	uxth	r2, r3
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <ssd1306_WriteData+0x48>)
 8000696:	f001 f9ab 	bl	80019f0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800069a:	2201      	movs	r2, #1
 800069c:	2102      	movs	r1, #2
 800069e:	4803      	ldr	r0, [pc, #12]	; (80006ac <ssd1306_WriteData+0x40>)
 80006a0:	f000 fd2c 	bl	80010fc <HAL_GPIO_WritePin>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40010c00 	.word	0x40010c00
 80006b0:	40010800 	.word	0x40010800
 80006b4:	20000030 	.word	0x20000030

080006b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80006bc:	f7ff ff94 	bl	80005e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f000 fa8f 	bl	8000be4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f9e6 	bl	8000a98 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80006cc:	2020      	movs	r0, #32
 80006ce:	f7ff ffa7 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80006d2:	2000      	movs	r0, #0
 80006d4:	f7ff ffa4 	bl	8000620 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006d8:	20b0      	movs	r0, #176	; 0xb0
 80006da:	f7ff ffa1 	bl	8000620 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80006de:	20c8      	movs	r0, #200	; 0xc8
 80006e0:	f7ff ff9e 	bl	8000620 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ff9b 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80006ea:	2010      	movs	r0, #16
 80006ec:	f7ff ff98 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80006f0:	2040      	movs	r0, #64	; 0x40
 80006f2:	f7ff ff95 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80006f6:	20ff      	movs	r0, #255	; 0xff
 80006f8:	f000 f9ba 	bl	8000a70 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80006fc:	20a1      	movs	r0, #161	; 0xa1
 80006fe:	f7ff ff8f 	bl	8000620 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000702:	20a6      	movs	r0, #166	; 0xa6
 8000704:	f7ff ff8c 	bl	8000620 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000708:	20a8      	movs	r0, #168	; 0xa8
 800070a:	f7ff ff89 	bl	8000620 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800070e:	203f      	movs	r0, #63	; 0x3f
 8000710:	f7ff ff86 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000714:	20a4      	movs	r0, #164	; 0xa4
 8000716:	f7ff ff83 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800071a:	20d3      	movs	r0, #211	; 0xd3
 800071c:	f7ff ff80 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff ff7d 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000726:	20d5      	movs	r0, #213	; 0xd5
 8000728:	f7ff ff7a 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800072c:	20f0      	movs	r0, #240	; 0xf0
 800072e:	f7ff ff77 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000732:	20d9      	movs	r0, #217	; 0xd9
 8000734:	f7ff ff74 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000738:	2022      	movs	r0, #34	; 0x22
 800073a:	f7ff ff71 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800073e:	20da      	movs	r0, #218	; 0xda
 8000740:	f7ff ff6e 	bl	8000620 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000744:	2012      	movs	r0, #18
 8000746:	f7ff ff6b 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800074a:	20db      	movs	r0, #219	; 0xdb
 800074c:	f7ff ff68 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000750:	2020      	movs	r0, #32
 8000752:	f7ff ff65 	bl	8000620 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000756:	208d      	movs	r0, #141	; 0x8d
 8000758:	f7ff ff62 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800075c:	2014      	movs	r0, #20
 800075e:	f7ff ff5f 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000762:	2001      	movs	r0, #1
 8000764:	f000 f998 	bl	8000a98 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000768:	2000      	movs	r0, #0
 800076a:	f000 f80f 	bl	800078c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800076e:	f000 f82f 	bl	80007d0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <ssd1306_Init+0xd0>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <ssd1306_Init+0xd0>)
 800077a:	2200      	movs	r2, #0
 800077c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <ssd1306_Init+0xd0>)
 8000780:	2201      	movs	r2, #1
 8000782:	711a      	strb	r2, [r3, #4]
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200004e0 	.word	0x200004e0

0800078c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e00d      	b.n	80007b8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d101      	bne.n	80007a6 <ssd1306_Fill+0x1a>
 80007a2:	2100      	movs	r1, #0
 80007a4:	e000      	b.n	80007a8 <ssd1306_Fill+0x1c>
 80007a6:	21ff      	movs	r1, #255	; 0xff
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <ssd1306_Fill+0x40>)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80007be:	d3ed      	bcc.n	800079c <ssd1306_Fill+0x10>
    }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	200000d0 	.word	0x200000d0

080007d0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e01a      	b.n	8000812 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	3b50      	subs	r3, #80	; 0x50
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff1c 	bl	8000620 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f7ff ff19 	bl	8000620 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80007ee:	2010      	movs	r0, #16
 80007f0:	f7ff ff16 	bl	8000620 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	4613      	mov	r3, r2
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	4413      	add	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	461a      	mov	r2, r3
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <ssd1306_UpdateScreen+0x54>)
 8000802:	4413      	add	r3, r2
 8000804:	2182      	movs	r1, #130	; 0x82
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff30 	bl	800066c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	3301      	adds	r3, #1
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b07      	cmp	r3, #7
 8000816:	d9e1      	bls.n	80007dc <ssd1306_UpdateScreen+0xc>
    }
}
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200000d0 	.word	0x200000d0

08000828 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000828:	b490      	push	{r4, r7}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
 8000832:	460b      	mov	r3, r1
 8000834:	71bb      	strb	r3, [r7, #6]
 8000836:	4613      	mov	r3, r2
 8000838:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	2b81      	cmp	r3, #129	; 0x81
 800083e:	d849      	bhi.n	80008d4 <ssd1306_DrawPixel+0xac>
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b3f      	cmp	r3, #63	; 0x3f
 8000844:	d846      	bhi.n	80008d4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d120      	bne.n	800088e <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800084c:	79fa      	ldrb	r2, [r7, #7]
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	08db      	lsrs	r3, r3, #3
 8000852:	b2d8      	uxtb	r0, r3
 8000854:	4601      	mov	r1, r0
 8000856:	460b      	mov	r3, r1
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	440b      	add	r3, r1
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <ssd1306_DrawPixel+0xb8>)
 8000862:	5cd3      	ldrb	r3, [r2, r3]
 8000864:	b25a      	sxtb	r2, r3
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	f003 0307 	and.w	r3, r3, #7
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	b25b      	sxtb	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b25c      	sxtb	r4, r3
 8000878:	79fa      	ldrb	r2, [r7, #7]
 800087a:	4601      	mov	r1, r0
 800087c:	460b      	mov	r3, r1
 800087e:	019b      	lsls	r3, r3, #6
 8000880:	440b      	add	r3, r1
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	b2e1      	uxtb	r1, r4
 8000888:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <ssd1306_DrawPixel+0xb8>)
 800088a:	54d1      	strb	r1, [r2, r3]
 800088c:	e023      	b.n	80008d6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b2d8      	uxtb	r0, r3
 8000896:	4601      	mov	r1, r0
 8000898:	460b      	mov	r3, r1
 800089a:	019b      	lsls	r3, r3, #6
 800089c:	440b      	add	r3, r1
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <ssd1306_DrawPixel+0xb8>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	b25a      	sxtb	r2, r3
 80008a8:	79bb      	ldrb	r3, [r7, #6]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4013      	ands	r3, r2
 80008bc:	b25c      	sxtb	r4, r3
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	4601      	mov	r1, r0
 80008c2:	460b      	mov	r3, r1
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	440b      	add	r3, r1
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	b2e1      	uxtb	r1, r4
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <ssd1306_DrawPixel+0xb8>)
 80008d0:	54d1      	strb	r1, [r2, r3]
 80008d2:	e000      	b.n	80008d6 <ssd1306_DrawPixel+0xae>
        return;
 80008d4:	bf00      	nop
    }
}
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc90      	pop	{r4, r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	200000d0 	.word	0x200000d0

080008e4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4604      	mov	r4, r0
 80008ec:	1d38      	adds	r0, r7, #4
 80008ee:	e880 0006 	stmia.w	r0, {r1, r2}
 80008f2:	461a      	mov	r2, r3
 80008f4:	4623      	mov	r3, r4
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	4613      	mov	r3, r2
 80008fa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	2b1f      	cmp	r3, #31
 8000900:	d902      	bls.n	8000908 <ssd1306_WriteChar+0x24>
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	2b7e      	cmp	r3, #126	; 0x7e
 8000906:	d901      	bls.n	800090c <ssd1306_WriteChar+0x28>
        return 0;
 8000908:	2300      	movs	r3, #0
 800090a:	e06d      	b.n	80009e8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800090c:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	793b      	ldrb	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	2b82      	cmp	r3, #130	; 0x82
 8000918:	dc06      	bgt.n	8000928 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 800091c:	885b      	ldrh	r3, [r3, #2]
 800091e:	461a      	mov	r2, r3
 8000920:	797b      	ldrb	r3, [r7, #5]
 8000922:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000924:	2b40      	cmp	r3, #64	; 0x40
 8000926:	dd01      	ble.n	800092c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000928:	2300      	movs	r3, #0
 800092a:	e05d      	b.n	80009e8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
 8000930:	e04c      	b.n	80009cc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3b20      	subs	r3, #32
 8000938:	7979      	ldrb	r1, [r7, #5]
 800093a:	fb01 f303 	mul.w	r3, r1, r3
 800093e:	4619      	mov	r1, r3
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	440b      	add	r3, r1
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
 8000950:	e034      	b.n	80009bc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000952:	697a      	ldr	r2, [r7, #20]
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d012      	beq.n	8000988 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4413      	add	r3, r2
 800096e:	b2d8      	uxtb	r0, r3
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 8000972:	885b      	ldrh	r3, [r3, #2]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	7bba      	ldrb	r2, [r7, #14]
 8000980:	4619      	mov	r1, r3
 8000982:	f7ff ff51 	bl	8000828 <ssd1306_DrawPixel>
 8000986:	e016      	b.n	80009b6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 800098a:	881b      	ldrh	r3, [r3, #0]
 800098c:	b2da      	uxtb	r2, r3
 800098e:	69bb      	ldr	r3, [r7, #24]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4413      	add	r3, r2
 8000994:	b2d8      	uxtb	r0, r3
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 8000998:	885b      	ldrh	r3, [r3, #2]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4413      	add	r3, r2
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	7bbb      	ldrb	r3, [r7, #14]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf0c      	ite	eq
 80009aa:	2301      	moveq	r3, #1
 80009ac:	2300      	movne	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	f7ff ff39 	bl	8000828 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	3301      	adds	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	793b      	ldrb	r3, [r7, #4]
 80009be:	461a      	mov	r2, r3
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d3c5      	bcc.n	8000952 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3301      	adds	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
 80009cc:	797b      	ldrb	r3, [r7, #5]
 80009ce:	461a      	mov	r2, r3
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d3ad      	bcc.n	8000932 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 80009d8:	881a      	ldrh	r2, [r3, #0]
 80009da:	793b      	ldrb	r3, [r7, #4]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	4413      	add	r3, r2
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <ssd1306_WriteChar+0x10c>)
 80009e4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3724      	adds	r7, #36	; 0x24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	200004e0 	.word	0x200004e0

080009f4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	1d38      	adds	r0, r7, #4
 80009fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a02:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000a04:	e012      	b.n	8000a2c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	7818      	ldrb	r0, [r3, #0]
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	1d3a      	adds	r2, r7, #4
 8000a0e:	ca06      	ldmia	r2, {r1, r2}
 8000a10:	f7ff ff68 	bl	80008e4 <ssd1306_WriteChar>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d002      	beq.n	8000a26 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	e008      	b.n	8000a38 <ssd1306_WriteString+0x44>
        }
        str++;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1e8      	bne.n	8000a06 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	781b      	ldrb	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	460a      	mov	r2, r1
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <ssd1306_SetCursor+0x2c>)
 8000a56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <ssd1306_SetCursor+0x2c>)
 8000a5e:	805a      	strh	r2, [r3, #2]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	200004e0 	.word	0x200004e0

08000a70 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000a7a:	2381      	movs	r3, #129	; 0x81
 8000a7c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fdcd 	bl	8000620 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fdc9 	bl	8000620 <ssd1306_WriteCommand>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d005      	beq.n	8000ab4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000aa8:	23af      	movs	r3, #175	; 0xaf
 8000aaa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <ssd1306_SetDisplayOn+0x38>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	715a      	strb	r2, [r3, #5]
 8000ab2:	e004      	b.n	8000abe <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ab4:	23ae      	movs	r3, #174	; 0xae
 8000ab6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <ssd1306_SetDisplayOn+0x38>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fdad 	bl	8000620 <ssd1306_WriteCommand>
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200004e0 	.word	0x200004e0

08000ad4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff fd81 	bl	80005da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ada:	490c      	ldr	r1, [pc, #48]	; (8000b0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af0:	4c09      	ldr	r4, [pc, #36]	; (8000b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f001 fac3 	bl	8002088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b02:	f7ff fb23 	bl	800014c <main>
  bx lr
 8000b06:	4770      	bx	lr
  ldr r0, =_sdata
 8000b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b10:	08003484 	.word	0x08003484
  ldr r2, =_sbss
 8000b14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b18:	200004ec 	.word	0x200004ec

08000b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC1_2_IRQHandler>
	...

08000b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x28>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x28>)
 8000b2a:	f043 0310 	orr.w	r3, r3, #16
 8000b2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f92b 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fc78 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40022000 	.word	0x40022000

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f935 	bl	8000dda <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f90b 	bl	8000da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	2000000c 	.word	0x2000000c

08000bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x1c>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a03      	ldr	r2, [pc, #12]	; (8000bcc <HAL_IncTick+0x20>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000010 	.word	0x20000010
 8000bcc:	200004e8 	.word	0x200004e8

08000bd0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <HAL_GetTick+0x10>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	200004e8 	.word	0x200004e8

08000be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bec:	f7ff fff0 	bl	8000bd0 <HAL_GetTick>
 8000bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfc:	d005      	beq.n	8000c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_Delay+0x44>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4413      	add	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0a:	bf00      	nop
 8000c0c:	f7ff ffe0 	bl	8000bd0 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d8f7      	bhi.n	8000c0c <HAL_Delay+0x28>
  {
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000010 	.word	0x20000010

08000c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff90 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff49 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff5e 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff90 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5f 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffb0 	bl	8000d48 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b08b      	sub	sp, #44	; 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e169      	b.n	80010dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	f040 8158 	bne.w	80010d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4a9a      	ldr	r2, [pc, #616]	; (8001094 <HAL_GPIO_Init+0x2a0>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d05e      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e30:	4a98      	ldr	r2, [pc, #608]	; (8001094 <HAL_GPIO_Init+0x2a0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d875      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e36:	4a98      	ldr	r2, [pc, #608]	; (8001098 <HAL_GPIO_Init+0x2a4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d058      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e3c:	4a96      	ldr	r2, [pc, #600]	; (8001098 <HAL_GPIO_Init+0x2a4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d86f      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e42:	4a96      	ldr	r2, [pc, #600]	; (800109c <HAL_GPIO_Init+0x2a8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d052      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e48:	4a94      	ldr	r2, [pc, #592]	; (800109c <HAL_GPIO_Init+0x2a8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d869      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e4e:	4a94      	ldr	r2, [pc, #592]	; (80010a0 <HAL_GPIO_Init+0x2ac>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d04c      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e54:	4a92      	ldr	r2, [pc, #584]	; (80010a0 <HAL_GPIO_Init+0x2ac>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d863      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e5a:	4a92      	ldr	r2, [pc, #584]	; (80010a4 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d046      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
 8000e60:	4a90      	ldr	r2, [pc, #576]	; (80010a4 <HAL_GPIO_Init+0x2b0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d85d      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e66:	2b12      	cmp	r3, #18
 8000e68:	d82a      	bhi.n	8000ec0 <HAL_GPIO_Init+0xcc>
 8000e6a:	2b12      	cmp	r3, #18
 8000e6c:	d859      	bhi.n	8000f22 <HAL_GPIO_Init+0x12e>
 8000e6e:	a201      	add	r2, pc, #4	; (adr r2, 8000e74 <HAL_GPIO_Init+0x80>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000eef 	.word	0x08000eef
 8000e78:	08000ec9 	.word	0x08000ec9
 8000e7c:	08000edb 	.word	0x08000edb
 8000e80:	08000f1d 	.word	0x08000f1d
 8000e84:	08000f23 	.word	0x08000f23
 8000e88:	08000f23 	.word	0x08000f23
 8000e8c:	08000f23 	.word	0x08000f23
 8000e90:	08000f23 	.word	0x08000f23
 8000e94:	08000f23 	.word	0x08000f23
 8000e98:	08000f23 	.word	0x08000f23
 8000e9c:	08000f23 	.word	0x08000f23
 8000ea0:	08000f23 	.word	0x08000f23
 8000ea4:	08000f23 	.word	0x08000f23
 8000ea8:	08000f23 	.word	0x08000f23
 8000eac:	08000f23 	.word	0x08000f23
 8000eb0:	08000f23 	.word	0x08000f23
 8000eb4:	08000f23 	.word	0x08000f23
 8000eb8:	08000ed1 	.word	0x08000ed1
 8000ebc:	08000ee5 	.word	0x08000ee5
 8000ec0:	4a79      	ldr	r2, [pc, #484]	; (80010a8 <HAL_GPIO_Init+0x2b4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d013      	beq.n	8000eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ec6:	e02c      	b.n	8000f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	623b      	str	r3, [r7, #32]
          break;
 8000ece:	e029      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e024      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	623b      	str	r3, [r7, #32]
          break;
 8000ee2:	e01f      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	623b      	str	r3, [r7, #32]
          break;
 8000eec:	e01a      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d102      	bne.n	8000efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	623b      	str	r3, [r7, #32]
          break;
 8000efa:	e013      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d105      	bne.n	8000f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f04:	2308      	movs	r3, #8
 8000f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	611a      	str	r2, [r3, #16]
          break;
 8000f0e:	e009      	b.n	8000f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	615a      	str	r2, [r3, #20]
          break;
 8000f1a:	e003      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
          break;
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x130>
          break;
 8000f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d801      	bhi.n	8000f2e <HAL_GPIO_Init+0x13a>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	e001      	b.n	8000f32 <HAL_GPIO_Init+0x13e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	2bff      	cmp	r3, #255	; 0xff
 8000f38:	d802      	bhi.n	8000f40 <HAL_GPIO_Init+0x14c>
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x152>
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	3b08      	subs	r3, #8
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	6a39      	ldr	r1, [r7, #32]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	431a      	orrs	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 80b1 	beq.w	80010d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f74:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	; (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <HAL_GPIO_Init+0x2b8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3302      	adds	r3, #2
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	4013      	ands	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a40      	ldr	r2, [pc, #256]	; (80010b4 <HAL_GPIO_Init+0x2c0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x1ec>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3f      	ldr	r2, [pc, #252]	; (80010b8 <HAL_GPIO_Init+0x2c4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1e8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a3e      	ldr	r2, [pc, #248]	; (80010bc <HAL_GPIO_Init+0x2c8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a3d      	ldr	r2, [pc, #244]	; (80010c0 <HAL_GPIO_Init+0x2cc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1e0>
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff2:	492f      	ldr	r1, [pc, #188]	; (80010b0 <HAL_GPIO_Init+0x2bc>)
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800100c:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	492c      	ldr	r1, [pc, #176]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
 8001018:	e006      	b.n	8001028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	43db      	mvns	r3, r3
 8001022:	4928      	ldr	r1, [pc, #160]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001024:	4013      	ands	r3, r2
 8001026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	4922      	ldr	r1, [pc, #136]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	60cb      	str	r3, [r1, #12]
 8001040:	e006      	b.n	8001050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	43db      	mvns	r3, r3
 800104a:	491e      	ldr	r1, [pc, #120]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800104c:	4013      	ands	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d006      	beq.n	800106a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	4918      	ldr	r1, [pc, #96]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	43db      	mvns	r3, r3
 8001072:	4914      	ldr	r1, [pc, #80]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001074:	4013      	ands	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d021      	beq.n	80010c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	490e      	ldr	r1, [pc, #56]	; (80010c4 <HAL_GPIO_Init+0x2d0>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e021      	b.n	80010d6 <HAL_GPIO_Init+0x2e2>
 8001092:	bf00      	nop
 8001094:	10320000 	.word	0x10320000
 8001098:	10310000 	.word	0x10310000
 800109c:	10220000 	.word	0x10220000
 80010a0:	10210000 	.word	0x10210000
 80010a4:	10120000 	.word	0x10120000
 80010a8:	10110000 	.word	0x10110000
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40011400 	.word	0x40011400
 80010c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_GPIO_Init+0x304>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	4909      	ldr	r1, [pc, #36]	; (80010f8 <HAL_GPIO_Init+0x304>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	fa22 f303 	lsr.w	r3, r2, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f47f ae8e 	bne.w	8000e08 <HAL_GPIO_Init+0x14>
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	372c      	adds	r7, #44	; 0x2c
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	611a      	str	r2, [r3, #16]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e272      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8087 	beq.w	800125a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114c:	4b92      	ldr	r3, [pc, #584]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b04      	cmp	r3, #4
 8001156:	d00c      	beq.n	8001172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001158:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d112      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
 8001164:	4b8c      	ldr	r3, [pc, #560]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001170:	d10b      	bne.n	800118a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001172:	4b89      	ldr	r3, [pc, #548]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d06c      	beq.n	8001258 <HAL_RCC_OscConfig+0x12c>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d168      	bne.n	8001258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e24c      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x76>
 8001194:	4b80      	ldr	r3, [pc, #512]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a7f      	ldr	r2, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800119a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	e02e      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a7a      	ldr	r2, [pc, #488]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a77      	ldr	r2, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0xbc>
 80011ce:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xd4>
 80011e8:	4b6b      	ldr	r3, [pc, #428]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a6a      	ldr	r2, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b68      	ldr	r3, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a67      	ldr	r2, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fce2 	bl	8000bd0 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fcde 	bl	8000bd0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e200      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xe4>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcce 	bl	8000bd0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcca 	bl	8000bd0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1ec      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b53      	ldr	r3, [pc, #332]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x10c>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001266:	4b4c      	ldr	r3, [pc, #304]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b43      	ldr	r3, [pc, #268]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c0      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4939      	ldr	r1, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x270>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc83 	bl	8000bd0 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc7f 	bl	8000bd0 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2d      	ldr	r3, [pc, #180]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4927      	ldr	r1, [pc, #156]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x270>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fc62 	bl	8000bd0 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fc5e 	bl	8000bd0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e180      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03a      	beq.n	80013b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d019      	beq.n	8001376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001348:	f7ff fc42 	bl	8000bd0 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fc3e 	bl	8000bd0 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e160      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_RCC_OscConfig+0x26c>)
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fa9c 	bl	80018ac <RCC_Delay>
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_RCC_OscConfig+0x274>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fc28 	bl	8000bd0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	e00f      	b.n	80013a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc24 	bl	8000bd0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d908      	bls.n	80013a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e146      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	42420000 	.word	0x42420000
 80013a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b92      	ldr	r3, [pc, #584]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e9      	bne.n	8001384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80a6 	beq.w	800150a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b8b      	ldr	r3, [pc, #556]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10d      	bne.n	80013ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b88      	ldr	r3, [pc, #544]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a87      	ldr	r2, [pc, #540]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b85      	ldr	r3, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b82      	ldr	r3, [pc, #520]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b7f      	ldr	r3, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7e      	ldr	r2, [pc, #504]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fbe5 	bl	8000bd0 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140a:	f7ff fbe1 	bl	8000bd0 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b64      	cmp	r3, #100	; 0x64
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e103      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141c:	4b75      	ldr	r3, [pc, #468]	; (80015f4 <HAL_RCC_OscConfig+0x4c8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a6e      	ldr	r2, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	e02d      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x334>
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6213      	str	r3, [r2, #32]
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a66      	ldr	r2, [pc, #408]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	e01c      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b05      	cmp	r3, #5
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x356>
 8001468:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a60      	ldr	r2, [pc, #384]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	4a5d      	ldr	r2, [pc, #372]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	6213      	str	r3, [r2, #32]
 8001480:	e00b      	b.n	800149a <HAL_RCC_OscConfig+0x36e>
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	6a1b      	ldr	r3, [r3, #32]
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 0304 	bic.w	r3, r3, #4
 8001498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d015      	beq.n	80014ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fb95 	bl	8000bd0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a8:	e00a      	b.n	80014c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014aa:	f7ff fb91 	bl	8000bd0 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e0b1      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c0:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0ee      	beq.n	80014aa <HAL_RCC_OscConfig+0x37e>
 80014cc:	e014      	b.n	80014f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fb7f 	bl	8000bd0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d4:	e00a      	b.n	80014ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff fb7b 	bl	8000bd0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e09b      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ee      	bne.n	80014d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 8087 	beq.w	8001622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d061      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d146      	bne.n	80015b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff fb4f 	bl	8000bd0 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001536:	f7ff fb4b 	bl	8000bd0 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e06d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d108      	bne.n	8001570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a19      	ldr	r1, [r3, #32]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	430b      	orrs	r3, r1
 8001582:	491b      	ldr	r1, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff fb1f 	bl	8000bd0 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fb1b 	bl	8000bd0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
 80015b4:	e035      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb08 	bl	8000bd0 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fb04 	bl	8000bd0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e026      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x498>
 80015e2:	e01e      	b.n	8001622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e019      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40007000 	.word	0x40007000
 80015f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_OscConfig+0x500>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	429a      	cmp	r2, r3
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d0      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b6a      	ldr	r3, [pc, #424]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d910      	bls.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 0207 	bic.w	r2, r3, #7
 800165a:	4965      	ldr	r1, [pc, #404]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d020      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800168c:	4b59      	ldr	r3, [pc, #356]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b0:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	494d      	ldr	r1, [pc, #308]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d040      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d115      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e07f      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e073      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06b      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4936      	ldr	r1, [pc, #216]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fa56 	bl	8000bd0 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fa52 	bl	8000bd0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e053      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e032      	b.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	490e      	ldr	r1, [pc, #56]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017be:	f000 f821 	bl	8001804 <HAL_RCC_GetSysClockFreq>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	490a      	ldr	r1, [pc, #40]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d0:	5ccb      	ldrb	r3, [r1, r3]
 80017d2:	fa22 f303 	lsr.w	r3, r2, r3
 80017d6:	4a09      	ldr	r2, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_ClockConfig+0x1d0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f9b4 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40022000 	.word	0x40022000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	0800210c 	.word	0x0800210c
 80017fc:	20000000 	.word	0x20000000
 8001800:	2000000c 	.word	0x2000000c

08001804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_GetSysClockFreq+0x94>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d002      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x30>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d003      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x36>
 8001832:	e027      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001836:	613b      	str	r3, [r7, #16]
      break;
 8001838:	e027      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001844:	5cd3      	ldrb	r3, [r2, r3]
 8001846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_GetSysClockFreq+0x94>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0c5b      	lsrs	r3, r3, #17
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001866:	fb03 f202 	mul.w	r2, r3, r2
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e004      	b.n	800187e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	613b      	str	r3, [r7, #16]
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetSysClockFreq+0x98>)
 8001886:	613b      	str	r3, [r7, #16]
      break;
 8001888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188a:	693b      	ldr	r3, [r7, #16]
}
 800188c:	4618      	mov	r0, r3
 800188e:	371c      	adds	r7, #28
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	007a1200 	.word	0x007a1200
 80018a0:	08003468 	.word	0x08003468
 80018a4:	08003478 	.word	0x08003478
 80018a8:	003d0900 	.word	0x003d0900

080018ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b4:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <RCC_Delay+0x34>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <RCC_Delay+0x38>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c8:	bf00      	nop
  }
  while (Delay --);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	60fa      	str	r2, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <RCC_Delay+0x1c>
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000000 	.word	0x20000000
 80018e4:	10624dd3 	.word	0x10624dd3

080018e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e076      	b.n	80019e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800190a:	d009      	beq.n	8001920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
 8001912:	e005      	b.n	8001920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7fe fdaa 	bl	8000494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001956:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a4:	ea42 0103 	orr.w	r1, r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	0c1a      	lsrs	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f002 0204 	and.w	r2, r2, #4
 80019c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	4613      	mov	r3, r2
 80019fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_SPI_Transmit+0x22>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e12d      	b.n	8001c6e <HAL_SPI_Transmit+0x27e>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a1a:	f7ff f8d9 	bl	8000bd0 <HAL_GetTick>
 8001a1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
 8001a32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a34:	e116      	b.n	8001c64 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_SPI_Transmit+0x52>
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001a46:	e10d      	b.n	8001c64 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8e:	d10f      	bne.n	8001ab0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b40      	cmp	r3, #64	; 0x40
 8001abc:	d007      	beq.n	8001ace <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad6:	d14f      	bne.n	8001b78 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_SPI_Transmit+0xf6>
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d142      	bne.n	8001b6c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	881a      	ldrh	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	1c9a      	adds	r2, r3, #2
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001b0a:	e02f      	b.n	8001b6c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d112      	bne.n	8001b40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	1c9a      	adds	r2, r3, #2
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b3e:	e015      	b.n	8001b6c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b40:	f7ff f846 	bl	8000bd0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d803      	bhi.n	8001b58 <HAL_SPI_Transmit+0x168>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	d102      	bne.n	8001b5e <HAL_SPI_Transmit+0x16e>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b6a:	e07b      	b.n	8001c64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ca      	bne.n	8001b0c <HAL_SPI_Transmit+0x11c>
 8001b76:	e050      	b.n	8001c1a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_SPI_Transmit+0x196>
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d144      	bne.n	8001c10 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	330c      	adds	r3, #12
 8001b90:	7812      	ldrb	r2, [r2, #0]
 8001b92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001bac:	e030      	b.n	8001c10 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d113      	bne.n	8001be4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	7812      	ldrb	r2, [r2, #0]
 8001bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001be2:	e015      	b.n	8001c10 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be4:	f7fe fff4 	bl	8000bd0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d803      	bhi.n	8001bfc <HAL_SPI_Transmit+0x20c>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfa:	d102      	bne.n	8001c02 <HAL_SPI_Transmit+0x212>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c0e:	e029      	b.n	8001c64 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1c9      	bne.n	8001bae <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8b2 	bl	8001d88 <SPI_EndRxTxTransaction>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]
 8001c5a:	e003      	b.n	8001c64 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c88:	f7fe ffa2 	bl	8000bd0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	1a9b      	subs	r3, r3, r2
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c98:	f7fe ff9a 	bl	8000bd0 <HAL_GetTick>
 8001c9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c9e:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	015b      	lsls	r3, r3, #5
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cae:	e054      	b.n	8001d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d050      	beq.n	8001d5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001cb8:	f7fe ff8a 	bl	8000bd0 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d902      	bls.n	8001cce <SPI_WaitFlagStateUntilTimeout+0x56>
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d13d      	bne.n	8001d4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ce6:	d111      	bne.n	8001d0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf0:	d004      	beq.n	8001cfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d107      	bne.n	8001d0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d14:	d10f      	bne.n	8001d36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e017      	b.n	8001d7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4013      	ands	r3, r2
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d19b      	bne.n	8001cb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000000 	.word	0x20000000

08001d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff ff6a 	bl	8001c78 <SPI_WaitFlagStateUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f043 0220 	orr.w	r2, r3, #32
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e000      	b.n	8001dbc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e093      	b.n	8001f00 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe fb8f 	bl	8000510 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e08:	f023 0307 	bic.w	r3, r3, #7
 8001e0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 f875 	bl	8001f08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e46:	f023 0303 	bic.w	r3, r3, #3
 8001e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4313      	orrs	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e64:	f023 030c 	bic.w	r3, r3, #12
 8001e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4313      	orrs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	011a      	lsls	r2, r3, #4
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	031b      	lsls	r3, r3, #12
 8001e94:	4313      	orrs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ea2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f26:	d007      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <TIM_Base_SetConfig+0xbc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d003      	beq.n	8001f38 <TIM_Base_SetConfig+0x30>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a25      	ldr	r2, [pc, #148]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d108      	bne.n	8001f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00b      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <TIM_Base_SetConfig+0xbc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x62>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a18      	ldr	r2, [pc, #96]	; (8001fc8 <TIM_Base_SetConfig+0xc0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d108      	bne.n	8001f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <TIM_Base_SetConfig+0xb8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d103      	bne.n	8001fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	615a      	str	r2, [r3, #20]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800

08001fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e046      	b.n	8002072 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d009      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a10      	ldr	r2, [pc, #64]	; (8002084 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10c      	bne.n	8002060 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800204c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800

08002088 <__libc_init_array>:
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	2600      	movs	r6, #0
 800208c:	4d0c      	ldr	r5, [pc, #48]	; (80020c0 <__libc_init_array+0x38>)
 800208e:	4c0d      	ldr	r4, [pc, #52]	; (80020c4 <__libc_init_array+0x3c>)
 8002090:	1b64      	subs	r4, r4, r5
 8002092:	10a4      	asrs	r4, r4, #2
 8002094:	42a6      	cmp	r6, r4
 8002096:	d109      	bne.n	80020ac <__libc_init_array+0x24>
 8002098:	f000 f822 	bl	80020e0 <_init>
 800209c:	2600      	movs	r6, #0
 800209e:	4d0a      	ldr	r5, [pc, #40]	; (80020c8 <__libc_init_array+0x40>)
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <__libc_init_array+0x44>)
 80020a2:	1b64      	subs	r4, r4, r5
 80020a4:	10a4      	asrs	r4, r4, #2
 80020a6:	42a6      	cmp	r6, r4
 80020a8:	d105      	bne.n	80020b6 <__libc_init_array+0x2e>
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b0:	4798      	blx	r3
 80020b2:	3601      	adds	r6, #1
 80020b4:	e7ee      	b.n	8002094 <__libc_init_array+0xc>
 80020b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ba:	4798      	blx	r3
 80020bc:	3601      	adds	r6, #1
 80020be:	e7f2      	b.n	80020a6 <__libc_init_array+0x1e>
 80020c0:	0800347c 	.word	0x0800347c
 80020c4:	0800347c 	.word	0x0800347c
 80020c8:	0800347c 	.word	0x0800347c
 80020cc:	08003480 	.word	0x08003480

080020d0 <memset>:
 80020d0:	4603      	mov	r3, r0
 80020d2:	4402      	add	r2, r0
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d100      	bne.n	80020da <memset+0xa>
 80020d8:	4770      	bx	lr
 80020da:	f803 1b01 	strb.w	r1, [r3], #1
 80020de:	e7f9      	b.n	80020d4 <memset+0x4>

080020e0 <_init>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr

080020ec <_fini>:
 80020ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ee:	bf00      	nop
 80020f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f2:	bc08      	pop	{r3}
 80020f4:	469e      	mov	lr, r3
 80020f6:	4770      	bx	lr
