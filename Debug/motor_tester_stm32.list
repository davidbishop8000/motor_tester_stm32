
motor_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000855c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004170  08008670  08008670  00018670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7e0  0800c7e0  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7e0  0800c7e0  0001c7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7e8  0800c7e8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7e8  0800c7e8  0001c7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800c7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000760  20000054  0800c844  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800c844  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f7c  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b5  00000000  00000000  00032ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000357b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  000368f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ae  00000000  00000000  00037988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d45  00000000  00000000  0004fd36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008faae  00000000  00000000  00062a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  000f257c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	08008654 	.word	0x08008654

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	08008654 	.word	0x08008654

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b976 	b.w	8000e30 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	4688      	mov	r8, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14d      	bne.n	8000c08 <__udivmoddi4+0xac>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d968      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b152      	cbz	r2, 8000b8e <__udivmoddi4+0x32>
 8000b78:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7c:	f1c2 0120 	rsb	r1, r2, #32
 8000b80:	fa20 f101 	lsr.w	r1, r0, r1
 8000b84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b88:	ea41 0803 	orr.w	r8, r1, r3
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000b96:	fa1f fe8c 	uxth.w	lr, ip
 8000b9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000b9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d90a      	bls.n	8000bc2 <__udivmoddi4+0x66>
 8000bac:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bb4:	f080 811e 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f240 811b 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbe:	3f02      	subs	r7, #2
 8000bc0:	4463      	add	r3, ip
 8000bc2:	1a1b      	subs	r3, r3, r0
 8000bc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000bc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd6:	45a6      	cmp	lr, r4
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0404 	adds.w	r4, ip, r4
 8000bde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be2:	f080 8109 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be6:	45a6      	cmp	lr, r4
 8000be8:	f240 8106 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bec:	4464      	add	r4, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfa:	b11e      	cbz	r6, 8000c04 <__udivmoddi4+0xa8>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	40d4      	lsrs	r4, r2
 8000c00:	e9c6 4300 	strd	r4, r3, [r6]
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	f000 80ee 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c12:	2100      	movs	r1, #0
 8000c14:	e9c6 0500 	strd	r0, r5, [r6]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f183 	clz	r1, r3
 8000c22:	2900      	cmp	r1, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80fc 	bhi.w	8000e28 <__udivmoddi4+0x2cc>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb65 0303 	sbc.w	r3, r5, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	4698      	mov	r8, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d0e2      	beq.n	8000c04 <__udivmoddi4+0xa8>
 8000c3e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c42:	e7df      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8091 	bne.w	8000d74 <__udivmoddi4+0x218>
 8000c52:	eba1 000c 	sub.w	r0, r1, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c64:	fb07 0013 	mls	r0, r7, r3, r0
 8000c68:	0c25      	lsrs	r5, r4, #16
 8000c6a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	42a8      	cmp	r0, r5
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0505 	adds.w	r5, ip, r5
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	42a8      	cmp	r0, r5
 8000c82:	f200 80ce 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a2d      	subs	r5, r5, r0
 8000c8a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c8e:	fb07 5510 	mls	r5, r7, r0, r5
 8000c92:	fb0e fe00 	mul.w	lr, lr, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80b6 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79e      	b.n	8000bfa <__udivmoddi4+0x9e>
 8000cbc:	f1c1 0720 	rsb	r7, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fbba f8f9 	udiv	r8, sl, r9
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	fa1f fe8c 	uxth.w	lr, ip
 8000ce4:	431d      	orrs	r5, r3
 8000ce6:	fa00 f301 	lsl.w	r3, r0, r1
 8000cea:	fb08 f00e 	mul.w	r0, r8, lr
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	42a0      	cmp	r0, r4
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4464      	add	r4, ip
 8000d14:	1a24      	subs	r4, r4, r0
 8000d16:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d1a:	fb09 4410 	mls	r4, r9, r0, r4
 8000d1e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9502 	umull	r9, r5, r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	42ac      	cmp	r4, r5
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46ae      	mov	lr, r5
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d069      	beq.n	8000e2c <__udivmoddi4+0x2d0>
 8000d58:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5c:	eb64 040e 	sbc.w	r4, r4, lr
 8000d60:	fa22 f301 	lsr.w	r3, r2, r1
 8000d64:	fa04 f707 	lsl.w	r7, r4, r7
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e747      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	f1c2 0120 	rsb	r1, r2, #32
 8000d7c:	fa25 f301 	lsr.w	r3, r5, r1
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa20 f101 	lsr.w	r1, r0, r1
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	430d      	orrs	r5, r1
 8000d8c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d90:	fb07 3311 	mls	r3, r7, r1, r3
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	0c28      	lsrs	r0, r5, #16
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	fb01 f30e 	mul.w	r3, r1, lr
 8000da2:	4283      	cmp	r3, r0
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0000 	adds.w	r0, ip, r0
 8000dae:	f101 38ff 	add.w	r8, r1, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	4283      	cmp	r3, r0
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3902      	subs	r1, #2
 8000dba:	4460      	add	r0, ip
 8000dbc:	1ac0      	subs	r0, r0, r3
 8000dbe:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dc2:	fb07 0013 	mls	r0, r7, r3, r0
 8000dc6:	b2ad      	uxth	r5, r5
 8000dc8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000dcc:	fb03 f00e 	mul.w	r0, r3, lr
 8000dd0:	42a8      	cmp	r0, r5
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0505 	adds.w	r5, ip, r5
 8000dd8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	42a8      	cmp	r0, r5
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4465      	add	r5, ip
 8000de6:	1a28      	subs	r0, r5, r0
 8000de8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	4631      	mov	r1, r6
 8000df0:	4630      	mov	r0, r6
 8000df2:	e707      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000df4:	462f      	mov	r7, r5
 8000df6:	e6e4      	b.n	8000bc2 <__udivmoddi4+0x66>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f9      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4628      	mov	r0, r5
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4641      	mov	r1, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	4464      	add	r4, ip
 8000e1e:	3802      	subs	r0, #2
 8000e20:	e747      	b.n	8000cb2 <__udivmoddi4+0x156>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	4465      	add	r5, ip
 8000e26:	e72f      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e706      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e6e9      	b.n	8000c04 <__udivmoddi4+0xa8>

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f006 ff7c 	bl	8007d3a <HAL_UART_GetError>
 8000e42:	61f8      	str	r0, [r7, #28]
	switch (er) {
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d863      	bhi.n	8000f14 <HAL_UART_ErrorCallback+0xe0>
 8000e4c:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_UART_ErrorCallback+0x20>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e95 	.word	0x08000e95
 8000e58:	08000eb3 	.word	0x08000eb3
 8000e5c:	08000f15 	.word	0x08000f15
 8000e60:	08000ed1 	.word	0x08000ed1
 8000e64:	08000f15 	.word	0x08000f15
 8000e68:	08000f15 	.word	0x08000f15
 8000e6c:	08000f15 	.word	0x08000f15
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000f15 	.word	0x08000f15
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f15 	.word	0x08000f15
 8000e80:	08000f15 	.word	0x08000f15
 8000e84:	08000f15 	.word	0x08000f15
 8000e88:	08000f15 	.word	0x08000f15
 8000e8c:	08000f15 	.word	0x08000f15
 8000e90:	08000f0d 	.word	0x08000f0d
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000eb0:	e031      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000ece:	e022      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000eec:	e013      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000f0a:	e004      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000f12:	e000      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8000f14:	bf00      	nop
		}
	if (huart->Instance == USART1) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_UART_ErrorCallback+0x114>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10f      	bne.n	8000f40 <HAL_UART_ErrorCallback+0x10c>
		new_bms_data = 1;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_UART_ErrorCallback+0x118>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000f26:	2264      	movs	r2, #100	; 0x64
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <HAL_UART_ErrorCallback+0x11c>)
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <HAL_UART_ErrorCallback+0x120>)
 8000f2c:	f006 fbfb 	bl	8007726 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_UART_ErrorCallback+0x124>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_UART_ErrorCallback+0x124>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
	}
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	20000230 	.word	0x20000230
 8000f50:	200001cc 	.word	0x200001cc
 8000f54:	20000138 	.word	0x20000138
 8000f58:	20000180 	.word	0x20000180

08000f5c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d112      	bne.n	8000f98 <HAL_UARTEx_RxEventCallback+0x3c>
		new_bms_data = 1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UARTEx_RxEventCallback+0x48>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		data_size = Size;
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	8013      	strh	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	490a      	ldr	r1, [pc, #40]	; (8000fac <HAL_UARTEx_RxEventCallback+0x50>)
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f84:	f006 fbcf 	bl	8007726 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0204 	bic.w	r2, r2, #4
 8000f96:	601a      	str	r2, [r3, #0]
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	20000230 	.word	0x20000230
 8000fa8:	20000232 	.word	0x20000232
 8000fac:	200001cc 	.word	0x200001cc
 8000fb0:	20000138 	.word	0x20000138
 8000fb4:	20000180 	.word	0x20000180

08000fb8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f004 f983 	bl	80052d2 <HAL_CAN_GetRxMessage>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 8000fd2:	f001 fcfb 	bl	80029cc <Error_Handler>
	}
	NewCanMsg = CAN_GET_MSG_OK;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002f0 	.word	0x200002f0
 8000fe8:	200002cc 	.word	0x200002cc
 8000fec:	200002fc 	.word	0x200002fc

08000ff0 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    NewCanMsg = CAN_GET_MSG_ERROR;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_CAN_ErrorCallback+0x18>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	200002fc 	.word	0x200002fc

0800100c <CanMsgSend>:

	return 1;
}


uint8_t CanMsgSend(CanDataSendTypeDef *canDataSend) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	TxHeader.StdId = canDataSend->canId;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <CanMsgSend+0x88>)
 800101a:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = canDataSend->canExtId;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <CanMsgSend+0x88>)
 8001022:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = canDataSend->canRTR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <CanMsgSend+0x88>)
 800102a:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <CanMsgSend+0x88>)
 800102e:	2204      	movs	r2, #4
 8001030:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <CanMsgSend+0x88>)
 8001034:	2208      	movs	r2, #8
 8001036:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <CanMsgSend+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	751a      	strb	r2, [r3, #20]
	//globData.can_mutex = 0;
	for (int i = 0; i < sizeof(TxData); i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e00c      	b.n	800105e <CanMsgSend+0x52>
		TxData[i] = canDataSend->canData[i];
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	330c      	adds	r3, #12
 800104c:	7819      	ldrb	r1, [r3, #0]
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <CanMsgSend+0x8c>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TxData); i++) {
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2b07      	cmp	r3, #7
 8001062:	d9ef      	bls.n	8001044 <CanMsgSend+0x38>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8001064:	bf00      	nop
 8001066:	480d      	ldr	r0, [pc, #52]	; (800109c <CanMsgSend+0x90>)
 8001068:	f004 f8ff 	bl	800526a <HAL_CAN_GetTxMailboxesFreeLevel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <CanMsgSend+0x5a>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <CanMsgSend+0x94>)
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <CanMsgSend+0x8c>)
 8001076:	4907      	ldr	r1, [pc, #28]	; (8001094 <CanMsgSend+0x88>)
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <CanMsgSend+0x90>)
 800107a:	f004 f827 	bl	80050cc <HAL_CAN_AddTxMessage>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <CanMsgSend+0x7c>
		//HAL_UART_Transmit(&huart, (uint8_t*) "no_trans\r\n", 10, 100);
		return 0;
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <CanMsgSend+0x7e>
	}
	return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002b4 	.word	0x200002b4
 8001098:	200002e8 	.word	0x200002e8
 800109c:	20000070 	.word	0x20000070
 80010a0:	200002f8 	.word	0x200002f8

080010a4 <Moving>:

void Moving() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0

	CanDataSendTypeDef canDataSend;

	static int move_axis_en = 0;
	static int lift_axis_en = 0;
	if (start_stop) {
 80010aa:	4b63      	ldr	r3, [pc, #396]	; (8001238 <Moving+0x194>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 808a 	beq.w	80011c8 <Moving+0x124>
			canDataSend.canExtId = DRIVER_MOVE_ID + 0x06000000;
 80010b4:	4b61      	ldr	r3, [pc, #388]	; (800123c <Moving+0x198>)
 80010b6:	60bb      	str	r3, [r7, #8]
			canDataSend.canRTR = CAN_RTR_DATA;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
			if (!move_axis_en) {
 80010bc:	4b60      	ldr	r3, [pc, #384]	; (8001240 <Moving+0x19c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d119      	bne.n	80010f8 <Moving+0x54>
				move_axis_en = 1;
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <Moving+0x19c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 80010ca:	2323      	movs	r3, #35	; 0x23
 80010cc:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 80010ce:	230d      	movs	r3, #13
 80010d0:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 80010d2:	2320      	movs	r3, #32
 80010d4:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x01;
 80010d6:	2301      	movs	r3, #1
 80010d8:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 80010da:	2300      	movs	r3, #0
 80010dc:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 80010de:	2300      	movs	r3, #0
 80010e0:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff8d 	bl	800100c <CanMsgSend>
				HAL_Delay(10);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f003 fdbe 	bl	8004c74 <HAL_Delay>
			}
			if (!lift_axis_en) {
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <Moving+0x1a0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d119      	bne.n	8001134 <Moving+0x90>
				lift_axis_en = 1;
 8001100:	4b50      	ldr	r3, [pc, #320]	; (8001244 <Moving+0x1a0>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8001106:	2323      	movs	r3, #35	; 0x23
 8001108:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 800110a:	230d      	movs	r3, #13
 800110c:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 800110e:	2320      	movs	r3, #32
 8001110:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x02;
 8001112:	2302      	movs	r3, #2
 8001114:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff6f 	bl	800100c <CanMsgSend>
				HAL_Delay(10);
 800112e:	200a      	movs	r0, #10
 8001130:	f003 fda0 	bl	8004c74 <HAL_Delay>
			}
			static int32_t ch_velocity = 0;
			//if (motor1_speed) { //(l_current_move_comm == MOVE_FORW) {
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)"can_send\r\n", 10, 100);
			canDataSend.canData[0] = 0x23;
 8001134:	2323      	movs	r3, #35	; 0x23
 8001136:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 800113c:	2320      	movs	r3, #32
 800113e:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8001140:	2301      	movs	r3, #1
 8001142:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 8001144:	4b40      	ldr	r3, [pc, #256]	; (8001248 <Moving+0x1a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a40      	ldr	r2, [pc, #256]	; (800124c <Moving+0x1a8>)
 800114a:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <Moving+0x1a8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	161b      	asrs	r3, r3, #24
 8001152:	b2db      	uxtb	r3, r3
 8001154:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <Moving+0x1a8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	141b      	asrs	r3, r3, #16
 800115c:	b2db      	uxtb	r3, r3
 800115e:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8001160:	4b3a      	ldr	r3, [pc, #232]	; (800124c <Moving+0x1a8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	121b      	asrs	r3, r3, #8
 8001166:	b2db      	uxtb	r3, r3
 8001168:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <Moving+0x1a8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff49 	bl	800100c <CanMsgSend>
			HAL_Delay(2);
 800117a:	2002      	movs	r0, #2
 800117c:	f003 fd7a 	bl	8004c74 <HAL_Delay>
			//}
			//else if (motor2_speed) {
			canDataSend.canData[0] = 0x23;
 8001180:	2323      	movs	r3, #35	; 0x23
 8001182:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8001188:	2320      	movs	r3, #32
 800118a:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 800118c:	2302      	movs	r3, #2
 800118e:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <Moving+0x1a4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <Moving+0x1a8>)
 8001196:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <Moving+0x1a8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	161b      	asrs	r3, r3, #24
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <Moving+0x1a8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	141b      	asrs	r3, r3, #16
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 80011ac:	4b27      	ldr	r3, [pc, #156]	; (800124c <Moving+0x1a8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	121b      	asrs	r3, r3, #8
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <Moving+0x1a8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff23 	bl	800100c <CanMsgSend>
 80011c6:	e030      	b.n	800122a <Moving+0x186>
			//}
		}
		else
		{
			canDataSend.canData[0] = 0x23;
 80011c8:	2323      	movs	r3, #35	; 0x23
 80011ca:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80011d0:	2320      	movs	r3, #32
 80011d2:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 80011d4:	2301      	movs	r3, #1
 80011d6:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 80011dc:	2300      	movs	r3, #0
 80011de:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 80011e0:	2300      	movs	r3, #0
 80011e2:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff0e 	bl	800100c <CanMsgSend>
			HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f003 fd3f 	bl	8004c74 <HAL_Delay>
			canDataSend.canData[0] = 0x23;
 80011f6:	2323      	movs	r3, #35	; 0x23
 80011f8:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80011fe:	2320      	movs	r3, #32
 8001200:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8001202:	2302      	movs	r3, #2
 8001204:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 800120a:	2300      	movs	r3, #0
 800120c:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fef7 	bl	800100c <CanMsgSend>
			move_axis_en = 0;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <Moving+0x19c>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
			lift_axis_en = 0;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <Moving+0x1a0>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(20);
 800122a:	2014      	movs	r0, #20
 800122c:	f003 fd22 	bl	8004c74 <HAL_Delay>
}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200002ac 	.word	0x200002ac
 800123c:	06000001 	.word	0x06000001
 8001240:	20000384 	.word	0x20000384
 8001244:	20000388 	.word	0x20000388
 8001248:	200002b0 	.word	0x200002b0
 800124c:	2000038c 	.word	0x2000038c

08001250 <read_bms_uart>:

void read_bms_uart() {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	if (new_bms_data)
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <read_bms_uart+0x12c>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00c      	beq.n	8001276 <read_bms_uart+0x26>
	{
		new_bms_data = 0;
 800125c:	4b47      	ldr	r3, [pc, #284]	; (800137c <read_bms_uart+0x12c>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
		rcGetBattery();
 8001262:	f000 f89b 	bl	800139c <rcGetBattery>
		check_bms_i = 3;
 8001266:	4b46      	ldr	r3, [pc, #280]	; (8001380 <read_bms_uart+0x130>)
 8001268:	2203      	movs	r2, #3
 800126a:	601a      	str	r2, [r3, #0]
		bms_req_time = HAL_GetTick();
 800126c:	f003 fcf8 	bl	8004c60 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a44      	ldr	r2, [pc, #272]	; (8001384 <read_bms_uart+0x134>)
 8001274:	6013      	str	r3, [r2, #0]
	}
	if (check_bms_i == 0)
 8001276:	4b42      	ldr	r3, [pc, #264]	; (8001380 <read_bms_uart+0x130>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d122      	bne.n	80012c4 <read_bms_uart+0x74>
	{
		RE_DE_ON;
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4840      	ldr	r0, [pc, #256]	; (8001388 <read_bms_uart+0x138>)
 8001286:	f005 f8d0 	bl	800642a <HAL_GPIO_WritePin>
 800128a:	2002      	movs	r0, #2
 800128c:	f003 fcf2 	bl	8004c74 <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 8001290:	2364      	movs	r3, #100	; 0x64
 8001292:	2207      	movs	r2, #7
 8001294:	493d      	ldr	r1, [pc, #244]	; (800138c <read_bms_uart+0x13c>)
 8001296:	483e      	ldr	r0, [pc, #248]	; (8001390 <read_bms_uart+0x140>)
 8001298:	f006 f9c2 	bl	8007620 <HAL_UART_Transmit>
		RE_DE_OFF;
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a2:	4839      	ldr	r0, [pc, #228]	; (8001388 <read_bms_uart+0x138>)
 80012a4:	f005 f8c1 	bl	800642a <HAL_GPIO_WritePin>
 80012a8:	2001      	movs	r0, #1
 80012aa:	f003 fce3 	bl	8004c74 <HAL_Delay>
		check_bms_i++;
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <read_bms_uart+0x130>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <read_bms_uart+0x130>)
 80012b6:	6013      	str	r3, [r2, #0]
		bms_req_time = HAL_GetTick();
 80012b8:	f003 fcd2 	bl	8004c60 <HAL_GetTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <read_bms_uart+0x134>)
 80012c0:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - bms_req_time > 1000) {
			bms_req_time = HAL_GetTick();
			check_bms_i = 3;
		}
	}
}
 80012c2:	e058      	b.n	8001376 <read_bms_uart+0x126>
	else if (check_bms_i == 1 && batteryMsg.bms_type == BMS_NONE)
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <read_bms_uart+0x130>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d139      	bne.n	8001340 <read_bms_uart+0xf0>
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <read_bms_uart+0x144>)
 80012ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d134      	bne.n	8001340 <read_bms_uart+0xf0>
		if (HAL_GetTick() - bms_req_time > 500) {
 80012d6:	f003 fcc3 	bl	8004c60 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <read_bms_uart+0x134>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d946      	bls.n	8001376 <read_bms_uart+0x126>
			bms_smart_request_msg[2] = 0x90;
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <read_bms_uart+0x148>)
 80012ea:	2290      	movs	r2, #144	; 0x90
 80012ec:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[4] = 0x00;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <read_bms_uart+0x148>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	711a      	strb	r2, [r3, #4]
			bms_smart_request_msg[12] = 0x7D;
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <read_bms_uart+0x148>)
 80012f6:	227d      	movs	r2, #125	; 0x7d
 80012f8:	731a      	strb	r2, [r3, #12]
			RE_DE_ON;
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	4821      	ldr	r0, [pc, #132]	; (8001388 <read_bms_uart+0x138>)
 8001302:	f005 f892 	bl	800642a <HAL_GPIO_WritePin>
 8001306:	2002      	movs	r0, #2
 8001308:	f003 fcb4 	bl	8004c74 <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	220d      	movs	r2, #13
 8001310:	4921      	ldr	r1, [pc, #132]	; (8001398 <read_bms_uart+0x148>)
 8001312:	481f      	ldr	r0, [pc, #124]	; (8001390 <read_bms_uart+0x140>)
 8001314:	f006 f984 	bl	8007620 <HAL_UART_Transmit>
			RE_DE_OFF;
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <read_bms_uart+0x138>)
 8001320:	f005 f883 	bl	800642a <HAL_GPIO_WritePin>
 8001324:	2001      	movs	r0, #1
 8001326:	f003 fca5 	bl	8004c74 <HAL_Delay>
			check_bms_i++;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <read_bms_uart+0x130>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a13      	ldr	r2, [pc, #76]	; (8001380 <read_bms_uart+0x130>)
 8001332:	6013      	str	r3, [r2, #0]
			bms_req_time = HAL_GetTick();
 8001334:	f003 fc94 	bl	8004c60 <HAL_GetTick>
 8001338:	4603      	mov	r3, r0
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <read_bms_uart+0x134>)
 800133c:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - bms_req_time > 500) {
 800133e:	e01a      	b.n	8001376 <read_bms_uart+0x126>
	else if (check_bms_i == 2 && batteryMsg.bms_type == BMS_NONE)
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <read_bms_uart+0x130>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d116      	bne.n	8001376 <read_bms_uart+0x126>
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <read_bms_uart+0x144>)
 800134a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800134e:	2b00      	cmp	r3, #0
 8001350:	d111      	bne.n	8001376 <read_bms_uart+0x126>
		if (HAL_GetTick() - bms_req_time > 1000) {
 8001352:	f003 fc85 	bl	8004c60 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <read_bms_uart+0x134>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001362:	d908      	bls.n	8001376 <read_bms_uart+0x126>
			bms_req_time = HAL_GetTick();
 8001364:	f003 fc7c 	bl	8004c60 <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	4a06      	ldr	r2, [pc, #24]	; (8001384 <read_bms_uart+0x134>)
 800136c:	6013      	str	r3, [r2, #0]
			check_bms_i = 3;
 800136e:	4b04      	ldr	r3, [pc, #16]	; (8001380 <read_bms_uart+0x130>)
 8001370:	2203      	movs	r2, #3
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	e7ff      	b.n	8001376 <read_bms_uart+0x126>
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000230 	.word	0x20000230
 8001380:	200002a4 	.word	0x200002a4
 8001384:	2000029c 	.word	0x2000029c
 8001388:	40011000 	.word	0x40011000
 800138c:	20000000 	.word	0x20000000
 8001390:	20000138 	.word	0x20000138
 8001394:	20000304 	.word	0x20000304
 8001398:	20000010 	.word	0x20000010

0800139c <rcGetBattery>:

void rcGetBattery() {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
	if (batteryMsg.bms_type == BMS_NONE)
 80013a2:	4b5e      	ldr	r3, [pc, #376]	; (800151c <rcGetBattery+0x180>)
 80013a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d110      	bne.n	80013ce <rcGetBattery+0x32>
	{
		if (bms_uart_buff[0] == 0xDD) batteryMsg.bms_type = BMS_JBD;
 80013ac:	4b5c      	ldr	r3, [pc, #368]	; (8001520 <rcGetBattery+0x184>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2bdd      	cmp	r3, #221	; 0xdd
 80013b2:	d104      	bne.n	80013be <rcGetBattery+0x22>
 80013b4:	4b59      	ldr	r3, [pc, #356]	; (800151c <rcGetBattery+0x180>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80013bc:	e007      	b.n	80013ce <rcGetBattery+0x32>
		else if (bms_uart_buff[0] == 0xA5) batteryMsg.bms_type = BMS_SMART;
 80013be:	4b58      	ldr	r3, [pc, #352]	; (8001520 <rcGetBattery+0x184>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2ba5      	cmp	r3, #165	; 0xa5
 80013c4:	d103      	bne.n	80013ce <rcGetBattery+0x32>
 80013c6:	4b55      	ldr	r3, [pc, #340]	; (800151c <rcGetBattery+0x180>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
	if (batteryMsg.bms_type == BMS_SMART)
 80013ce:	4b53      	ldr	r3, [pc, #332]	; (800151c <rcGetBattery+0x180>)
 80013d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f040 81bb 	bne.w	8001750 <rcGetBattery+0x3b4>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <rcGetBattery+0x184>)
 80013dc:	789b      	ldrb	r3, [r3, #2]
 80013de:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	2b90      	cmp	r3, #144	; 0x90
 80013e4:	d153      	bne.n	800148e <rcGetBattery+0xf2>
		{
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <rcGetBattery+0x184>)
 80013e8:	791b      	ldrb	r3, [r3, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <rcGetBattery+0x184>)
 80013f2:	795b      	ldrb	r3, [r3, #5]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <rcGetBattery+0x180>)
 80013fc:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <rcGetBattery+0x184>)
 8001400:	7a1b      	ldrb	r3, [r3, #8]
 8001402:	b29b      	uxth	r3, r3
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b45      	ldr	r3, [pc, #276]	; (8001520 <rcGetBattery+0x184>)
 800140a:	7a5b      	ldrb	r3, [r3, #9]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <rcGetBattery+0x180>)
 8001416:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <rcGetBattery+0x184>)
 800141a:	7a9b      	ldrb	r3, [r3, #10]
 800141c:	b29b      	uxth	r3, r3
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	b29a      	uxth	r2, r3
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <rcGetBattery+0x184>)
 8001424:	7adb      	ldrb	r3, [r3, #11]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <rcGetBattery+0x180>)
 800142e:	835a      	strh	r2, [r3, #26]
			battery_capacity = batteryMsg.capacity_percent/10;
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <rcGetBattery+0x180>)
 8001432:	8b5b      	ldrh	r3, [r3, #26]
 8001434:	4a3b      	ldr	r2, [pc, #236]	; (8001524 <rcGetBattery+0x188>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	b29b      	uxth	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <rcGetBattery+0x18c>)
 8001442:	601a      	str	r2, [r3, #0]
			bms_smart_request_msg[2] = 0x95;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <rcGetBattery+0x190>)
 8001446:	2295      	movs	r2, #149	; 0x95
 8001448:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <rcGetBattery+0x190>)
 800144c:	2282      	movs	r2, #130	; 0x82
 800144e:	731a      	strb	r2, [r3, #12]
			size_recv_buff = 0;
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <rcGetBattery+0x194>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001456:	2032      	movs	r0, #50	; 0x32
 8001458:	f003 fc0c 	bl	8004c74 <HAL_Delay>
			RE_DE_ON;
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4834      	ldr	r0, [pc, #208]	; (8001534 <rcGetBattery+0x198>)
 8001464:	f004 ffe1 	bl	800642a <HAL_GPIO_WritePin>
 8001468:	2002      	movs	r0, #2
 800146a:	f003 fc03 	bl	8004c74 <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	220d      	movs	r2, #13
 8001472:	492e      	ldr	r1, [pc, #184]	; (800152c <rcGetBattery+0x190>)
 8001474:	4830      	ldr	r0, [pc, #192]	; (8001538 <rcGetBattery+0x19c>)
 8001476:	f006 f8d3 	bl	8007620 <HAL_UART_Transmit>
			RE_DE_OFF;
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <rcGetBattery+0x198>)
 8001482:	f004 ffd2 	bl	800642a <HAL_GPIO_WritePin>
 8001486:	2001      	movs	r0, #1
 8001488:	f003 fbf4 	bl	8004c74 <HAL_Delay>
	}
	/*for (int i = 0; i < sizeof bms_uart_buff; i++)
	{
		bms_uart_buff[0] = 0;
	}*/
}
 800148c:	e2f7      	b.n	8001a7e <rcGetBattery+0x6e2>
		else if (battery_comm == 0x91)
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	2b91      	cmp	r3, #145	; 0x91
 8001492:	d118      	bne.n	80014c6 <rcGetBattery+0x12a>
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <rcGetBattery+0x184>)
 8001496:	791b      	ldrb	r3, [r3, #4]
 8001498:	b29b      	uxth	r3, r3
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b29a      	uxth	r2, r3
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <rcGetBattery+0x184>)
 80014a0:	795b      	ldrb	r3, [r3, #5]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b1c      	ldr	r3, [pc, #112]	; (800151c <rcGetBattery+0x180>)
 80014aa:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <rcGetBattery+0x184>)
 80014ae:	79db      	ldrb	r3, [r3, #7]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <rcGetBattery+0x184>)
 80014b8:	7a1b      	ldrb	r3, [r3, #8]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4413      	add	r3, r2
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <rcGetBattery+0x180>)
 80014c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80014c4:	e2db      	b.n	8001a7e <rcGetBattery+0x6e2>
		else if (battery_comm == 0x92)
 80014c6:	79bb      	ldrb	r3, [r7, #6]
 80014c8:	2b92      	cmp	r3, #146	; 0x92
 80014ca:	f000 82d8 	beq.w	8001a7e <rcGetBattery+0x6e2>
		else if (battery_comm == 0x93)
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	2b93      	cmp	r3, #147	; 0x93
 80014d2:	d111      	bne.n	80014f8 <rcGetBattery+0x15c>
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <rcGetBattery+0x184>)
 80014d6:	7a1b      	ldrb	r3, [r3, #8]
 80014d8:	061a      	lsls	r2, r3, #24
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <rcGetBattery+0x184>)
 80014dc:	7a5b      	ldrb	r3, [r3, #9]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	441a      	add	r2, r3
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <rcGetBattery+0x184>)
 80014e4:	7a9b      	ldrb	r3, [r3, #10]
 80014e6:	021b      	lsls	r3, r3, #8
 80014e8:	4413      	add	r3, r2
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <rcGetBattery+0x184>)
 80014ec:	7ad2      	ldrb	r2, [r2, #11]
 80014ee:	4413      	add	r3, r2
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <rcGetBattery+0x180>)
 80014f4:	609a      	str	r2, [r3, #8]
}
 80014f6:	e2c2      	b.n	8001a7e <rcGetBattery+0x6e2>
		else if (battery_comm == 0x94)
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	2b94      	cmp	r3, #148	; 0x94
 80014fc:	d108      	bne.n	8001510 <rcGetBattery+0x174>
			batteryMsg.num_of_battery = bms_uart_buff[4];
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <rcGetBattery+0x184>)
 8001500:	791a      	ldrb	r2, [r3, #4]
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <rcGetBattery+0x180>)
 8001504:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <rcGetBattery+0x184>)
 8001508:	795a      	ldrb	r2, [r3, #5]
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <rcGetBattery+0x180>)
 800150c:	77da      	strb	r2, [r3, #31]
}
 800150e:	e2b6      	b.n	8001a7e <rcGetBattery+0x6e2>
			int rc = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
			for (int i=size_recv_buff;i<(data_size+size_recv_buff);i++)
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <rcGetBattery+0x194>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	e01e      	b.n	800155a <rcGetBattery+0x1be>
 800151c:	20000304 	.word	0x20000304
 8001520:	200001cc 	.word	0x200001cc
 8001524:	cccccccd 	.word	0xcccccccd
 8001528:	200002a0 	.word	0x200002a0
 800152c:	20000010 	.word	0x20000010
 8001530:	20000298 	.word	0x20000298
 8001534:	40011000 	.word	0x40011000
 8001538:	20000138 	.word	0x20000138
				smart_buff[i] = bms_uart_buff[rc];
 800153c:	4a7f      	ldr	r2, [pc, #508]	; (800173c <rcGetBattery+0x3a0>)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	4a7e      	ldr	r2, [pc, #504]	; (8001740 <rcGetBattery+0x3a4>)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4413      	add	r3, r2
 800154a:	460a      	mov	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
				rc++;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
			for (int i=size_recv_buff;i<(data_size+size_recv_buff);i++)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3301      	adds	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <rcGetBattery+0x3a8>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b79      	ldr	r3, [pc, #484]	; (8001748 <rcGetBattery+0x3ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	dbe7      	blt.n	800153c <rcGetBattery+0x1a0>
			size_recv_buff += data_size;
 800156c:	4b75      	ldr	r3, [pc, #468]	; (8001744 <rcGetBattery+0x3a8>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b75      	ldr	r3, [pc, #468]	; (8001748 <rcGetBattery+0x3ac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a73      	ldr	r2, [pc, #460]	; (8001748 <rcGetBattery+0x3ac>)
 800157a:	6013      	str	r3, [r2, #0]
			if (size_recv_buff == 78)
 800157c:	4b72      	ldr	r3, [pc, #456]	; (8001748 <rcGetBattery+0x3ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b4e      	cmp	r3, #78	; 0x4e
 8001582:	f040 827c 	bne.w	8001a7e <rcGetBattery+0x6e2>
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <rcGetBattery+0x3a0>)
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	b29b      	uxth	r3, r3
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b6a      	ldr	r3, [pc, #424]	; (800173c <rcGetBattery+0x3a0>)
 8001592:	799b      	ldrb	r3, [r3, #6]
 8001594:	b29b      	uxth	r3, r3
 8001596:	4413      	add	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	4b6c      	ldr	r3, [pc, #432]	; (800174c <rcGetBattery+0x3b0>)
 800159c:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (smart_buff[7] << 8) + smart_buff[8];
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <rcGetBattery+0x3a4>)
 80015a0:	79db      	ldrb	r3, [r3, #7]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	021b      	lsls	r3, r3, #8
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	4b65      	ldr	r3, [pc, #404]	; (8001740 <rcGetBattery+0x3a4>)
 80015aa:	7a1b      	ldrb	r3, [r3, #8]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	4b66      	ldr	r3, [pc, #408]	; (800174c <rcGetBattery+0x3b0>)
 80015b4:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (smart_buff[9] << 8) + smart_buff[10];
 80015b6:	4b62      	ldr	r3, [pc, #392]	; (8001740 <rcGetBattery+0x3a4>)
 80015b8:	7a5b      	ldrb	r3, [r3, #9]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <rcGetBattery+0x3a4>)
 80015c2:	7a9b      	ldrb	r3, [r3, #10]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b60      	ldr	r3, [pc, #384]	; (800174c <rcGetBattery+0x3b0>)
 80015cc:	861a      	strh	r2, [r3, #48]	; 0x30
				batteryMsg.cell_3 = (smart_buff[5+13] << 8) + smart_buff[(6+13)];
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <rcGetBattery+0x3a4>)
 80015d0:	7c9b      	ldrb	r3, [r3, #18]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b59      	ldr	r3, [pc, #356]	; (8001740 <rcGetBattery+0x3a4>)
 80015da:	7cdb      	ldrb	r3, [r3, #19]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <rcGetBattery+0x3b0>)
 80015e4:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (smart_buff[(7+13)] << 8) + smart_buff[(8+13)];
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <rcGetBattery+0x3a4>)
 80015e8:	7d1b      	ldrb	r3, [r3, #20]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <rcGetBattery+0x3a4>)
 80015f2:	7d5b      	ldrb	r3, [r3, #21]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <rcGetBattery+0x3b0>)
 80015fc:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (smart_buff[9+13] << 8) + smart_buff[10+13];
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <rcGetBattery+0x3a4>)
 8001600:	7d9b      	ldrb	r3, [r3, #22]
 8001602:	b29b      	uxth	r3, r3
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <rcGetBattery+0x3a4>)
 800160a:	7ddb      	ldrb	r3, [r3, #23]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4413      	add	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b4e      	ldr	r3, [pc, #312]	; (800174c <rcGetBattery+0x3b0>)
 8001614:	86da      	strh	r2, [r3, #54]	; 0x36
				batteryMsg.cell_6 = (smart_buff[5+13*2] << 8) + smart_buff[6+13*2];
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <rcGetBattery+0x3a4>)
 8001618:	7fdb      	ldrb	r3, [r3, #31]
 800161a:	b29b      	uxth	r3, r3
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <rcGetBattery+0x3a4>)
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b47      	ldr	r3, [pc, #284]	; (800174c <rcGetBattery+0x3b0>)
 800162e:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (smart_buff[7+13*2] << 8) + smart_buff[8+13*2];
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <rcGetBattery+0x3a4>)
 8001632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001636:	b29b      	uxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <rcGetBattery+0x3a4>)
 800163e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b40      	ldr	r3, [pc, #256]	; (800174c <rcGetBattery+0x3b0>)
 800164a:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (smart_buff[9+13*2] << 8) + smart_buff[10+13*2];
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <rcGetBattery+0x3a4>)
 800164e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001652:	b29b      	uxth	r3, r3
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b29a      	uxth	r2, r3
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <rcGetBattery+0x3a4>)
 800165a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800165e:	b29b      	uxth	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <rcGetBattery+0x3b0>)
 8001666:	879a      	strh	r2, [r3, #60]	; 0x3c
				batteryMsg.cell_9 = (smart_buff[5+13*3] << 8) + smart_buff[6+13*3];
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <rcGetBattery+0x3a4>)
 800166a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800166e:	b29b      	uxth	r3, r3
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <rcGetBattery+0x3a4>)
 8001676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800167a:	b29b      	uxth	r3, r3
 800167c:	4413      	add	r3, r2
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b32      	ldr	r3, [pc, #200]	; (800174c <rcGetBattery+0x3b0>)
 8001682:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (smart_buff[7+13*3] << 8) + smart_buff[8+13*3];
 8001684:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <rcGetBattery+0x3a4>)
 8001686:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <rcGetBattery+0x3a4>)
 8001692:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001696:	b29b      	uxth	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <rcGetBattery+0x3b0>)
 800169e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (smart_buff[9+13*3] << 8) + smart_buff[10+13*3];
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <rcGetBattery+0x3a4>)
 80016a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	021b      	lsls	r3, r3, #8
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <rcGetBattery+0x3a4>)
 80016b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <rcGetBattery+0x3b0>)
 80016bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				batteryMsg.cell_12 = (smart_buff[5+13*4] << 8) + smart_buff[6+13*4];
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <rcGetBattery+0x3a4>)
 80016c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <rcGetBattery+0x3a4>)
 80016ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <rcGetBattery+0x3b0>)
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (smart_buff[7+13*4] << 8) + smart_buff[8+13*4];
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <rcGetBattery+0x3a4>)
 80016e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <rcGetBattery+0x3a4>)
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <rcGetBattery+0x3b0>)
 80016f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (smart_buff[9+13*4] << 8) + smart_buff[10+13*4];
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <rcGetBattery+0x3a4>)
 80016fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001702:	b29b      	uxth	r3, r3
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <rcGetBattery+0x3a4>)
 800170a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800170e:	b29b      	uxth	r3, r3
 8001710:	4413      	add	r3, r2
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b0d      	ldr	r3, [pc, #52]	; (800174c <rcGetBattery+0x3b0>)
 8001716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				batteryMsg.cell_15 = (smart_buff[5+13*5] << 8) + smart_buff[6+13*5];
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <rcGetBattery+0x3a4>)
 800171c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001720:	b29b      	uxth	r3, r3
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <rcGetBattery+0x3a4>)
 8001728:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800172c:	b29b      	uxth	r3, r3
 800172e:	4413      	add	r3, r2
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <rcGetBattery+0x3b0>)
 8001734:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8001738:	e1a1      	b.n	8001a7e <rcGetBattery+0x6e2>
 800173a:	bf00      	nop
 800173c:	200001cc 	.word	0x200001cc
 8001740:	20000234 	.word	0x20000234
 8001744:	20000232 	.word	0x20000232
 8001748:	20000298 	.word	0x20000298
 800174c:	20000304 	.word	0x20000304
	else if (batteryMsg.bms_type == BMS_JBD)
 8001750:	4b5b      	ldr	r3, [pc, #364]	; (80018c0 <rcGetBattery+0x524>)
 8001752:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001756:	2b02      	cmp	r3, #2
 8001758:	f040 8191 	bne.w	8001a7e <rcGetBattery+0x6e2>
		uint8_t battery_comm = bms_uart_buff[1];
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <rcGetBattery+0x528>)
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b03      	cmp	r3, #3
 8001766:	f040 80b7 	bne.w	80018d8 <rcGetBattery+0x53c>
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 800176a:	4b56      	ldr	r3, [pc, #344]	; (80018c4 <rcGetBattery+0x528>)
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	b29b      	uxth	r3, r3
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <rcGetBattery+0x528>)
 8001776:	795b      	ldrb	r3, [r3, #5]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <rcGetBattery+0x524>)
 8001780:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8001782:	4b4f      	ldr	r3, [pc, #316]	; (80018c0 <rcGetBattery+0x524>)
 8001784:	2200      	movs	r2, #0
 8001786:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8001788:	4b4e      	ldr	r3, [pc, #312]	; (80018c4 <rcGetBattery+0x528>)
 800178a:	7a1b      	ldrb	r3, [r3, #8]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <rcGetBattery+0x528>)
 8001790:	7a52      	ldrb	r2, [r2, #9]
 8001792:	4413      	add	r3, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <rcGetBattery+0x524>)
 8001798:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <rcGetBattery+0x528>)
 800179c:	7a9b      	ldrb	r3, [r3, #10]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <rcGetBattery+0x528>)
 80017a6:	7adb      	ldrb	r3, [r3, #11]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <rcGetBattery+0x524>)
 80017b0:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <rcGetBattery+0x528>)
 80017b4:	7b1b      	ldrb	r3, [r3, #12]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	021b      	lsls	r3, r3, #8
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <rcGetBattery+0x528>)
 80017be:	7b5b      	ldrb	r3, [r3, #13]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <rcGetBattery+0x524>)
 80017c8:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 80017ca:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <rcGetBattery+0x528>)
 80017cc:	7b9b      	ldrb	r3, [r3, #14]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <rcGetBattery+0x528>)
 80017d6:	7bdb      	ldrb	r3, [r3, #15]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	4413      	add	r3, r2
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <rcGetBattery+0x524>)
 80017e0:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <rcGetBattery+0x528>)
 80017e4:	7c1b      	ldrb	r3, [r3, #16]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <rcGetBattery+0x528>)
 80017ee:	7c5b      	ldrb	r3, [r3, #17]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <rcGetBattery+0x524>)
 80017f8:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <rcGetBattery+0x528>)
 80017fc:	7c9b      	ldrb	r3, [r3, #18]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <rcGetBattery+0x528>)
 8001806:	7cdb      	ldrb	r3, [r3, #19]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4413      	add	r3, r2
 800180c:	b29a      	uxth	r2, r3
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <rcGetBattery+0x524>)
 8001810:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8001812:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <rcGetBattery+0x528>)
 8001814:	7d1b      	ldrb	r3, [r3, #20]
 8001816:	b29b      	uxth	r3, r3
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <rcGetBattery+0x528>)
 800181e:	7d5b      	ldrb	r3, [r3, #21]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4413      	add	r3, r2
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <rcGetBattery+0x524>)
 8001828:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <rcGetBattery+0x528>)
 800182c:	7d9a      	ldrb	r2, [r3, #22]
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <rcGetBattery+0x524>)
 8001830:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <rcGetBattery+0x528>)
 8001834:	7ddb      	ldrb	r3, [r3, #23]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <rcGetBattery+0x524>)
 800183a:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <rcGetBattery+0x528>)
 800183e:	7e1a      	ldrb	r2, [r3, #24]
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <rcGetBattery+0x524>)
 8001842:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <rcGetBattery+0x528>)
 8001846:	7e5a      	ldrb	r2, [r3, #25]
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <rcGetBattery+0x524>)
 800184a:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <rcGetBattery+0x528>)
 800184e:	7e9a      	ldrb	r2, [r3, #26]
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <rcGetBattery+0x524>)
 8001852:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <rcGetBattery+0x528>)
 8001856:	7edb      	ldrb	r3, [r3, #27]
 8001858:	b29b      	uxth	r3, r3
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <rcGetBattery+0x528>)
 8001860:	7f1b      	ldrb	r3, [r3, #28]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <rcGetBattery+0x524>)
 800186a:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <rcGetBattery+0x528>)
 800186e:	7f5b      	ldrb	r3, [r3, #29]
 8001870:	b29b      	uxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b29a      	uxth	r2, r3
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <rcGetBattery+0x528>)
 8001878:	7f9b      	ldrb	r3, [r3, #30]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4413      	add	r3, r2
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <rcGetBattery+0x524>)
 8001882:	845a      	strh	r2, [r3, #34]	; 0x22
			battery_capacity = batteryMsg.capacity_percent;
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <rcGetBattery+0x524>)
 8001886:	8b5b      	ldrh	r3, [r3, #26]
 8001888:	461a      	mov	r2, r3
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <rcGetBattery+0x52c>)
 800188c:	601a      	str	r2, [r3, #0]
			RE_DE_ON;
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <rcGetBattery+0x530>)
 8001896:	f004 fdc8 	bl	800642a <HAL_GPIO_WritePin>
 800189a:	2002      	movs	r0, #2
 800189c:	f003 f9ea 	bl	8004c74 <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	2207      	movs	r2, #7
 80018a4:	490a      	ldr	r1, [pc, #40]	; (80018d0 <rcGetBattery+0x534>)
 80018a6:	480b      	ldr	r0, [pc, #44]	; (80018d4 <rcGetBattery+0x538>)
 80018a8:	f005 feba 	bl	8007620 <HAL_UART_Transmit>
			RE_DE_OFF;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <rcGetBattery+0x530>)
 80018b4:	f004 fdb9 	bl	800642a <HAL_GPIO_WritePin>
 80018b8:	2001      	movs	r0, #1
 80018ba:	f003 f9db 	bl	8004c74 <HAL_Delay>
}
 80018be:	e0de      	b.n	8001a7e <rcGetBattery+0x6e2>
 80018c0:	20000304 	.word	0x20000304
 80018c4:	200001cc 	.word	0x200001cc
 80018c8:	200002a0 	.word	0x200002a0
 80018cc:	40011000 	.word	0x40011000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000138 	.word	0x20000138
		else if (battery_comm == 0x04)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b04      	cmp	r3, #4
 80018dc:	f040 80cf 	bne.w	8001a7e <rcGetBattery+0x6e2>
			batteryMsg.battery_pack = bms_uart_buff[3];
 80018e0:	4b69      	ldr	r3, [pc, #420]	; (8001a88 <rcGetBattery+0x6ec>)
 80018e2:	78da      	ldrb	r2, [r3, #3]
 80018e4:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <rcGetBattery+0x6f0>)
 80018e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <rcGetBattery+0x6ec>)
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <rcGetBattery+0x6ec>)
 80018f6:	795b      	ldrb	r3, [r3, #5]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <rcGetBattery+0x6f0>)
 8001900:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 8001902:	4b61      	ldr	r3, [pc, #388]	; (8001a88 <rcGetBattery+0x6ec>)
 8001904:	799b      	ldrb	r3, [r3, #6]
 8001906:	b29b      	uxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <rcGetBattery+0x6ec>)
 800190e:	79db      	ldrb	r3, [r3, #7]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4413      	add	r3, r2
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <rcGetBattery+0x6f0>)
 8001918:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <rcGetBattery+0x6ec>)
 800191c:	7a1b      	ldrb	r3, [r3, #8]
 800191e:	b29b      	uxth	r3, r3
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b58      	ldr	r3, [pc, #352]	; (8001a88 <rcGetBattery+0x6ec>)
 8001926:	7a5b      	ldrb	r3, [r3, #9]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4413      	add	r3, r2
 800192c:	b29a      	uxth	r2, r3
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <rcGetBattery+0x6f0>)
 8001930:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8001932:	4b55      	ldr	r3, [pc, #340]	; (8001a88 <rcGetBattery+0x6ec>)
 8001934:	7a9b      	ldrb	r3, [r3, #10]
 8001936:	b29b      	uxth	r3, r3
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b29a      	uxth	r2, r3
 800193c:	4b52      	ldr	r3, [pc, #328]	; (8001a88 <rcGetBattery+0x6ec>)
 800193e:	7adb      	ldrb	r3, [r3, #11]
 8001940:	b29b      	uxth	r3, r3
 8001942:	4413      	add	r3, r2
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <rcGetBattery+0x6f0>)
 8001948:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <rcGetBattery+0x6ec>)
 800194c:	7b1b      	ldrb	r3, [r3, #12]
 800194e:	b29b      	uxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29a      	uxth	r2, r3
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <rcGetBattery+0x6ec>)
 8001956:	7b5b      	ldrb	r3, [r3, #13]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4413      	add	r3, r2
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <rcGetBattery+0x6f0>)
 8001960:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8001962:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <rcGetBattery+0x6ec>)
 8001964:	7b9b      	ldrb	r3, [r3, #14]
 8001966:	b29b      	uxth	r3, r3
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <rcGetBattery+0x6ec>)
 800196e:	7bdb      	ldrb	r3, [r3, #15]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b45      	ldr	r3, [pc, #276]	; (8001a8c <rcGetBattery+0x6f0>)
 8001978:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <rcGetBattery+0x6ec>)
 800197c:	7c1b      	ldrb	r3, [r3, #16]
 800197e:	b29b      	uxth	r3, r3
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <rcGetBattery+0x6ec>)
 8001986:	7c5b      	ldrb	r3, [r3, #17]
 8001988:	b29b      	uxth	r3, r3
 800198a:	4413      	add	r3, r2
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <rcGetBattery+0x6f0>)
 8001990:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <rcGetBattery+0x6ec>)
 8001994:	7c9b      	ldrb	r3, [r3, #18]
 8001996:	b29b      	uxth	r3, r3
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <rcGetBattery+0x6ec>)
 800199e:	7cdb      	ldrb	r3, [r3, #19]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <rcGetBattery+0x6f0>)
 80019a8:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <rcGetBattery+0x6ec>)
 80019ac:	7d1b      	ldrb	r3, [r3, #20]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <rcGetBattery+0x6ec>)
 80019b6:	7d5b      	ldrb	r3, [r3, #21]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <rcGetBattery+0x6f0>)
 80019c0:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <rcGetBattery+0x6ec>)
 80019c4:	7d9b      	ldrb	r3, [r3, #22]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <rcGetBattery+0x6ec>)
 80019ce:	7ddb      	ldrb	r3, [r3, #23]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <rcGetBattery+0x6f0>)
 80019d8:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 80019da:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <rcGetBattery+0x6ec>)
 80019dc:	7e1b      	ldrb	r3, [r3, #24]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <rcGetBattery+0x6ec>)
 80019e6:	7e5b      	ldrb	r3, [r3, #25]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <rcGetBattery+0x6f0>)
 80019f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <rcGetBattery+0x6ec>)
 80019f6:	7e9b      	ldrb	r3, [r3, #26]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a00:	7edb      	ldrb	r3, [r3, #27]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <rcGetBattery+0x6f0>)
 8001a0a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a10:	7f1b      	ldrb	r3, [r3, #28]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a1a:	7f5b      	ldrb	r3, [r3, #29]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <rcGetBattery+0x6f0>)
 8001a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 8001a28:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a2a:	7f9b      	ldrb	r3, [r3, #30]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a34:	7fdb      	ldrb	r3, [r3, #31]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <rcGetBattery+0x6f0>)
 8001a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <rcGetBattery+0x6f0>)
 8001a5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <rcGetBattery+0x6ec>)
 8001a6e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <rcGetBattery+0x6f0>)
 8001a7a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200001cc 	.word	0x200001cc
 8001a8c:	20000304 	.word	0x20000304

08001a90 <unwrap_encoder>:

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001aa2:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ab4:	425a      	negs	r2, r3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	bf58      	it	pl
 8001abc:	4253      	negpl	r3, r2
 8001abe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001ac2:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001aca:	da03      	bge.n	8001ad4 <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ad2:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	4413      	add	r3, r2
 8001adc:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <getEncoder>:

void getEncoder()
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
	int currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <getEncoder+0x28>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	607b      	str	r3, [r7, #4]
	enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4906      	ldr	r1, [pc, #24]	; (8001b20 <getEncoder+0x2c>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ffc1 	bl	8001a90 <unwrap_encoder>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <getEncoder+0x30>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200000f0 	.word	0x200000f0
 8001b20:	200001c4 	.word	0x200001c4
 8001b24:	200001c8 	.word	0x200001c8

08001b28 <buttons_Init>:

void buttons_Init()
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	stButtons[0].button_port = BUTTON1_GPIO_Port;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <buttons_Init+0x44>)
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <buttons_Init+0x48>)
 8001b30:	601a      	str	r2, [r3, #0]
	stButtons[0].button_pin = BUTTON1_Pin;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <buttons_Init+0x44>)
 8001b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b38:	809a      	strh	r2, [r3, #4]
	stButtons[1].button_port = BUTTON2_GPIO_Port;
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <buttons_Init+0x44>)
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <buttons_Init+0x48>)
 8001b3e:	60da      	str	r2, [r3, #12]
	stButtons[1].button_pin = BUTTON2_Pin;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <buttons_Init+0x44>)
 8001b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b46:	821a      	strh	r2, [r3, #16]
	stButtons[2].button_port = BUTTON3_GPIO_Port;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <buttons_Init+0x44>)
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <buttons_Init+0x48>)
 8001b4c:	619a      	str	r2, [r3, #24]
	stButtons[2].button_pin = BUTTON3_Pin;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <buttons_Init+0x44>)
 8001b50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b54:	839a      	strh	r2, [r3, #28]
	stButtons[3].button_port = BUTTON4_GPIO_Port;
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <buttons_Init+0x44>)
 8001b58:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <buttons_Init+0x48>)
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
	stButtons[3].button_pin = BUTTON4_Pin;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <buttons_Init+0x44>)
 8001b5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000354 	.word	0x20000354
 8001b70:	40010c00 	.word	0x40010c00

08001b74 <getButton>:
uint8_t short_state = 0;
uint8_t long_state = 0;
uint32_t time_key1 = 0;

void getButton()
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e171      	b.n	8001e64 <getButton+0x2f0>
	{
		uint32_t ms = HAL_GetTick();
 8001b80:	f003 f86e 	bl	8004c60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
		uint8_t key_state = HAL_GPIO_ReadPin(stButtons[i].button_port, stButtons[i].button_pin);
 8001b86:	4997      	ldr	r1, [pc, #604]	; (8001de4 <getButton+0x270>)
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	440b      	add	r3, r1
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	4993      	ldr	r1, [pc, #588]	; (8001de4 <getButton+0x270>)
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f004 fc27 	bl	80063fc <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
		if(key_state == 0 && !stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d136      	bne.n	8001c26 <getButton+0xb2>
 8001bb8:	498a      	ldr	r1, [pc, #552]	; (8001de4 <getButton+0x270>)
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3306      	adds	r3, #6
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d12b      	bne.n	8001c26 <getButton+0xb2>
 8001bce:	4985      	ldr	r1, [pc, #532]	; (8001de4 <getButton+0x270>)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	3308      	adds	r3, #8
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b32      	cmp	r3, #50	; 0x32
 8001be6:	d91e      	bls.n	8001c26 <getButton+0xb2>
		{
			stButtons[i].short_state = 1;
 8001be8:	497e      	ldr	r1, [pc, #504]	; (8001de4 <getButton+0x270>)
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3306      	adds	r3, #6
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
			stButtons[i].long_state = 0;
 8001bfc:	4979      	ldr	r1, [pc, #484]	; (8001de4 <getButton+0x270>)
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3307      	adds	r3, #7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8001c10:	4974      	ldr	r1, [pc, #464]	; (8001de4 <getButton+0x270>)
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	4613      	mov	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3308      	adds	r3, #8
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e11b      	b.n	8001e5e <getButton+0x2ea>
		}
		else if(key_state == 0 && !stButtons[i].long_state && (ms - stButtons[i].time_key) > 1000)
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d141      	bne.n	8001cb0 <getButton+0x13c>
 8001c2c:	496d      	ldr	r1, [pc, #436]	; (8001de4 <getButton+0x270>)
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	3307      	adds	r3, #7
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d136      	bne.n	8001cb0 <getButton+0x13c>
 8001c42:	4968      	ldr	r1, [pc, #416]	; (8001de4 <getButton+0x270>)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3308      	adds	r3, #8
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c5c:	d928      	bls.n	8001cb0 <getButton+0x13c>
		{
			stButtons[i].long_state = 1;
 8001c5e:	4961      	ldr	r1, [pc, #388]	; (8001de4 <getButton+0x270>)
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3307      	adds	r3, #7
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
			//long press
			if (i==0)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 80f2 	bne.w	8001e5e <getButton+0x2ea>
			{
				curr_menu++;
 8001c7a:	4b5b      	ldr	r3, [pc, #364]	; (8001de8 <getButton+0x274>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a59      	ldr	r2, [pc, #356]	; (8001de8 <getButton+0x274>)
 8001c82:	6013      	str	r3, [r2, #0]
				if (curr_menu>=MENU_MAX)
 8001c84:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <getButton+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	dd02      	ble.n	8001c92 <getButton+0x11e>
				{
					curr_menu = 0;
 8001c8c:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <getButton+0x274>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
				}
				if (start_stop)
 8001c92:	4b56      	ldr	r3, [pc, #344]	; (8001dec <getButton+0x278>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <getButton+0x12c>
				{
					start_stop = 0;
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <getButton+0x278>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
				}
				check_bms_i = 0;
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <getButton+0x27c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
				batteryMsg.bms_type = BMS_NONE;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <getButton+0x280>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			if (i==0)
 8001cae:	e0d6      	b.n	8001e5e <getButton+0x2ea>
			}
		}
		else if(key_state == 1 && stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f040 80d3 	bne.w	8001e5e <getButton+0x2ea>
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <getButton+0x270>)
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 80c7 	beq.w	8001e5e <getButton+0x2ea>
 8001cd0:	4944      	ldr	r1, [pc, #272]	; (8001de4 <getButton+0x270>)
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3308      	adds	r3, #8
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b32      	cmp	r3, #50	; 0x32
 8001ce8:	f240 80b9 	bls.w	8001e5e <getButton+0x2ea>
		{
			stButtons[i].short_state = 0;
 8001cec:	493d      	ldr	r1, [pc, #244]	; (8001de4 <getButton+0x270>)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	3306      	adds	r3, #6
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8001d00:	4938      	ldr	r1, [pc, #224]	; (8001de4 <getButton+0x270>)
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3308      	adds	r3, #8
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	601a      	str	r2, [r3, #0]

		  if(!stButtons[i].long_state)
 8001d14:	4933      	ldr	r1, [pc, #204]	; (8001de4 <getButton+0x270>)
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	3307      	adds	r3, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8099 	bne.w	8001e5e <getButton+0x2ea>
		  {
			//short press
			  if (curr_menu == MENU_BMS)
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <getButton+0x274>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d13e      	bne.n	8001db2 <getButton+0x23e>
			  {
				  if (i == 0)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11b      	bne.n	8001d72 <getButton+0x1fe>
				  {
					  check_bms_i = 0;
 8001d3a:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <getButton+0x27c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
					  batteryMsg.bms_type = BMS_NONE;
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <getButton+0x280>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					  screen_bms = 0;
 8001d48:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <getButton+0x284>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
					  uint16_t* p_cell = &batteryMsg.cell_0;
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <getButton+0x288>)
 8001d50:	613b      	str	r3, [r7, #16]
					  for (int i=0; i<16; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	e008      	b.n	8001d6a <getButton+0x1f6>
					  {
						  *p_cell = 0;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
						  p_cell++;
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	3302      	adds	r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
					  for (int i=0; i<16; i++)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3301      	adds	r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	ddf3      	ble.n	8001d58 <getButton+0x1e4>
 8001d70:	e075      	b.n	8001e5e <getButton+0x2ea>
					  }
				  }
				  else if (i == 1)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10c      	bne.n	8001d92 <getButton+0x21e>
				  {
					  screen_bms--;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <getButton+0x284>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <getButton+0x284>)
 8001d80:	6013      	str	r3, [r2, #0]
					  if (screen_bms < 0)
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <getButton+0x284>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da69      	bge.n	8001e5e <getButton+0x2ea>
					  {
					  	  screen_bms = 3;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <getButton+0x284>)
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e065      	b.n	8001e5e <getButton+0x2ea>
					  }

				  }
				  else if (i == 2)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d162      	bne.n	8001e5e <getButton+0x2ea>
				  {
					  screen_bms++;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <getButton+0x284>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <getButton+0x284>)
 8001da0:	6013      	str	r3, [r2, #0]
					  if (screen_bms > 3)
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <getButton+0x284>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	dd59      	ble.n	8001e5e <getButton+0x2ea>
					  {
						  screen_bms = 0;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <getButton+0x284>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e055      	b.n	8001e5e <getButton+0x2ea>
					  }
				  }
			  }
			  else if (curr_menu == MENU_DRIVER)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <getButton+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d151      	bne.n	8001e5e <getButton+0x2ea>
			  {
				  if (i == 0)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d121      	bne.n	8001e04 <getButton+0x290>
				  {
					  start_stop = !start_stop;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <getButton+0x278>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <getButton+0x278>)
 8001dd2:	601a      	str	r2, [r3, #0]
					  if (!start_stop)
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <getButton+0x278>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d140      	bne.n	8001e5e <getButton+0x2ea>
					  {
						  motor_speed = 0;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <getButton+0x28c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e03c      	b.n	8001e5e <getButton+0x2ea>
 8001de4:	20000354 	.word	0x20000354
 8001de8:	20000300 	.word	0x20000300
 8001dec:	200002ac 	.word	0x200002ac
 8001df0:	200002a4 	.word	0x200002a4
 8001df4:	20000304 	.word	0x20000304
 8001df8:	200002a8 	.word	0x200002a8
 8001dfc:	20000330 	.word	0x20000330
 8001e00:	200002b0 	.word	0x200002b0
					  }
				  }
				  else if (i == 1 && start_stop)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d114      	bne.n	8001e34 <getButton+0x2c0>
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <getButton+0x304>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d010      	beq.n	8001e34 <getButton+0x2c0>
				  {
					  motor_speed += 1000;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <getButton+0x308>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001e1a:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <getButton+0x308>)
 8001e1c:	6013      	str	r3, [r2, #0]
					  if (motor_speed>10000) motor_speed = 10000;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <getButton+0x308>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e26:	4293      	cmp	r3, r2
 8001e28:	dd19      	ble.n	8001e5e <getButton+0x2ea>
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <getButton+0x308>)
 8001e2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e014      	b.n	8001e5e <getButton+0x2ea>
				  }
				  else if (i == 2 && start_stop)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d111      	bne.n	8001e5e <getButton+0x2ea>
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <getButton+0x304>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <getButton+0x2ea>
				  {
					  motor_speed -= 1000;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <getButton+0x308>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <getButton+0x308>)
 8001e4c:	6013      	str	r3, [r2, #0]
				  	  if (motor_speed<-10000) motor_speed = -10000;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <getButton+0x308>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <getButton+0x30c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	da02      	bge.n	8001e5e <getButton+0x2ea>
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <getButton+0x308>)
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <getButton+0x30c>)
 8001e5c:	601a      	str	r2, [r3, #0]
	for (int i=0; i<4; i++)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	f77f ae8a 	ble.w	8001b80 <getButton+0xc>
				  }
			  }
		  }
		}
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002ac 	.word	0x200002ac
 8001e7c:	200002b0 	.word	0x200002b0
 8001e80:	ffffd8f0 	.word	0xffffd8f0

08001e84 <menu_update>:

void menu_update()
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b0a1      	sub	sp, #132	; 0x84
 8001e88:	af02      	add	r7, sp, #8
	SSD1306_COLOR color1 = White;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	SSD1306_COLOR color2 = White;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	SSD1306_COLOR color3 = White;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	if (curr_menu == MENU_ENC)
 8001e9c:	4ba4      	ldr	r3, [pc, #656]	; (8002130 <menu_update+0x2ac>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d132      	bne.n	8001f0a <menu_update+0x86>
	{
		char str [12];
		snprintf(str, sizeof str, "%d", (int)enc_idle_tick);
 8001ea4:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <menu_update+0x2b0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001eac:	4aa2      	ldr	r2, [pc, #648]	; (8002138 <menu_update+0x2b4>)
 8001eae:	210c      	movs	r1, #12
 8001eb0:	f002 fbc6 	bl	8004640 <snprintf_>
		ssd1306_Fill(Black);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f002 fcb1 	bl	800481c <ssd1306_Fill>
		color1 = Black;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		ssd1306_SetCursor(2, 18);
 8001ec0:	2112      	movs	r1, #18
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f002 fe04 	bl	8004ad0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x26, White);
 8001ec8:	4a9c      	ldr	r2, [pc, #624]	; (800213c <menu_update+0x2b8>)
 8001eca:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001ece:	2301      	movs	r3, #1
 8001ed0:	ca06      	ldmia	r2, {r1, r2}
 8001ed2:	f002 fdd7 	bl	8004a84 <ssd1306_WriteString>
		if (enc_idle_tick == 0)
 8001ed6:	4b97      	ldr	r3, [pc, #604]	; (8002134 <menu_update+0x2b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 828f 	bne.w	80023fe <menu_update+0x57a>
		{
			ssd1306_SetCursor(2, 42);
 8001ee0:	212a      	movs	r1, #42	; 0x2a
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f002 fdf4 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("Long press OK", Font_7x10, White);
 8001ee8:	4a95      	ldr	r2, [pc, #596]	; (8002140 <menu_update+0x2bc>)
 8001eea:	2301      	movs	r3, #1
 8001eec:	ca06      	ldmia	r2, {r1, r2}
 8001eee:	4895      	ldr	r0, [pc, #596]	; (8002144 <menu_update+0x2c0>)
 8001ef0:	f002 fdc8 	bl	8004a84 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 8001ef4:	2135      	movs	r1, #53	; 0x35
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f002 fdea 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("to select", Font_7x10, White);
 8001efc:	4a90      	ldr	r2, [pc, #576]	; (8002140 <menu_update+0x2bc>)
 8001efe:	2301      	movs	r3, #1
 8001f00:	ca06      	ldmia	r2, {r1, r2}
 8001f02:	4891      	ldr	r0, [pc, #580]	; (8002148 <menu_update+0x2c4>)
 8001f04:	f002 fdbe 	bl	8004a84 <ssd1306_WriteString>
 8001f08:	e279      	b.n	80023fe <menu_update+0x57a>
			ssd1306_SetCursor(2, 18);
			ssd1306_WriteString(xx, Font_16x26, Black);
		}
		*/
	}
	else if (curr_menu == MENU_BMS) {
 8001f0a:	4b89      	ldr	r3, [pc, #548]	; (8002130 <menu_update+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 81fb 	bne.w	800230a <menu_update+0x486>
		ssd1306_Fill(Black);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f002 fc81 	bl	800481c <ssd1306_Fill>
		color2 = Black;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		if (batteryMsg.bms_type != BMS_NONE) {
 8001f20:	4b8a      	ldr	r3, [pc, #552]	; (800214c <menu_update+0x2c8>)
 8001f22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 81b2 	beq.w	8002290 <menu_update+0x40c>
			char volt[15];
			int x_coord = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	673b      	str	r3, [r7, #112]	; 0x70
			int y_coord = 16;
 8001f30:	2310      	movs	r3, #16
 8001f32:	66fb      	str	r3, [r7, #108]	; 0x6c
			uint16_t* p_cell = &batteryMsg.cell_0;
 8001f34:	4b86      	ldr	r3, [pc, #536]	; (8002150 <menu_update+0x2cc>)
 8001f36:	66bb      	str	r3, [r7, #104]	; 0x68
			float f_volt = 0;
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	667b      	str	r3, [r7, #100]	; 0x64
			if (screen_bms == 0)
 8001f3e:	4b85      	ldr	r3, [pc, #532]	; (8002154 <menu_update+0x2d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d16b      	bne.n	800201e <menu_update+0x19a>
			{
				char str[6];
				snprintf(str, sizeof str, "%d%%", (int) battery_capacity);
 8001f46:	4b84      	ldr	r3, [pc, #528]	; (8002158 <menu_update+0x2d4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f4e:	4a83      	ldr	r2, [pc, #524]	; (800215c <menu_update+0x2d8>)
 8001f50:	2106      	movs	r1, #6
 8001f52:	f002 fb75 	bl	8004640 <snprintf_>
				ssd1306_SetCursor(2, 18);
 8001f56:	2112      	movs	r1, #18
 8001f58:	2002      	movs	r0, #2
 8001f5a:	f002 fdb9 	bl	8004ad0 <ssd1306_SetCursor>
				ssd1306_WriteString(str, Font_16x26, White);
 8001f5e:	4a77      	ldr	r2, [pc, #476]	; (800213c <menu_update+0x2b8>)
 8001f60:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f64:	2301      	movs	r3, #1
 8001f66:	ca06      	ldmia	r2, {r1, r2}
 8001f68:	f002 fd8c 	bl	8004a84 <ssd1306_WriteString>
				ssd1306_SetCursor(2, 45);
 8001f6c:	212d      	movs	r1, #45	; 0x2d
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f002 fdae 	bl	8004ad0 <ssd1306_SetCursor>
				if (batteryMsg.bms_type == BMS_SMART) {
 8001f74:	4b75      	ldr	r3, [pc, #468]	; (800214c <menu_update+0x2c8>)
 8001f76:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d106      	bne.n	8001f8c <menu_update+0x108>
					ssd1306_WriteString("SMART", Font_11x18, White);
 8001f7e:	4a78      	ldr	r2, [pc, #480]	; (8002160 <menu_update+0x2dc>)
 8001f80:	2301      	movs	r3, #1
 8001f82:	ca06      	ldmia	r2, {r1, r2}
 8001f84:	4877      	ldr	r0, [pc, #476]	; (8002164 <menu_update+0x2e0>)
 8001f86:	f002 fd7d 	bl	8004a84 <ssd1306_WriteString>
 8001f8a:	e005      	b.n	8001f98 <menu_update+0x114>
				} else {
					ssd1306_WriteString("JBD", Font_11x18, White);
 8001f8c:	4a74      	ldr	r2, [pc, #464]	; (8002160 <menu_update+0x2dc>)
 8001f8e:	2301      	movs	r3, #1
 8001f90:	ca06      	ldmia	r2, {r1, r2}
 8001f92:	4875      	ldr	r0, [pc, #468]	; (8002168 <menu_update+0x2e4>)
 8001f94:	f002 fd76 	bl	8004a84 <ssd1306_WriteString>
				}
				char str_volt[12];
				//snprintf(str_volt, sizeof str_volt, "%+6.*f", 2, batteryMsg.voltage);
				if (batteryMsg.bms_type == BMS_JBD)
 8001f98:	4b6c      	ldr	r3, [pc, #432]	; (800214c <menu_update+0x2c8>)
 8001f9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d112      	bne.n	8001fc8 <menu_update+0x144>
				{
					f_volt = batteryMsg.voltage/100.0;
 8001fa2:	4b6a      	ldr	r3, [pc, #424]	; (800214c <menu_update+0x2c8>)
 8001fa4:	889b      	ldrh	r3, [r3, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fa24 	bl	80003f4 <__aeabi_i2d>
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b6e      	ldr	r3, [pc, #440]	; (800216c <menu_update+0x2e8>)
 8001fb2:	f7fe fbb3 	bl	800071c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4610      	mov	r0, r2
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fd65 	bl	8000a8c <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	667b      	str	r3, [r7, #100]	; 0x64
 8001fc6:	e011      	b.n	8001fec <menu_update+0x168>
				}
				else
				{
					f_volt = batteryMsg.voltage/10.0;
 8001fc8:	4b60      	ldr	r3, [pc, #384]	; (800214c <menu_update+0x2c8>)
 8001fca:	889b      	ldrh	r3, [r3, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fa11 	bl	80003f4 <__aeabi_i2d>
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <menu_update+0x2ec>)
 8001fd8:	f7fe fba0 	bl	800071c <__aeabi_ddiv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fd52 	bl	8000a8c <__aeabi_d2f>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
				}
				snprintf(str_volt, sizeof str_volt, "%2.2fV", f_volt);
 8001fec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001fee:	f7fe fa13 	bl	8000418 <__aeabi_f2d>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	f107 001c 	add.w	r0, r7, #28
 8001ffa:	e9cd 2300 	strd	r2, r3, [sp]
 8001ffe:	4a5d      	ldr	r2, [pc, #372]	; (8002174 <menu_update+0x2f0>)
 8002000:	210c      	movs	r1, #12
 8002002:	f002 fb1d 	bl	8004640 <snprintf_>
				//sprintf(str_volt, "%.2f V", (float)batteryMsg.voltage/100.0);
				ssd1306_SetCursor(63, 45);
 8002006:	212d      	movs	r1, #45	; 0x2d
 8002008:	203f      	movs	r0, #63	; 0x3f
 800200a:	f002 fd61 	bl	8004ad0 <ssd1306_SetCursor>
				ssd1306_WriteString(str_volt, Font_11x18, White);
 800200e:	4a54      	ldr	r2, [pc, #336]	; (8002160 <menu_update+0x2dc>)
 8002010:	f107 001c 	add.w	r0, r7, #28
 8002014:	2301      	movs	r3, #1
 8002016:	ca06      	ldmia	r2, {r1, r2}
 8002018:	f002 fd34 	bl	8004a84 <ssd1306_WriteString>
 800201c:	e1ef      	b.n	80023fe <menu_update+0x57a>
			}
			else if (screen_bms < 3)
 800201e:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <menu_update+0x2d0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b02      	cmp	r3, #2
 8002024:	dc76      	bgt.n	8002114 <menu_update+0x290>
			{
				int cell_num = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	663b      	str	r3, [r7, #96]	; 0x60
				if (screen_bms == 2)
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <menu_update+0x2d0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d103      	bne.n	800203a <menu_update+0x1b6>
				{
					p_cell = &batteryMsg.cell_8;
 8002032:	4b51      	ldr	r3, [pc, #324]	; (8002178 <menu_update+0x2f4>)
 8002034:	66bb      	str	r3, [r7, #104]	; 0x68
					cell_num = 8;
 8002036:	2308      	movs	r3, #8
 8002038:	663b      	str	r3, [r7, #96]	; 0x60
				}
				for (int i=0; i<8; i++)
 800203a:	2300      	movs	r3, #0
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800203e:	e065      	b.n	800210c <menu_update+0x288>
				{
					if (i==4)
 8002040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002042:	2b04      	cmp	r3, #4
 8002044:	d101      	bne.n	800204a <menu_update+0x1c6>
					{
						x_coord = 65;
 8002046:	2341      	movs	r3, #65	; 0x41
 8002048:	673b      	str	r3, [r7, #112]	; 0x70

					}
					if (i < 4)
 800204a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204c:	2b03      	cmp	r3, #3
 800204e:	dc07      	bgt.n	8002060 <menu_update+0x1dc>
					{
						y_coord = 16+12*i;
 8002050:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	3310      	adds	r3, #16
 800205c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800205e:	e007      	b.n	8002070 <menu_update+0x1ec>
					}
					else
					{
						y_coord = 16+12*(i-4);
 8002060:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002062:	1f1a      	subs	r2, r3, #4
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	3310      	adds	r3, #16
 800206e:	66fb      	str	r3, [r7, #108]	; 0x6c
					}
					ssd1306_SetCursor(x_coord, y_coord);
 8002070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002072:	b2db      	uxtb	r3, r3
 8002074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fd28 	bl	8004ad0 <ssd1306_SetCursor>
					if (i > 0 && cell_num > 0)
 8002080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd1c      	ble.n	80020c0 <menu_update+0x23c>
 8002086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002088:	2b00      	cmp	r3, #0
 800208a:	dd19      	ble.n	80020c0 <menu_update+0x23c>
					{
						snprintf(volt, sizeof volt, "%d %.3f", (i+1+cell_num), *p_cell/1000.0);
 800208c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002092:	18d4      	adds	r4, r2, r3
 8002094:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f9ab 	bl	80003f4 <__aeabi_i2d>
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <menu_update+0x2f8>)
 80020a4:	f7fe fb3a 	bl	800071c <__aeabi_ddiv>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020b0:	e9cd 2300 	strd	r2, r3, [sp]
 80020b4:	4623      	mov	r3, r4
 80020b6:	4a32      	ldr	r2, [pc, #200]	; (8002180 <menu_update+0x2fc>)
 80020b8:	210f      	movs	r1, #15
 80020ba:	f002 fac1 	bl	8004640 <snprintf_>
 80020be:	e018      	b.n	80020f2 <menu_update+0x26e>
					}
					else
					{

						snprintf(volt, sizeof volt, "%d  %.3f", (i+1+cell_num), *p_cell/1000.0);
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c6:	18d4      	adds	r4, r2, r3
 80020c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe f991 	bl	80003f4 <__aeabi_i2d>
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <menu_update+0x2f8>)
 80020d8:	f7fe fb20 	bl	800071c <__aeabi_ddiv>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020e4:	e9cd 2300 	strd	r2, r3, [sp]
 80020e8:	4623      	mov	r3, r4
 80020ea:	4a26      	ldr	r2, [pc, #152]	; (8002184 <menu_update+0x300>)
 80020ec:	210f      	movs	r1, #15
 80020ee:	f002 faa7 	bl	8004640 <snprintf_>
					}
					ssd1306_WriteString(volt, Font_6x8, White);
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <menu_update+0x304>)
 80020f4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80020f8:	2301      	movs	r3, #1
 80020fa:	ca06      	ldmia	r2, {r1, r2}
 80020fc:	f002 fcc2 	bl	8004a84 <ssd1306_WriteString>
					p_cell++;
 8002100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002102:	3302      	adds	r3, #2
 8002104:	66bb      	str	r3, [r7, #104]	; 0x68
				for (int i=0; i<8; i++)
 8002106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002108:	3301      	adds	r3, #1
 800210a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800210c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210e:	2b07      	cmp	r3, #7
 8002110:	dd96      	ble.n	8002040 <menu_update+0x1bc>
 8002112:	e174      	b.n	80023fe <menu_update+0x57a>
				}
			}
			else
			{
				p_cell = &batteryMsg.cell_0;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <menu_update+0x2cc>)
 8002116:	66bb      	str	r3, [r7, #104]	; 0x68
				uint16_t min_volt = *p_cell;
 8002118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				uint16_t max_volt = *p_cell;
 8002120:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				for (int i=1; i<16;i++)
 8002128:	2301      	movs	r3, #1
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
 800212c:	e04c      	b.n	80021c8 <menu_update+0x344>
 800212e:	bf00      	nop
 8002130:	20000300 	.word	0x20000300
 8002134:	200001c8 	.word	0x200001c8
 8002138:	08008670 	.word	0x08008670
 800213c:	2000003c 	.word	0x2000003c
 8002140:	2000002c 	.word	0x2000002c
 8002144:	08008674 	.word	0x08008674
 8002148:	08008684 	.word	0x08008684
 800214c:	20000304 	.word	0x20000304
 8002150:	20000330 	.word	0x20000330
 8002154:	200002a8 	.word	0x200002a8
 8002158:	200002a0 	.word	0x200002a0
 800215c:	08008690 	.word	0x08008690
 8002160:	20000034 	.word	0x20000034
 8002164:	08008698 	.word	0x08008698
 8002168:	080086a0 	.word	0x080086a0
 800216c:	40590000 	.word	0x40590000
 8002170:	40240000 	.word	0x40240000
 8002174:	080086a4 	.word	0x080086a4
 8002178:	20000340 	.word	0x20000340
 800217c:	408f4000 	.word	0x408f4000
 8002180:	080086ac 	.word	0x080086ac
 8002184:	080086b4 	.word	0x080086b4
 8002188:	20000024 	.word	0x20000024
				{
					uint16_t t_cell = *p_cell;
 800218c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					if (t_cell < min_volt)
 8002194:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002198:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800219c:	429a      	cmp	r2, r3
 800219e:	d203      	bcs.n	80021a8 <menu_update+0x324>
					{
						min_volt = t_cell;
 80021a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021a4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					}
					if (max_volt < t_cell)
 80021a8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80021ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d203      	bcs.n	80021bc <menu_update+0x338>
					{
						max_volt = t_cell;
 80021b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021b8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
					}
					p_cell++;
 80021bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021be:	3302      	adds	r3, #2
 80021c0:	66bb      	str	r3, [r7, #104]	; 0x68
				for (int i=1; i<16;i++)
 80021c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c4:	3301      	adds	r3, #1
 80021c6:	657b      	str	r3, [r7, #84]	; 0x54
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	ddde      	ble.n	800218c <menu_update+0x308>
				}
				ssd1306_SetCursor(2, 15);
 80021ce:	210f      	movs	r1, #15
 80021d0:	2002      	movs	r0, #2
 80021d2:	f002 fc7d 	bl	8004ad0 <ssd1306_SetCursor>
				snprintf(volt, sizeof volt, "Min: %.3f", min_volt/1000.0);
 80021d6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f90a 	bl	80003f4 <__aeabi_i2d>
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b99      	ldr	r3, [pc, #612]	; (800244c <menu_update+0x5c8>)
 80021e6:	f7fe fa99 	bl	800071c <__aeabi_ddiv>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80021f2:	e9cd 2300 	strd	r2, r3, [sp]
 80021f6:	4a96      	ldr	r2, [pc, #600]	; (8002450 <menu_update+0x5cc>)
 80021f8:	210f      	movs	r1, #15
 80021fa:	f002 fa21 	bl	8004640 <snprintf_>
				ssd1306_WriteString(volt, Font_11x18, White);
 80021fe:	4a95      	ldr	r2, [pc, #596]	; (8002454 <menu_update+0x5d0>)
 8002200:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002204:	2301      	movs	r3, #1
 8002206:	ca06      	ldmia	r2, {r1, r2}
 8002208:	f002 fc3c 	bl	8004a84 <ssd1306_WriteString>
				ssd1306_SetCursor(2, 34);
 800220c:	2122      	movs	r1, #34	; 0x22
 800220e:	2002      	movs	r0, #2
 8002210:	f002 fc5e 	bl	8004ad0 <ssd1306_SetCursor>
				snprintf(volt, sizeof volt, "Max: %.3f", max_volt/1000.0);
 8002214:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f8eb 	bl	80003f4 <__aeabi_i2d>
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b8a      	ldr	r3, [pc, #552]	; (800244c <menu_update+0x5c8>)
 8002224:	f7fe fa7a 	bl	800071c <__aeabi_ddiv>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002230:	e9cd 2300 	strd	r2, r3, [sp]
 8002234:	4a88      	ldr	r2, [pc, #544]	; (8002458 <menu_update+0x5d4>)
 8002236:	210f      	movs	r1, #15
 8002238:	f002 fa02 	bl	8004640 <snprintf_>
				ssd1306_WriteString(volt, Font_11x18, White);
 800223c:	4a85      	ldr	r2, [pc, #532]	; (8002454 <menu_update+0x5d0>)
 800223e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002242:	2301      	movs	r3, #1
 8002244:	ca06      	ldmia	r2, {r1, r2}
 8002246:	f002 fc1d 	bl	8004a84 <ssd1306_WriteString>
				ssd1306_SetCursor(2, 54);
 800224a:	2136      	movs	r1, #54	; 0x36
 800224c:	2002      	movs	r0, #2
 800224e:	f002 fc3f 	bl	8004ad0 <ssd1306_SetCursor>
				snprintf(volt, sizeof volt, "Diff:   %.3f", (max_volt - min_volt)/1000.0);
 8002252:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002256:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f8c9 	bl	80003f4 <__aeabi_i2d>
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b79      	ldr	r3, [pc, #484]	; (800244c <menu_update+0x5c8>)
 8002268:	f7fe fa58 	bl	800071c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002274:	e9cd 2300 	strd	r2, r3, [sp]
 8002278:	4a78      	ldr	r2, [pc, #480]	; (800245c <menu_update+0x5d8>)
 800227a:	210f      	movs	r1, #15
 800227c:	f002 f9e0 	bl	8004640 <snprintf_>
				ssd1306_WriteString(volt, Font_7x10, White);
 8002280:	4a77      	ldr	r2, [pc, #476]	; (8002460 <menu_update+0x5dc>)
 8002282:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002286:	2301      	movs	r3, #1
 8002288:	ca06      	ldmia	r2, {r1, r2}
 800228a:	f002 fbfb 	bl	8004a84 <ssd1306_WriteString>
 800228e:	e0b6      	b.n	80023fe <menu_update+0x57a>
			}
		}
		else if (check_bms_i == 0) {
 8002290:	4b74      	ldr	r3, [pc, #464]	; (8002464 <menu_update+0x5e0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <menu_update+0x42a>
			ssd1306_SetCursor(2, 53);
 8002298:	2135      	movs	r1, #53	; 0x35
 800229a:	2002      	movs	r0, #2
 800229c:	f002 fc18 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("Test", Font_7x10, White);
 80022a0:	4a6f      	ldr	r2, [pc, #444]	; (8002460 <menu_update+0x5dc>)
 80022a2:	2301      	movs	r3, #1
 80022a4:	ca06      	ldmia	r2, {r1, r2}
 80022a6:	4870      	ldr	r0, [pc, #448]	; (8002468 <menu_update+0x5e4>)
 80022a8:	f002 fbec 	bl	8004a84 <ssd1306_WriteString>
 80022ac:	e0a7      	b.n	80023fe <menu_update+0x57a>
		}
		else if (check_bms_i == 1) {
 80022ae:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <menu_update+0x5e0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d10a      	bne.n	80022cc <menu_update+0x448>
			ssd1306_SetCursor(2, 53);
 80022b6:	2135      	movs	r1, #53	; 0x35
 80022b8:	2002      	movs	r0, #2
 80022ba:	f002 fc09 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("Test JBD", Font_7x10, White);
 80022be:	4a68      	ldr	r2, [pc, #416]	; (8002460 <menu_update+0x5dc>)
 80022c0:	2301      	movs	r3, #1
 80022c2:	ca06      	ldmia	r2, {r1, r2}
 80022c4:	4869      	ldr	r0, [pc, #420]	; (800246c <menu_update+0x5e8>)
 80022c6:	f002 fbdd 	bl	8004a84 <ssd1306_WriteString>
 80022ca:	e098      	b.n	80023fe <menu_update+0x57a>
		}
		else if (check_bms_i == 2) {
 80022cc:	4b65      	ldr	r3, [pc, #404]	; (8002464 <menu_update+0x5e0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d10a      	bne.n	80022ea <menu_update+0x466>
			ssd1306_SetCursor(2, 53);
 80022d4:	2135      	movs	r1, #53	; 0x35
 80022d6:	2002      	movs	r0, #2
 80022d8:	f002 fbfa 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("Test SMART", Font_7x10, White);
 80022dc:	4a60      	ldr	r2, [pc, #384]	; (8002460 <menu_update+0x5dc>)
 80022de:	2301      	movs	r3, #1
 80022e0:	ca06      	ldmia	r2, {r1, r2}
 80022e2:	4863      	ldr	r0, [pc, #396]	; (8002470 <menu_update+0x5ec>)
 80022e4:	f002 fbce 	bl	8004a84 <ssd1306_WriteString>
 80022e8:	e089      	b.n	80023fe <menu_update+0x57a>
		}
		else if (check_bms_i > 2) {
 80022ea:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <menu_update+0x5e0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	f340 8085 	ble.w	80023fe <menu_update+0x57a>
			ssd1306_SetCursor(2, 53);
 80022f4:	2135      	movs	r1, #53	; 0x35
 80022f6:	2002      	movs	r0, #2
 80022f8:	f002 fbea 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("ERROR", Font_7x10, White);
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <menu_update+0x5dc>)
 80022fe:	2301      	movs	r3, #1
 8002300:	ca06      	ldmia	r2, {r1, r2}
 8002302:	485c      	ldr	r0, [pc, #368]	; (8002474 <menu_update+0x5f0>)
 8002304:	f002 fbbe 	bl	8004a84 <ssd1306_WriteString>
 8002308:	e079      	b.n	80023fe <menu_update+0x57a>
		}
	}
	else if (curr_menu == MENU_DRIVER)
 800230a:	4b5b      	ldr	r3, [pc, #364]	; (8002478 <menu_update+0x5f4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d175      	bne.n	80023fe <menu_update+0x57a>
	{
		static uint8_t a = 0;
		ssd1306_Fill(Black);
 8002312:	2000      	movs	r0, #0
 8002314:	f002 fa82 	bl	800481c <ssd1306_Fill>
		if (a)
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <menu_update+0x5f8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <menu_update+0x4a4>
		{
			color3 = White;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8002326:	e002      	b.n	800232e <menu_update+0x4aa>
		}
		else
		{
			color3 = Black;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		}
		if (!start_stop)
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <menu_update+0x5fc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d117      	bne.n	8002366 <menu_update+0x4e2>
		{
			ssd1306_SetCursor(2, 42);
 8002336:	212a      	movs	r1, #42	; 0x2a
 8002338:	2002      	movs	r0, #2
 800233a:	f002 fbc9 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("OK - start/stop", Font_7x10, White);
 800233e:	4a48      	ldr	r2, [pc, #288]	; (8002460 <menu_update+0x5dc>)
 8002340:	2301      	movs	r3, #1
 8002342:	ca06      	ldmia	r2, {r1, r2}
 8002344:	484f      	ldr	r0, [pc, #316]	; (8002484 <menu_update+0x600>)
 8002346:	f002 fb9d 	bl	8004a84 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 800234a:	2135      	movs	r1, #53	; 0x35
 800234c:	2002      	movs	r0, #2
 800234e:	f002 fbbf 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString("up/down - speed", Font_7x10, White);
 8002352:	4a43      	ldr	r2, [pc, #268]	; (8002460 <menu_update+0x5dc>)
 8002354:	2301      	movs	r3, #1
 8002356:	ca06      	ldmia	r2, {r1, r2}
 8002358:	484b      	ldr	r0, [pc, #300]	; (8002488 <menu_update+0x604>)
 800235a:	f002 fb93 	bl	8004a84 <ssd1306_WriteString>
			a = 0;
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <menu_update+0x5f8>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e04b      	b.n	80023fe <menu_update+0x57a>
		}
		else
		{
			static uint32_t blink_t = 0;
			char str_act[10] = "Activated!";
 8002366:	4a49      	ldr	r2, [pc, #292]	; (800248c <menu_update+0x608>)
 8002368:	f107 0310 	add.w	r3, r7, #16
 800236c:	ca07      	ldmia	r2, {r0, r1, r2}
 800236e:	c303      	stmia	r3!, {r0, r1}
 8002370:	801a      	strh	r2, [r3, #0]
			uint32_t ms = HAL_GetTick();
 8002372:	f002 fc75 	bl	8004c60 <HAL_GetTick>
 8002376:	6538      	str	r0, [r7, #80]	; 0x50
			char str [12];
			snprintf(str, sizeof str, "%d", (int)motor_speed/20);
 8002378:	4b45      	ldr	r3, [pc, #276]	; (8002490 <menu_update+0x60c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a45      	ldr	r2, [pc, #276]	; (8002494 <menu_update+0x610>)
 800237e:	fb82 1203 	smull	r1, r2, r2, r3
 8002382:	10d2      	asrs	r2, r2, #3
 8002384:	17db      	asrs	r3, r3, #31
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	1d38      	adds	r0, r7, #4
 800238a:	4a43      	ldr	r2, [pc, #268]	; (8002498 <menu_update+0x614>)
 800238c:	210c      	movs	r1, #12
 800238e:	f002 f957 	bl	8004640 <snprintf_>
			ssd1306_SetCursor(2, 18);
 8002392:	2112      	movs	r1, #18
 8002394:	2002      	movs	r0, #2
 8002396:	f002 fb9b 	bl	8004ad0 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_16x26, White);
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <menu_update+0x618>)
 800239c:	1d38      	adds	r0, r7, #4
 800239e:	2301      	movs	r3, #1
 80023a0:	ca06      	ldmia	r2, {r1, r2}
 80023a2:	f002 fb6f 	bl	8004a84 <ssd1306_WriteString>
			ssd1306_SetCursor(2, 45);
 80023a6:	212d      	movs	r1, #45	; 0x2d
 80023a8:	2002      	movs	r0, #2
 80023aa:	f002 fb91 	bl	8004ad0 <ssd1306_SetCursor>
			if (a)
 80023ae:	4b33      	ldr	r3, [pc, #204]	; (800247c <menu_update+0x5f8>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <menu_update+0x542>
			{
				ssd1306_WriteString(str_act, Font_11x18, White);
 80023b6:	4a27      	ldr	r2, [pc, #156]	; (8002454 <menu_update+0x5d0>)
 80023b8:	f107 0010 	add.w	r0, r7, #16
 80023bc:	2301      	movs	r3, #1
 80023be:	ca06      	ldmia	r2, {r1, r2}
 80023c0:	f002 fb60 	bl	8004a84 <ssd1306_WriteString>
 80023c4:	e006      	b.n	80023d4 <menu_update+0x550>
			}
			else
			{
				ssd1306_WriteString(str_act, Font_11x18, Black);
 80023c6:	4a23      	ldr	r2, [pc, #140]	; (8002454 <menu_update+0x5d0>)
 80023c8:	f107 0010 	add.w	r0, r7, #16
 80023cc:	2300      	movs	r3, #0
 80023ce:	ca06      	ldmia	r2, {r1, r2}
 80023d0:	f002 fb58 	bl	8004a84 <ssd1306_WriteString>
			}
			if (ms - blink_t > 100)
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <menu_update+0x61c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	; 0x64
 80023de:	d90e      	bls.n	80023fe <menu_update+0x57a>
			{
				a = !a;
 80023e0:	4b26      	ldr	r3, [pc, #152]	; (800247c <menu_update+0x5f8>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <menu_update+0x5f8>)
 80023f2:	701a      	strb	r2, [r3, #0]
				blink_t = HAL_GetTick();
 80023f4:	f002 fc34 	bl	8004c60 <HAL_GetTick>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <menu_update+0x61c>)
 80023fc:	6013      	str	r3, [r2, #0]
			}
		}
	}
	ssd1306_SetCursor(2, 1);
 80023fe:	2101      	movs	r1, #1
 8002400:	2002      	movs	r0, #2
 8002402:	f002 fb65 	bl	8004ad0 <ssd1306_SetCursor>
	ssd1306_WriteString("Encoder", Font_7x10, color1);
 8002406:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <menu_update+0x5dc>)
 800240c:	ca06      	ldmia	r2, {r1, r2}
 800240e:	4825      	ldr	r0, [pc, #148]	; (80024a4 <menu_update+0x620>)
 8002410:	f002 fb38 	bl	8004a84 <ssd1306_WriteString>
	ssd1306_SetCursor(55, 1);
 8002414:	2101      	movs	r1, #1
 8002416:	2037      	movs	r0, #55	; 0x37
 8002418:	f002 fb5a 	bl	8004ad0 <ssd1306_SetCursor>
	ssd1306_WriteString("BMS", Font_7x10, color2);
 800241c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8002420:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <menu_update+0x5dc>)
 8002422:	ca06      	ldmia	r2, {r1, r2}
 8002424:	4820      	ldr	r0, [pc, #128]	; (80024a8 <menu_update+0x624>)
 8002426:	f002 fb2d 	bl	8004a84 <ssd1306_WriteString>
	ssd1306_SetCursor(80, 1);
 800242a:	2101      	movs	r1, #1
 800242c:	2050      	movs	r0, #80	; 0x50
 800242e:	f002 fb4f 	bl	8004ad0 <ssd1306_SetCursor>
	ssd1306_WriteString("Driver", Font_7x10, color3);
 8002432:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <menu_update+0x5dc>)
 8002438:	ca06      	ldmia	r2, {r1, r2}
 800243a:	481c      	ldr	r0, [pc, #112]	; (80024ac <menu_update+0x628>)
 800243c:	f002 fb22 	bl	8004a84 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002440:	f002 fa0e 	bl	8004860 <ssd1306_UpdateScreen>
}
 8002444:	bf00      	nop
 8002446:	377c      	adds	r7, #124	; 0x7c
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}
 800244c:	408f4000 	.word	0x408f4000
 8002450:	080086c0 	.word	0x080086c0
 8002454:	20000034 	.word	0x20000034
 8002458:	080086cc 	.word	0x080086cc
 800245c:	080086d8 	.word	0x080086d8
 8002460:	2000002c 	.word	0x2000002c
 8002464:	200002a4 	.word	0x200002a4
 8002468:	080086e8 	.word	0x080086e8
 800246c:	080086f0 	.word	0x080086f0
 8002470:	080086fc 	.word	0x080086fc
 8002474:	08008708 	.word	0x08008708
 8002478:	20000300 	.word	0x20000300
 800247c:	20000390 	.word	0x20000390
 8002480:	200002ac 	.word	0x200002ac
 8002484:	08008710 	.word	0x08008710
 8002488:	08008720 	.word	0x08008720
 800248c:	08008744 	.word	0x08008744
 8002490:	200002b0 	.word	0x200002b0
 8002494:	66666667 	.word	0x66666667
 8002498:	08008670 	.word	0x08008670
 800249c:	2000003c 	.word	0x2000003c
 80024a0:	20000394 	.word	0x20000394
 80024a4:	08008730 	.word	0x08008730
 80024a8:	08008738 	.word	0x08008738
 80024ac:	0800873c 	.word	0x0800873c

080024b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b4:	f002 fb7c 	bl	8004bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b8:	f000 f878 	bl	80025ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024bc:	f000 f9f8 	bl	80028b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c0:	f000 f9d8 	bl	8002874 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024c4:	f000 f9ac 	bl	8002820 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80024c8:	f000 f956 	bl	8002778 <MX_TIM4_Init>
  MX_SPI1_Init();
 80024cc:	f000 f91c 	bl	8002708 <MX_SPI1_Init>
  MX_CAN_Init();
 80024d0:	f000 f8b2 	bl	8002638 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 80024d4:	2264      	movs	r2, #100	; 0x64
 80024d6:	492a      	ldr	r1, [pc, #168]	; (8002580 <main+0xd0>)
 80024d8:	482a      	ldr	r0, [pc, #168]	; (8002584 <main+0xd4>)
 80024da:	f005 f924 	bl	8007726 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80024de:	4b2a      	ldr	r3, [pc, #168]	; (8002588 <main+0xd8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <main+0xd8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0204 	bic.w	r2, r2, #4
 80024ec:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80024ee:	213c      	movs	r1, #60	; 0x3c
 80024f0:	4826      	ldr	r0, [pc, #152]	; (800258c <main+0xdc>)
 80024f2:	f004 fed3 	bl	800729c <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 80024f6:	f002 f927 	bl	8004748 <ssd1306_Init>
  buttons_Init();
 80024fa:	f7ff fb15 	bl	8001b28 <buttons_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(18, 2);
 80024fe:	2102      	movs	r1, #2
 8002500:	2012      	movs	r0, #18
 8002502:	f002 fae5 	bl	8004ad0 <ssd1306_SetCursor>
  ssd1306_Fill(White);
 8002506:	2001      	movs	r0, #1
 8002508:	f002 f988 	bl	800481c <ssd1306_Fill>
  ssd1306_WriteString("Universal", Font_11x18, Black);
 800250c:	4a20      	ldr	r2, [pc, #128]	; (8002590 <main+0xe0>)
 800250e:	2300      	movs	r3, #0
 8002510:	ca06      	ldmia	r2, {r1, r2}
 8002512:	4820      	ldr	r0, [pc, #128]	; (8002594 <main+0xe4>)
 8002514:	f002 fab6 	bl	8004a84 <ssd1306_WriteString>
  ssd1306_SetCursor(18, 25);
 8002518:	2119      	movs	r1, #25
 800251a:	2012      	movs	r0, #18
 800251c:	f002 fad8 	bl	8004ad0 <ssd1306_SetCursor>
  ssd1306_WriteString("Tester", Font_16x24, Black);
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <main+0xe8>)
 8002522:	2300      	movs	r3, #0
 8002524:	ca06      	ldmia	r2, {r1, r2}
 8002526:	481d      	ldr	r0, [pc, #116]	; (800259c <main+0xec>)
 8002528:	f002 faac 	bl	8004a84 <ssd1306_WriteString>
  ssd1306_SetCursor(16, 56);
 800252c:	2138      	movs	r1, #56	; 0x38
 800252e:	2010      	movs	r0, #16
 8002530:	f002 face 	bl	8004ad0 <ssd1306_SetCursor>
  ssd1306_WriteString("@Skynet 2024 v.1.0", Font_6x8, Black);
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <main+0xf0>)
 8002536:	2300      	movs	r3, #0
 8002538:	ca06      	ldmia	r2, {r1, r2}
 800253a:	481a      	ldr	r0, [pc, #104]	; (80025a4 <main+0xf4>)
 800253c:	f002 faa2 	bl	8004a84 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002540:	f002 f98e 	bl	8004860 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 8002544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002548:	f002 fb94 	bl	8004c74 <HAL_Delay>
  while (1)
  {
	  getButton();
 800254c:	f7ff fb12 	bl	8001b74 <getButton>
	  if(curr_menu == MENU_ENC)
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <main+0xf8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <main+0xae>
	  {
		  getEncoder();
 8002558:	f7ff facc 	bl	8001af4 <getEncoder>
 800255c:	e00c      	b.n	8002578 <main+0xc8>
	  }
	  else if (curr_menu == MENU_BMS)
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <main+0xf8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <main+0xbc>
	  {
		  read_bms_uart();
 8002566:	f7fe fe73 	bl	8001250 <read_bms_uart>
 800256a:	e005      	b.n	8002578 <main+0xc8>
	  }
	  else if (curr_menu == MENU_DRIVER)
 800256c:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <main+0xf8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d101      	bne.n	8002578 <main+0xc8>
	  {
		  Moving();
 8002574:	f7fe fd96 	bl	80010a4 <Moving>
	  }
	  menu_update();
 8002578:	f7ff fc84 	bl	8001e84 <menu_update>
	  getButton();
 800257c:	e7e6      	b.n	800254c <main+0x9c>
 800257e:	bf00      	nop
 8002580:	200001cc 	.word	0x200001cc
 8002584:	20000138 	.word	0x20000138
 8002588:	20000180 	.word	0x20000180
 800258c:	200000f0 	.word	0x200000f0
 8002590:	20000034 	.word	0x20000034
 8002594:	08008750 	.word	0x08008750
 8002598:	20000044 	.word	0x20000044
 800259c:	0800875c 	.word	0x0800875c
 80025a0:	20000024 	.word	0x20000024
 80025a4:	08008764 	.word	0x08008764
 80025a8:	20000300 	.word	0x20000300

080025ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b090      	sub	sp, #64	; 0x40
 80025b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b2:	f107 0318 	add.w	r3, r7, #24
 80025b6:	2228      	movs	r2, #40	; 0x28
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f006 f842 	bl	8008644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025d8:	2300      	movs	r3, #0
 80025da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025dc:	2301      	movs	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e0:	2302      	movs	r3, #2
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025f0:	f107 0318 	add.w	r3, r7, #24
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 ff31 	bl	800645c <HAL_RCC_OscConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002600:	f000 f9e4 	bl	80029cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002604:	230f      	movs	r3, #15
 8002606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002608:	2302      	movs	r3, #2
 800260a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f004 f99e 	bl	8006960 <HAL_RCC_ClockConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800262a:	f000 f9cf 	bl	80029cc <Error_Handler>
  }
}
 800262e:	bf00      	nop
 8002630:	3740      	adds	r7, #64	; 0x40
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <MX_CAN_Init+0xc8>)
 8002640:	4a30      	ldr	r2, [pc, #192]	; (8002704 <MX_CAN_Init+0xcc>)
 8002642:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8002644:	4b2e      	ldr	r3, [pc, #184]	; (8002700 <MX_CAN_Init+0xc8>)
 8002646:	2204      	movs	r2, #4
 8002648:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <MX_CAN_Init+0xc8>)
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002650:	4b2b      	ldr	r3, [pc, #172]	; (8002700 <MX_CAN_Init+0xc8>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <MX_CAN_Init+0xc8>)
 8002658:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800265c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <MX_CAN_Init+0xc8>)
 8002660:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002664:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <MX_CAN_Init+0xc8>)
 8002668:	2200      	movs	r2, #0
 800266a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <MX_CAN_Init+0xc8>)
 800266e:	2201      	movs	r2, #1
 8002670:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <MX_CAN_Init+0xc8>)
 8002674:	2200      	movs	r2, #0
 8002676:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <MX_CAN_Init+0xc8>)
 800267a:	2200      	movs	r2, #0
 800267c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <MX_CAN_Init+0xc8>)
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <MX_CAN_Init+0xc8>)
 8002686:	2201      	movs	r2, #1
 8002688:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800268a:	481d      	ldr	r0, [pc, #116]	; (8002700 <MX_CAN_Init+0xc8>)
 800268c:	f002 fb16 	bl	8004cbc <HAL_CAN_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002696:	f000 f999 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  sFilterConfig.FilterBank = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
      sFilterConfig.FilterIdHigh = 0x0000;
 80026a6:	2300      	movs	r3, #0
 80026a8:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterMaskIdHigh = 0x0000;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterActivation = ENABLE;
 80026ba:	2301      	movs	r3, #1
 80026bc:	623b      	str	r3, [r7, #32]
      //sFilterConfig.SlaveStartFilterBank = 14;

      if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	4619      	mov	r1, r3
 80026c2:	480f      	ldr	r0, [pc, #60]	; (8002700 <MX_CAN_Init+0xc8>)
 80026c4:	f002 fbf5 	bl	8004eb2 <HAL_CAN_ConfigFilter>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_CAN_Init+0x9a>
      {
      	Error_Handler();
 80026ce:	f000 f97d 	bl	80029cc <Error_Handler>
      }
      if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80026d2:	480b      	ldr	r0, [pc, #44]	; (8002700 <MX_CAN_Init+0xc8>)
 80026d4:	f002 fcb6 	bl	8005044 <HAL_CAN_Start>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_CAN_Init+0xaa>
    	Error_Handler();
 80026de:	f000 f975 	bl	80029cc <Error_Handler>
      }
      if (HAL_CAN_ActivateNotification(&hcan,
 80026e2:	f648 4102 	movw	r1, #35842	; 0x8c02
 80026e6:	4806      	ldr	r0, [pc, #24]	; (8002700 <MX_CAN_Init+0xc8>)
 80026e8:	f002 ff14 	bl	8005514 <HAL_CAN_ActivateNotification>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_CAN_Init+0xbe>
    		  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			  	  | CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
    	Error_Handler();
 80026f2:	f000 f96b 	bl	80029cc <Error_Handler>
      }
  /* USER CODE END CAN_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000070 	.word	0x20000070
 8002704:	40006400 	.word	0x40006400

08002708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <MX_SPI1_Init+0x68>)
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <MX_SPI1_Init+0x6c>)
 8002710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MX_SPI1_Init+0x68>)
 8002714:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <MX_SPI1_Init+0x68>)
 800271c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002720:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <MX_SPI1_Init+0x68>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_SPI1_Init+0x68>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_SPI1_Init+0x68>)
 8002730:	2200      	movs	r2, #0
 8002732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002734:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_SPI1_Init+0x68>)
 8002736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_SPI1_Init+0x68>)
 800273e:	2230      	movs	r2, #48	; 0x30
 8002740:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_SPI1_Init+0x68>)
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_SPI1_Init+0x68>)
 800274a:	2200      	movs	r2, #0
 800274c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_SPI1_Init+0x68>)
 8002750:	2200      	movs	r2, #0
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_SPI1_Init+0x68>)
 8002756:	220a      	movs	r2, #10
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_SPI1_Init+0x68>)
 800275c:	f004 fa8e 	bl	8006c7c <HAL_SPI_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002766:	f000 f931 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000098 	.word	0x20000098
 8002774:	40013000 	.word	0x40013000

08002778 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	; 0x30
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f005 ff5c 	bl	8008644 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <MX_TIM4_Init+0xa0>)
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <MX_TIM4_Init+0xa4>)
 8002798:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800279a:	4b1f      	ldr	r3, [pc, #124]	; (8002818 <MX_TIM4_Init+0xa0>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_TIM4_Init+0xa0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027a6:	4b1c      	ldr	r3, [pc, #112]	; (8002818 <MX_TIM4_Init+0xa0>)
 80027a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_TIM4_Init+0xa0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_TIM4_Init+0xa0>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027c2:	2301      	movs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027d2:	2301      	movs	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	4619      	mov	r1, r3
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <MX_TIM4_Init+0xa0>)
 80027e6:	f004 fcb7 	bl	8007158 <HAL_TIM_Encoder_Init>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80027f0:	f000 f8ec 	bl	80029cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_TIM4_Init+0xa0>)
 8002802:	f004 fe5f 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800280c:	f000 f8de 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	3730      	adds	r7, #48	; 0x30
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200000f0 	.word	0x200000f0
 800281c:	40000800 	.word	0x40000800

08002820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_USART1_UART_Init+0x50>)
 8002828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800282c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002846:	220c      	movs	r2, #12
 8002848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_USART1_UART_Init+0x4c>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002852:	2200      	movs	r2, #0
 8002854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART1_UART_Init+0x4c>)
 8002858:	f004 fe92 	bl	8007580 <HAL_UART_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002862:	f000 f8b3 	bl	80029cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000138 	.word	0x20000138
 8002870:	40013800 	.word	0x40013800

08002874 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <MX_DMA_Init+0x38>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4a0b      	ldr	r2, [pc, #44]	; (80028ac <MX_DMA_Init+0x38>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6153      	str	r3, [r2, #20]
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <MX_DMA_Init+0x38>)
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	200f      	movs	r0, #15
 8002898:	f003 f953 	bl	8005b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800289c:	200f      	movs	r0, #15
 800289e:	f003 f96c 	bl	8005b7a <HAL_NVIC_EnableIRQ>

}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028ca:	f043 0310 	orr.w	r3, r3, #16
 80028ce:	6193      	str	r3, [r2, #24]
 80028d0:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028dc:	4b37      	ldr	r3, [pc, #220]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a36      	ldr	r2, [pc, #216]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028e2:	f043 0320 	orr.w	r3, r3, #32
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b34      	ldr	r3, [pc, #208]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b31      	ldr	r3, [pc, #196]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a30      	ldr	r2, [pc, #192]	; (80029bc <MX_GPIO_Init+0x10c>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <MX_GPIO_Init+0x10c>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <MX_GPIO_Init+0x10c>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <MX_GPIO_Init+0x10c>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b28      	ldr	r3, [pc, #160]	; (80029bc <MX_GPIO_Init+0x10c>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292a:	4825      	ldr	r0, [pc, #148]	; (80029c0 <MX_GPIO_Init+0x110>)
 800292c:	f003 fd7d 	bl	800642a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2140      	movs	r1, #64	; 0x40
 8002934:	4823      	ldr	r0, [pc, #140]	; (80029c4 <MX_GPIO_Init+0x114>)
 8002936:	f003 fd78 	bl	800642a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 800293a:	2200      	movs	r2, #0
 800293c:	2103      	movs	r1, #3
 800293e:	4822      	ldr	r0, [pc, #136]	; (80029c8 <MX_GPIO_Init+0x118>)
 8002940:	f003 fd73 	bl	800642a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RE_DE_Pin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8002944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294a:	2301      	movs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2302      	movs	r3, #2
 8002954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	4818      	ldr	r0, [pc, #96]	; (80029c0 <MX_GPIO_Init+0x110>)
 800295e:	f003 fbc9 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002966:	2301      	movs	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296e:	2302      	movs	r3, #2
 8002970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	4619      	mov	r1, r3
 8002978:	4812      	ldr	r0, [pc, #72]	; (80029c4 <MX_GPIO_Init+0x114>)
 800297a:	f003 fbbb 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 800297e:	2303      	movs	r3, #3
 8002980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002982:	2301      	movs	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298a:	2302      	movs	r3, #2
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <MX_GPIO_Init+0x118>)
 8002996:	f003 fbad 	bl	80060f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 800299a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800299e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <MX_GPIO_Init+0x118>)
 80029b0:	f003 fba0 	bl	80060f4 <HAL_GPIO_Init>

}
 80029b4:	bf00      	nop
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40011000 	.word	0x40011000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00

080029cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d0:	b672      	cpsid	i
}
 80029d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <Error_Handler+0x8>
	...

080029d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_MspInit+0x5c>)
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_MspInit+0x5c>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6193      	str	r3, [r2, #24]
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_MspInit+0x5c>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <HAL_MspInit+0x5c>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4a0e      	ldr	r2, [pc, #56]	; (8002a34 <HAL_MspInit+0x5c>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a00:	61d3      	str	r3, [r2, #28]
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <HAL_MspInit+0x5c>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_MspInit+0x60>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <HAL_MspInit+0x60>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010000 	.word	0x40010000

08002a3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	; 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_CAN_MspInit+0xd0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d153      	bne.n	8002b04 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a66:	61d3      	str	r3, [r2, #28]
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_CAN_MspInit+0xd4>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	481c      	ldr	r0, [pc, #112]	; (8002b14 <HAL_CAN_MspInit+0xd8>)
 8002aa2:	f003 fb27 	bl	80060f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4816      	ldr	r0, [pc, #88]	; (8002b14 <HAL_CAN_MspInit+0xd8>)
 8002abc:	f003 fb1a 	bl	80060f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <HAL_CAN_MspInit+0xdc>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_CAN_MspInit+0xdc>)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2014      	movs	r0, #20
 8002aea:	f003 f82a 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002aee:	2014      	movs	r0, #20
 8002af0:	f003 f843 	bl	8005b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	2016      	movs	r0, #22
 8002afa:	f003 f822 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002afe:	2016      	movs	r0, #22
 8002b00:	f003 f83b 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40006400 	.word	0x40006400
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40010000 	.word	0x40010000

08002b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_SPI_MspInit+0x70>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d123      	bne.n	8002b84 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a13      	ldr	r2, [pc, #76]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <HAL_SPI_MspInit+0x74>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b6c:	23a0      	movs	r3, #160	; 0xa0
 8002b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4805      	ldr	r0, [pc, #20]	; (8002b94 <HAL_SPI_MspInit+0x78>)
 8002b80:	f003 fab8 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013000 	.word	0x40013000
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010800 	.word	0x40010800

08002b98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	f107 0310 	add.w	r3, r7, #16
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <HAL_TIM_Encoder_MspInit+0x70>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d123      	bne.n	8002c00 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	61d3      	str	r3, [r2, #28]
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bd6:	f043 0308 	orr.w	r3, r3, #8
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_TIM_Encoder_MspInit+0x74>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002be8:	23c0      	movs	r3, #192	; 0xc0
 8002bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <HAL_TIM_Encoder_MspInit+0x78>)
 8002bfc:	f003 fa7a 	bl	80060f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c00:	bf00      	nop
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010c00 	.word	0x40010c00

08002c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	605a      	str	r2, [r3, #4]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <HAL_UART_MspInit+0xe8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d15f      	bne.n	8002cf4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c3e:	6193      	str	r3, [r2, #24]
 8002c40:	4b2f      	ldr	r3, [pc, #188]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c52:	f043 0304 	orr.w	r3, r3, #4
 8002c56:	6193      	str	r3, [r2, #24]
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <HAL_UART_MspInit+0xec>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	4619      	mov	r1, r3
 8002c78:	4822      	ldr	r0, [pc, #136]	; (8002d04 <HAL_UART_MspInit+0xf0>)
 8002c7a:	f003 fa3b 	bl	80060f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	4619      	mov	r1, r3
 8002c92:	481c      	ldr	r0, [pc, #112]	; (8002d04 <HAL_UART_MspInit+0xf0>)
 8002c94:	f003 fa2e 	bl	80060f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <HAL_UART_MspInit+0xf8>)
 8002c9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cca:	f002 ff71 	bl	8005bb0 <HAL_DMA_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002cd4:	f7ff fe7a 	bl	80029cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <HAL_UART_MspInit+0xf4>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2025      	movs	r0, #37	; 0x25
 8002cea:	f002 ff2a 	bl	8005b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cee:	2025      	movs	r0, #37	; 0x25
 8002cf0:	f002 ff43 	bl	8005b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cf4:	bf00      	nop
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40013800 	.word	0x40013800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40010800 	.word	0x40010800
 8002d08:	20000180 	.word	0x20000180
 8002d0c:	40020058 	.word	0x40020058

08002d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d14:	e7fe      	b.n	8002d14 <NMI_Handler+0x4>

08002d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1a:	e7fe      	b.n	8002d1a <HardFault_Handler+0x4>

08002d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d20:	e7fe      	b.n	8002d20 <MemManage_Handler+0x4>

08002d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d26:	e7fe      	b.n	8002d26 <BusFault_Handler+0x4>

08002d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <UsageFault_Handler+0x4>

08002d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d56:	f001 ff71 	bl	8004c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002d64:	4802      	ldr	r0, [pc, #8]	; (8002d70 <DMA1_Channel5_IRQHandler+0x10>)
 8002d66:	f003 f891 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000180 	.word	0x20000180

08002d74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002d7a:	f002 fbf0 	bl	800555e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000070 	.word	0x20000070

08002d88 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <CAN1_SCE_IRQHandler+0x10>)
 8002d8e:	f002 fbe6 	bl	800555e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000070 	.word	0x20000070

08002d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <USART1_IRQHandler+0x10>)
 8002da2:	f004 fd1d 	bl	80077e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000138 	.word	0x20000138

08002db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db4:	bf00      	nop
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr

08002dbc <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d204      	bcs.n	8002dde <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	701a      	strb	r2, [r3, #0]
  }
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	4603      	mov	r3, r0
 8002df6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e002      	b.n	8002e18 <_strnlen_s+0x16>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <_strnlen_s+0x28>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	1e5a      	subs	r2, r3, #1
 8002e24:	603a      	str	r2, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f3      	bne.n	8002e12 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2b2f      	cmp	r3, #47	; 0x2f
 8002e48:	d904      	bls.n	8002e54 <_is_digit+0x1a>
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b39      	cmp	r3, #57	; 0x39
 8002e4e:	d801      	bhi.n	8002e54 <_is_digit+0x1a>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <_is_digit+0x1c>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002e72:	e00e      	b.n	8002e92 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1c59      	adds	r1, r3, #1
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	4403      	add	r3, r0
 8002e8e:	3b30      	subs	r3, #48	; 0x30
 8002e90:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ffce 	bl	8002e3a <_is_digit>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e7      	bne.n	8002e74 <_atoi+0xe>
  }
  return i;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002eae:	b590      	push	{r4, r7, lr}
 8002eb0:	b087      	sub	sp, #28
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d125      	bne.n	8002f16 <_out_rev+0x68>
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d120      	bne.n	8002f16 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	1c53      	adds	r3, r2, #1
 8002ede:	607b      	str	r3, [r7, #4]
 8002ee0:	68fc      	ldr	r4, [r7, #12]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	2020      	movs	r0, #32
 8002ee8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d3f0      	bcc.n	8002eda <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002ef8:	e00d      	b.n	8002f16 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	3b01      	subs	r3, #1
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	4413      	add	r3, r2
 8002f06:	7818      	ldrb	r0, [r3, #0]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	1c53      	adds	r3, r2, #1
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	68fc      	ldr	r4, [r7, #12]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	47a0      	blx	r4
  while (len) {
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ee      	bne.n	8002efa <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002f26:	e007      	b.n	8002f38 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	1c53      	adds	r3, r2, #1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	68fc      	ldr	r4, [r7, #12]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	2020      	movs	r0, #32
 8002f36:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d8f1      	bhi.n	8002f28 <_out_rev+0x7a>
    }
  }

  return idx;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	371c      	adds	r7, #28
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd90      	pop	{r4, r7, pc}

08002f4e <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af04      	add	r7, sp, #16
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d136      	bne.n	8002fd4 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d018      	beq.n	8002f9e <_ntoa_format+0x50>
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d013      	beq.n	8002f9e <_ntoa_format+0x50>
 8002f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <_ntoa_format+0x3a>
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <_ntoa_format+0x50>
      width--;
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f8e:	e006      	b.n	8002f9e <_ntoa_format+0x50>
      buf[len++] = '0';
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	2230      	movs	r2, #48	; 0x30
 8002f9c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d20a      	bcs.n	8002fbc <_ntoa_format+0x6e>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b1f      	cmp	r3, #31
 8002faa:	d9f1      	bls.n	8002f90 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002fac:	e006      	b.n	8002fbc <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	61fa      	str	r2, [r7, #28]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	2230      	movs	r2, #48	; 0x30
 8002fba:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <_ntoa_format+0x86>
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d202      	bcs.n	8002fd4 <_ntoa_format+0x86>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2b1f      	cmp	r3, #31
 8002fd2:	d9ec      	bls.n	8002fae <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d058      	beq.n	8003090 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <_ntoa_format+0xc8>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d013      	beq.n	8003016 <_ntoa_format+0xc8>
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d003      	beq.n	8002ffe <_ntoa_format+0xb0>
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d10b      	bne.n	8003016 <_ntoa_format+0xc8>
      len--;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b01      	subs	r3, #1
 8003002:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <_ntoa_format+0xc8>
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	2b10      	cmp	r3, #16
 800300e:	d102      	bne.n	8003016 <_ntoa_format+0xc8>
        len--;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	3b01      	subs	r3, #1
 8003014:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	2b10      	cmp	r3, #16
 800301a:	d10f      	bne.n	800303c <_ntoa_format+0xee>
 800301c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <_ntoa_format+0xee>
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b1f      	cmp	r3, #31
 800302a:	d807      	bhi.n	800303c <_ntoa_format+0xee>
      buf[len++] = 'x';
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	61fa      	str	r2, [r7, #28]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4413      	add	r3, r2
 8003036:	2278      	movs	r2, #120	; 0x78
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e01f      	b.n	800307c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b10      	cmp	r3, #16
 8003040:	d10f      	bne.n	8003062 <_ntoa_format+0x114>
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <_ntoa_format+0x114>
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b1f      	cmp	r3, #31
 8003050:	d807      	bhi.n	8003062 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	61fa      	str	r2, [r7, #28]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4413      	add	r3, r2
 800305c:	2258      	movs	r2, #88	; 0x58
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e00c      	b.n	800307c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	2b02      	cmp	r3, #2
 8003066:	d109      	bne.n	800307c <_ntoa_format+0x12e>
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b1f      	cmp	r3, #31
 800306c:	d806      	bhi.n	800307c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	61fa      	str	r2, [r7, #28]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4413      	add	r3, r2
 8003078:	2262      	movs	r2, #98	; 0x62
 800307a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b1f      	cmp	r3, #31
 8003080:	d806      	bhi.n	8003090 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	61fa      	str	r2, [r7, #28]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	2230      	movs	r2, #48	; 0x30
 800308e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b1f      	cmp	r3, #31
 8003094:	d824      	bhi.n	80030e0 <_ntoa_format+0x192>
    if (negative) {
 8003096:	f897 3020 	ldrb.w	r3, [r7, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <_ntoa_format+0x160>
      buf[len++] = '-';
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	61fa      	str	r2, [r7, #28]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	222d      	movs	r2, #45	; 0x2d
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e018      	b.n	80030e0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d007      	beq.n	80030c8 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	61fa      	str	r2, [r7, #28]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4413      	add	r3, r2
 80030c2:	222b      	movs	r2, #43	; 0x2b
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e00b      	b.n	80030e0 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d006      	beq.n	80030e0 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	61fa      	str	r2, [r7, #28]
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4413      	add	r3, r2
 80030dc:	2220      	movs	r2, #32
 80030de:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	9303      	str	r3, [sp, #12]
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	9302      	str	r3, [sp, #8]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7ff fed9 	bl	8002eae <_out_rev>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b096      	sub	sp, #88	; 0x58
 800310a:	af08      	add	r7, sp, #32
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d103      	bne.n	8003126 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800311e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003120:	f023 0310 	bic.w	r3, r3, #16
 8003124:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <_ntoa_long+0x30>
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d032      	beq.n	800319c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313a:	fbb3 f2f2 	udiv	r2, r3, r2
 800313e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003140:	fb01 f202 	mul.w	r2, r1, r2
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800314a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800314e:	2b09      	cmp	r3, #9
 8003150:	d804      	bhi.n	800315c <_ntoa_long+0x56>
 8003152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003156:	3330      	adds	r3, #48	; 0x30
 8003158:	b2da      	uxtb	r2, r3
 800315a:	e00d      	b.n	8003178 <_ntoa_long+0x72>
 800315c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <_ntoa_long+0x64>
 8003166:	2241      	movs	r2, #65	; 0x41
 8003168:	e000      	b.n	800316c <_ntoa_long+0x66>
 800316a:	2261      	movs	r2, #97	; 0x61
 800316c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003170:	4413      	add	r3, r2
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3b0a      	subs	r3, #10
 8003176:	b2da      	uxtb	r2, r3
 8003178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	6379      	str	r1, [r7, #52]	; 0x34
 800317e:	3338      	adds	r3, #56	; 0x38
 8003180:	443b      	add	r3, r7
 8003182:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003186:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <_ntoa_long+0x96>
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	2b1f      	cmp	r3, #31
 800319a:	d9cc      	bls.n	8003136 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800319c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319e:	9306      	str	r3, [sp, #24]
 80031a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031a2:	9305      	str	r3, [sp, #20]
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	9303      	str	r3, [sp, #12]
 80031ac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fec3 	bl	8002f4e <_ntoa_format>
 80031c8:	4603      	mov	r3, r0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3738      	adds	r7, #56	; 0x38
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b096      	sub	sp, #88	; 0x58
 80031d6:	af08      	add	r7, sp, #32
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80031e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031e8:	4313      	orrs	r3, r2
 80031ea:	d103      	bne.n	80031f4 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80031ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80031f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <_ntoa_long_long+0x34>
 80031fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003202:	4313      	orrs	r3, r2
 8003204:	d037      	beq.n	8003276 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003206:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800320a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800320e:	f7fd fc8d 	bl	8000b2c <__aeabi_uldivmod>
 8003212:	4613      	mov	r3, r2
 8003214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800321c:	2b09      	cmp	r3, #9
 800321e:	d804      	bhi.n	800322a <_ntoa_long_long+0x58>
 8003220:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003224:	3330      	adds	r3, #48	; 0x30
 8003226:	b2da      	uxtb	r2, r3
 8003228:	e00d      	b.n	8003246 <_ntoa_long_long+0x74>
 800322a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <_ntoa_long_long+0x66>
 8003234:	2241      	movs	r2, #65	; 0x41
 8003236:	e000      	b.n	800323a <_ntoa_long_long+0x68>
 8003238:	2261      	movs	r2, #97	; 0x61
 800323a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800323e:	4413      	add	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	3b0a      	subs	r3, #10
 8003244:	b2da      	uxtb	r2, r3
 8003246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	6379      	str	r1, [r7, #52]	; 0x34
 800324c:	3338      	adds	r3, #56	; 0x38
 800324e:	443b      	add	r3, r7
 8003250:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8003254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003258:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800325c:	f7fd fc66 	bl	8000b2c <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003268:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800326c:	4313      	orrs	r3, r2
 800326e:	d002      	beq.n	8003276 <_ntoa_long_long+0xa4>
 8003270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003272:	2b1f      	cmp	r3, #31
 8003274:	d9c7      	bls.n	8003206 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800327a:	9206      	str	r2, [sp, #24]
 800327c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800327e:	9205      	str	r2, [sp, #20]
 8003280:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003282:	9204      	str	r2, [sp, #16]
 8003284:	9303      	str	r3, [sp, #12]
 8003286:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800328a:	9302      	str	r3, [sp, #8]
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fe56 	bl	8002f4e <_ntoa_format>
 80032a2:	4603      	mov	r3, r0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3738      	adds	r7, #56	; 0x38
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	0000      	movs	r0, r0
	...

080032b0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b09d      	sub	sp, #116	; 0x74
 80032b4:	af06      	add	r7, sp, #24
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80032ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80032d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032d6:	f7fd fb5f 	bl	8000998 <__aeabi_dcmpeq>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80032e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e2:	9303      	str	r3, [sp, #12]
 80032e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e6:	9302      	str	r3, [sp, #8]
 80032e8:	2303      	movs	r3, #3
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <_ftoa+0x248>)
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fdd9 	bl	8002eae <_out_rev>
 80032fc:	4603      	mov	r3, r0
 80032fe:	e224      	b.n	800374a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003308:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800330c:	f7fd fb4e 	bl	80009ac <__aeabi_dcmplt>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003318:	9303      	str	r3, [sp, #12]
 800331a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331c:	9302      	str	r3, [sp, #8]
 800331e:	2304      	movs	r3, #4
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	4b76      	ldr	r3, [pc, #472]	; (80034fc <_ftoa+0x24c>)
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fdbe 	bl	8002eae <_out_rev>
 8003332:	4603      	mov	r3, r0
 8003334:	e209      	b.n	800374a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003336:	f04f 32ff 	mov.w	r2, #4294967295
 800333a:	4b71      	ldr	r3, [pc, #452]	; (8003500 <_ftoa+0x250>)
 800333c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003340:	f7fd fb52 	bl	80009e8 <__aeabi_dcmpgt>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800334a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <_ftoa+0xa8>
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <_ftoa+0x254>)
 8003356:	e000      	b.n	800335a <_ftoa+0xaa>
 8003358:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <_ftoa+0x258>)
 800335a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800335c:	f002 0204 	and.w	r2, r2, #4
 8003360:	2a00      	cmp	r2, #0
 8003362:	d001      	beq.n	8003368 <_ftoa+0xb8>
 8003364:	2204      	movs	r2, #4
 8003366:	e000      	b.n	800336a <_ftoa+0xba>
 8003368:	2203      	movs	r2, #3
 800336a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003370:	9102      	str	r1, [sp, #8]
 8003372:	9201      	str	r2, [sp, #4]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fd96 	bl	8002eae <_out_rev>
 8003382:	4603      	mov	r3, r0
 8003384:	e1e1      	b.n	800374a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003386:	a358      	add	r3, pc, #352	; (adr r3, 80034e8 <_ftoa+0x238>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003390:	f7fd fb2a 	bl	80009e8 <__aeabi_dcmpgt>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <_ftoa+0xfe>
 800339a:	a355      	add	r3, pc, #340	; (adr r3, 80034f0 <_ftoa+0x240>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033a4:	f7fd fb02 	bl	80009ac <__aeabi_dcmplt>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d011      	beq.n	80033d2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80033ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b4:	9303      	str	r3, [sp, #12]
 80033b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b8:	9302      	str	r3, [sp, #8]
 80033ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80033be:	e9cd 2300 	strd	r2, r3, [sp]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f9c9 	bl	8003760 <_etoa>
 80033ce:	4603      	mov	r3, r0
 80033d0:	e1bb      	b.n	800374a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80033d2:	2300      	movs	r3, #0
 80033d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033e4:	f7fd fae2 	bl	80009ac <__aeabi_dcmplt>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00e      	beq.n	800340c <_ftoa+0x15c>
    negative = true;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 80033f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	f7fc feaa 	bl	8000158 <__aeabi_dsub>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800340c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003416:	2306      	movs	r3, #6
 8003418:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800341a:	e00a      	b.n	8003432 <_ftoa+0x182>
    buf[len++] = '0';
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	657a      	str	r2, [r7, #84]	; 0x54
 8003422:	3358      	adds	r3, #88	; 0x58
 8003424:	443b      	add	r3, r7
 8003426:	2230      	movs	r2, #48	; 0x30
 8003428:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800342c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800342e:	3b01      	subs	r3, #1
 8003430:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	2b1f      	cmp	r3, #31
 8003436:	d802      	bhi.n	800343e <_ftoa+0x18e>
 8003438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343a:	2b09      	cmp	r3, #9
 800343c:	d8ee      	bhi.n	800341c <_ftoa+0x16c>
  }

  int whole = (int)value;
 800343e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003442:	f7fd fadb 	bl	80009fc <__aeabi_d2iz>
 8003446:	4603      	mov	r3, r0
 8003448:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 800344a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800344c:	f7fc ffd2 	bl	80003f4 <__aeabi_i2d>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003458:	f7fc fe7e 	bl	8000158 <__aeabi_dsub>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	4a29      	ldr	r2, [pc, #164]	; (800350c <_ftoa+0x25c>)
 8003466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f82a 	bl	80004c8 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 800347c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003480:	f7fd fae4 	bl	8000a4c <__aeabi_d2uiz>
 8003484:	4603      	mov	r3, r0
 8003486:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8003488:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800348a:	f7fc ffa3 	bl	80003d4 <__aeabi_ui2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003496:	f7fc fe5f 	bl	8000158 <__aeabi_dsub>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <_ftoa+0x260>)
 80034a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80034ac:	f7fd fa9c 	bl	80009e8 <__aeabi_dcmpgt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <_ftoa+0x264>
    ++frac;
 80034b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b8:	3301      	adds	r3, #1
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80034bc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80034be:	f7fc ff89 	bl	80003d4 <__aeabi_ui2d>
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <_ftoa+0x25c>)
 80034c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fd fa81 	bl	80009d4 <__aeabi_dcmpge>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d032      	beq.n	800353e <_ftoa+0x28e>
      frac = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034de:	3301      	adds	r3, #1
 80034e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e2:	e02c      	b.n	800353e <_ftoa+0x28e>
 80034e4:	f3af 8000 	nop.w
 80034e8:	00000000 	.word	0x00000000
 80034ec:	41cdcd65 	.word	0x41cdcd65
 80034f0:	00000000 	.word	0x00000000
 80034f4:	c1cdcd65 	.word	0xc1cdcd65
 80034f8:	08008778 	.word	0x08008778
 80034fc:	0800877c 	.word	0x0800877c
 8003500:	7fefffff 	.word	0x7fefffff
 8003504:	08008784 	.word	0x08008784
 8003508:	0800878c 	.word	0x0800878c
 800350c:	080087a8 	.word	0x080087a8
 8003510:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <_ftoa+0x4a4>)
 800351a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800351e:	f7fd fa45 	bl	80009ac <__aeabi_dcmplt>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <_ftoa+0x288>
 800352e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	3301      	adds	r3, #1
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800353e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003540:	2b00      	cmp	r3, #0
 8003542:	d133      	bne.n	80035ac <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003544:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003546:	f7fc ff55 	bl	80003f4 <__aeabi_i2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003552:	f7fc fe01 	bl	8000158 <__aeabi_dsub>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800355e:	2301      	movs	r3, #1
 8003560:	461c      	mov	r4, r3
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <_ftoa+0x4a4>)
 8003568:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800356c:	f7fd fa1e 	bl	80009ac <__aeabi_dcmplt>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <_ftoa+0x2ca>
 8003576:	2300      	movs	r3, #0
 8003578:	461c      	mov	r4, r3
 800357a:	b2e3      	uxtb	r3, r4
 800357c:	f083 0301 	eor.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <_ftoa+0x2ea>
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <_ftoa+0x4a4>)
 800358c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003590:	f7fd fa2a 	bl	80009e8 <__aeabi_dcmpgt>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04c      	beq.n	8003634 <_ftoa+0x384>
 800359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d069      	beq.n	8003678 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80035a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a6:	3301      	adds	r3, #1
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	e065      	b.n	8003678 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 80035ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ae:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035b0:	e01f      	b.n	80035f2 <_ftoa+0x342>
      --count;
 80035b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b4:	3b01      	subs	r3, #1
 80035b6:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80035b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80035ba:	4b67      	ldr	r3, [pc, #412]	; (8003758 <_ftoa+0x4a8>)
 80035bc:	fba3 2301 	umull	r2, r3, r3, r1
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	1aca      	subs	r2, r1, r3
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	6579      	str	r1, [r7, #84]	; 0x54
 80035d4:	3230      	adds	r2, #48	; 0x30
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	3358      	adds	r3, #88	; 0x58
 80035da:	443b      	add	r3, r7
 80035dc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	4a5d      	ldr	r2, [pc, #372]	; (8003758 <_ftoa+0x4a8>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	08db      	lsrs	r3, r3, #3
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	2b1f      	cmp	r3, #31
 80035f6:	d9dc      	bls.n	80035b2 <_ftoa+0x302>
 80035f8:	e009      	b.n	800360e <_ftoa+0x35e>
        break;
 80035fa:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80035fc:	e007      	b.n	800360e <_ftoa+0x35e>
      buf[len++] = '0';
 80035fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	657a      	str	r2, [r7, #84]	; 0x54
 8003604:	3358      	adds	r3, #88	; 0x58
 8003606:	443b      	add	r3, r7
 8003608:	2230      	movs	r2, #48	; 0x30
 800360a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800360e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003610:	2b1f      	cmp	r3, #31
 8003612:	d804      	bhi.n	800361e <_ftoa+0x36e>
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	647a      	str	r2, [r7, #68]	; 0x44
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ef      	bne.n	80035fe <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800361e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003620:	2b1f      	cmp	r3, #31
 8003622:	d829      	bhi.n	8003678 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	657a      	str	r2, [r7, #84]	; 0x54
 800362a:	3358      	adds	r3, #88	; 0x58
 800362c:	443b      	add	r3, r7
 800362e:	222e      	movs	r2, #46	; 0x2e
 8003630:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003634:	e020      	b.n	8003678 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003638:	4b48      	ldr	r3, [pc, #288]	; (800375c <_ftoa+0x4ac>)
 800363a:	fb83 1302 	smull	r1, r3, r3, r2
 800363e:	1099      	asrs	r1, r3, #2
 8003640:	17d3      	asrs	r3, r2, #31
 8003642:	1ac9      	subs	r1, r1, r3
 8003644:	460b      	mov	r3, r1
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	1ad1      	subs	r1, r2, r3
 800364e:	b2ca      	uxtb	r2, r1
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	6579      	str	r1, [r7, #84]	; 0x54
 8003656:	3230      	adds	r2, #48	; 0x30
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	3358      	adds	r3, #88	; 0x58
 800365c:	443b      	add	r3, r7
 800365e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003664:	4a3d      	ldr	r2, [pc, #244]	; (800375c <_ftoa+0x4ac>)
 8003666:	fb82 1203 	smull	r1, r2, r2, r3
 800366a:	1092      	asrs	r2, r2, #2
 800366c:	17db      	asrs	r3, r3, #31
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	2b1f      	cmp	r3, #31
 800367c:	d9db      	bls.n	8003636 <_ftoa+0x386>
 800367e:	e000      	b.n	8003682 <_ftoa+0x3d2>
      break;
 8003680:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d123      	bne.n	80036d4 <_ftoa+0x424>
 800368c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01e      	beq.n	80036d4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003698:	2b00      	cmp	r3, #0
 800369a:	d014      	beq.n	80036c6 <_ftoa+0x416>
 800369c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <_ftoa+0x3fe>
 80036a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <_ftoa+0x416>
      width--;
 80036ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b0:	3b01      	subs	r3, #1
 80036b2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80036b4:	e007      	b.n	80036c6 <_ftoa+0x416>
      buf[len++] = '0';
 80036b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	657a      	str	r2, [r7, #84]	; 0x54
 80036bc:	3358      	adds	r3, #88	; 0x58
 80036be:	443b      	add	r3, r7
 80036c0:	2230      	movs	r2, #48	; 0x30
 80036c2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80036c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d202      	bcs.n	80036d4 <_ftoa+0x424>
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	2b1f      	cmp	r3, #31
 80036d2:	d9f0      	bls.n	80036b6 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80036d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d6:	2b1f      	cmp	r3, #31
 80036d8:	d827      	bhi.n	800372a <_ftoa+0x47a>
    if (negative) {
 80036da:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <_ftoa+0x444>
      buf[len++] = '-';
 80036e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	657a      	str	r2, [r7, #84]	; 0x54
 80036e8:	3358      	adds	r3, #88	; 0x58
 80036ea:	443b      	add	r3, r7
 80036ec:	222d      	movs	r2, #45	; 0x2d
 80036ee:	f803 2c48 	strb.w	r2, [r3, #-72]
 80036f2:	e01a      	b.n	800372a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80036f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80036fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	657a      	str	r2, [r7, #84]	; 0x54
 8003704:	3358      	adds	r3, #88	; 0x58
 8003706:	443b      	add	r3, r7
 8003708:	222b      	movs	r2, #43	; 0x2b
 800370a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800370e:	e00c      	b.n	800372a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <_ftoa+0x47a>
      buf[len++] = ' ';
 800371a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	657a      	str	r2, [r7, #84]	; 0x54
 8003720:	3358      	adds	r3, #88	; 0x58
 8003722:	443b      	add	r3, r7
 8003724:	2220      	movs	r2, #32
 8003726:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800372a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f107 0310 	add.w	r3, r7, #16
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff fbb3 	bl	8002eae <_out_rev>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	375c      	adds	r7, #92	; 0x5c
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	3fe00000 	.word	0x3fe00000
 8003758:	cccccccd 	.word	0xcccccccd
 800375c:	66666667 	.word	0x66666667

08003760 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	b09d      	sub	sp, #116	; 0x74
 8003766:	af06      	add	r7, sp, #24
 8003768:	61f8      	str	r0, [r7, #28]
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	617a      	str	r2, [r7, #20]
 800376e:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003770:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003774:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003778:	f7fd f90e 	bl	8000998 <__aeabi_dcmpeq>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <_etoa+0x4c>
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	4bc4      	ldr	r3, [pc, #784]	; (8003a98 <_etoa+0x338>)
 8003788:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800378c:	f7fd f92c 	bl	80009e8 <__aeabi_dcmpgt>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <_etoa+0x4c>
 8003796:	f04f 32ff 	mov.w	r2, #4294967295
 800379a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800379e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037a2:	f7fd f903 	bl	80009ac <__aeabi_dcmplt>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d014      	beq.n	80037d6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80037ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037b0:	9304      	str	r3, [sp, #16]
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b6:	9303      	str	r3, [sp, #12]
 80037b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80037c2:	e9cd 2300 	strd	r2, r3, [sp]
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	69b9      	ldr	r1, [r7, #24]
 80037cc:	69f8      	ldr	r0, [r7, #28]
 80037ce:	f7ff fd6f 	bl	80032b0 <_ftoa>
 80037d2:	4603      	mov	r3, r0
 80037d4:	e247      	b.n	8003c66 <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80037d6:	2301      	movs	r3, #1
 80037d8:	461e      	mov	r6, r3
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037e6:	f7fd f8e1 	bl	80009ac <__aeabi_dcmplt>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <_etoa+0x94>
 80037f0:	2300      	movs	r3, #0
 80037f2:	461e      	mov	r6, r3
 80037f4:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 80037f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <_etoa+0xb8>
    value = -value;
 8003800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800380a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003814:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003824:	2306      	movs	r3, #6
 8003826:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800382a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800382e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003832:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	0d0a      	lsrs	r2, r1, #20
 8003840:	2300      	movs	r3, #0
 8003842:	4613      	mov	r3, r2
 8003844:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003848:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800384c:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800384e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003852:	4690      	mov	r8, r2
 8003854:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003858:	4644      	mov	r4, r8
 800385a:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800385e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003862:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003866:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003868:	f7fc fdc4 	bl	80003f4 <__aeabi_i2d>
 800386c:	a37e      	add	r3, pc, #504	; (adr r3, 8003a68 <_etoa+0x308>)
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f7fc fe29 	bl	80004c8 <__aeabi_dmul>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	a37c      	add	r3, pc, #496	; (adr r3, 8003a70 <_etoa+0x310>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc fc6a 	bl	800015c <__adddf3>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4614      	mov	r4, r2
 800388e:	461d      	mov	r5, r3
 8003890:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	4b80      	ldr	r3, [pc, #512]	; (8003a9c <_etoa+0x33c>)
 800389a:	f7fc fc5d 	bl	8000158 <__aeabi_dsub>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	a374      	add	r3, pc, #464	; (adr r3, 8003a78 <_etoa+0x318>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fe0c 	bl	80004c8 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	f7fc fc50 	bl	800015c <__adddf3>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7fd f89a 	bl	80009fc <__aeabi_d2iz>
 80038c8:	4603      	mov	r3, r0
 80038ca:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80038cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80038ce:	f7fc fd91 	bl	80003f4 <__aeabi_i2d>
 80038d2:	a36b      	add	r3, pc, #428	; (adr r3, 8003a80 <_etoa+0x320>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f7fc fdf6 	bl	80004c8 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4610      	mov	r0, r2
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	4b6d      	ldr	r3, [pc, #436]	; (8003aa0 <_etoa+0x340>)
 80038ea:	f7fc fc37 	bl	800015c <__adddf3>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4610      	mov	r0, r2
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fd f881 	bl	80009fc <__aeabi_d2iz>
 80038fa:	4603      	mov	r3, r0
 80038fc:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80038fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003900:	f7fc fd78 	bl	80003f4 <__aeabi_i2d>
 8003904:	a360      	add	r3, pc, #384	; (adr r3, 8003a88 <_etoa+0x328>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	f7fc fddd 	bl	80004c8 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4614      	mov	r4, r2
 8003914:	461d      	mov	r5, r3
 8003916:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003918:	f7fc fd6c 	bl	80003f4 <__aeabi_i2d>
 800391c:	a35c      	add	r3, pc, #368	; (adr r3, 8003a90 <_etoa+0x330>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	f7fc fdd1 	bl	80004c8 <__aeabi_dmul>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4620      	mov	r0, r4
 800392c:	4629      	mov	r1, r5
 800392e:	f7fc fc13 	bl	8000158 <__aeabi_dsub>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 800393a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800393e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003942:	f7fc fdc1 	bl	80004c8 <__aeabi_dmul>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800394e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003950:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003954:	17da      	asrs	r2, r3, #31
 8003956:	469a      	mov	sl, r3
 8003958:	4693      	mov	fp, r2
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003966:	2200      	movs	r2, #0
 8003968:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800396c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003970:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	f7fc fbf0 	bl	800015c <__adddf3>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4690      	mov	r8, r2
 8003982:	4699      	mov	r9, r3
 8003984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003988:	f04f 0000 	mov.w	r0, #0
 800398c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003990:	f7fc fbe2 	bl	8000158 <__aeabi_dsub>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4692      	mov	sl, r2
 800399a:	469b      	mov	fp, r3
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	4b40      	ldr	r3, [pc, #256]	; (8003aa4 <_etoa+0x344>)
 80039a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039a6:	f7fc feb9 	bl	800071c <__aeabi_ddiv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	4b3c      	ldr	r3, [pc, #240]	; (8003aa8 <_etoa+0x348>)
 80039b8:	f7fc fbd0 	bl	800015c <__adddf3>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039c4:	f7fc feaa 	bl	800071c <__aeabi_ddiv>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <_etoa+0x34c>)
 80039d6:	f7fc fbc1 	bl	800015c <__adddf3>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80039e2:	f7fc fe9b 	bl	800071c <__aeabi_ddiv>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4650      	mov	r0, sl
 80039ec:	4659      	mov	r1, fp
 80039ee:	f7fc fbb5 	bl	800015c <__adddf3>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4640      	mov	r0, r8
 80039f8:	4649      	mov	r1, r9
 80039fa:	f7fc fe8f 	bl	800071c <__aeabi_ddiv>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <_etoa+0x350>)
 8003a0c:	f7fc fba6 	bl	800015c <__adddf3>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4620      	mov	r0, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	f7fc fd56 	bl	80004c8 <__aeabi_dmul>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 8003a24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a28:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a2c:	f7fc ffbe 	bl	80009ac <__aeabi_dcmplt>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <_etoa+0x2f2>
    expval--;
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003a3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <_etoa+0x348>)
 8003a46:	f7fc fe69 	bl	800071c <__aeabi_ddiv>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a54:	2b63      	cmp	r3, #99	; 0x63
 8003a56:	dc2d      	bgt.n	8003ab4 <_etoa+0x354>
 8003a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a5a:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003a5e:	db29      	blt.n	8003ab4 <_etoa+0x354>
 8003a60:	2304      	movs	r3, #4
 8003a62:	e028      	b.n	8003ab6 <_etoa+0x356>
 8003a64:	f3af 8000 	nop.w
 8003a68:	509f79fb 	.word	0x509f79fb
 8003a6c:	3fd34413 	.word	0x3fd34413
 8003a70:	8b60c8b3 	.word	0x8b60c8b3
 8003a74:	3fc68a28 	.word	0x3fc68a28
 8003a78:	636f4361 	.word	0x636f4361
 8003a7c:	3fd287a7 	.word	0x3fd287a7
 8003a80:	0979a371 	.word	0x0979a371
 8003a84:	400a934f 	.word	0x400a934f
 8003a88:	bbb55516 	.word	0xbbb55516
 8003a8c:	40026bb1 	.word	0x40026bb1
 8003a90:	fefa39ef 	.word	0xfefa39ef
 8003a94:	3fe62e42 	.word	0x3fe62e42
 8003a98:	7fefffff 	.word	0x7fefffff
 8003a9c:	3ff80000 	.word	0x3ff80000
 8003aa0:	3fe00000 	.word	0x3fe00000
 8003aa4:	402c0000 	.word	0x402c0000
 8003aa8:	40240000 	.word	0x40240000
 8003aac:	40180000 	.word	0x40180000
 8003ab0:	3ff00000 	.word	0x3ff00000
 8003ab4:	2305      	movs	r3, #5
 8003ab6:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003ab8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d03d      	beq.n	8003b40 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8003c70 <_etoa+0x510>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ace:	f7fc ff81 	bl	80009d4 <__aeabi_dcmpge>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d024      	beq.n	8003b22 <_etoa+0x3c2>
 8003ad8:	a367      	add	r3, pc, #412	; (adr r3, 8003c78 <_etoa+0x518>)
 8003ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ae2:	f7fc ff63 	bl	80009ac <__aeabi_dcmplt>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01a      	beq.n	8003b22 <_etoa+0x3c2>
      if ((int)prec > expval) {
 8003aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003af0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003af2:	429a      	cmp	r2, r3
 8003af4:	da07      	bge.n	8003b06 <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8003af6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b04:	e002      	b.n	8003b0c <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003b0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b20:	e00e      	b.n	8003b40 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <_etoa+0x3e0>
 8003b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <_etoa+0x3e0>
        --prec;
 8003b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003b46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d904      	bls.n	8003b5a <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	e001      	b.n	8003b5e <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <_etoa+0x414>
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d009      	beq.n	8003b8e <_etoa+0x42e>
    value /= conv.F;
 8003b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b82:	f7fc fdcb 	bl	800071c <__aeabi_ddiv>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003b92:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <_etoa+0x44c>
 8003b9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ba4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e003      	b.n	8003bb4 <_etoa+0x454>
 8003bac:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003bb0:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbc:	9304      	str	r3, [sp, #16]
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	9303      	str	r3, [sp, #12]
 8003bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003bcc:	e9cd 3400 	strd	r3, r4, [sp]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	69b9      	ldr	r1, [r7, #24]
 8003bd6:	69f8      	ldr	r0, [r7, #28]
 8003bd8:	f7ff fb6a 	bl	80032b0 <_ftoa>
 8003bdc:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03f      	beq.n	8003c64 <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <_etoa+0x494>
 8003bf0:	2045      	movs	r0, #69	; 0x45
 8003bf2:	e000      	b.n	8003bf6 <_etoa+0x496>
 8003bf4:	2065      	movs	r0, #101	; 0x65
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	1c53      	adds	r3, r2, #1
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	69fc      	ldr	r4, [r7, #28]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	69b9      	ldr	r1, [r7, #24]
 8003c02:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bfb8      	it	lt
 8003c0a:	425b      	neglt	r3, r3
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	0fdb      	lsrs	r3, r3, #31
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c16:	3a01      	subs	r2, #1
 8003c18:	2105      	movs	r1, #5
 8003c1a:	9105      	str	r1, [sp, #20]
 8003c1c:	9204      	str	r2, [sp, #16]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	9203      	str	r2, [sp, #12]
 8003c22:	220a      	movs	r2, #10
 8003c24:	9202      	str	r2, [sp, #8]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	9000      	str	r0, [sp, #0]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	69f8      	ldr	r0, [r7, #28]
 8003c32:	f7ff fa68 	bl	8003106 <_ntoa_long>
 8003c36:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003c38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003c44:	e007      	b.n	8003c56 <_etoa+0x4f6>
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	1c53      	adds	r3, r2, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	69fc      	ldr	r4, [r7, #28]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	69b9      	ldr	r1, [r7, #24]
 8003c52:	2020      	movs	r0, #32
 8003c54:	47a0      	blx	r4
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d8f0      	bhi.n	8003c46 <_etoa+0x4e6>
    }
  }
  return idx;
 8003c64:	697b      	ldr	r3, [r7, #20]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	375c      	adds	r7, #92	; 0x5c
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	eb1c432d 	.word	0xeb1c432d
 8003c74:	3f1a36e2 	.word	0x3f1a36e2
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	412e8480 	.word	0x412e8480

08003c80 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	b0a3      	sub	sp, #140	; 0x8c
 8003c86:	af0a      	add	r7, sp, #40	; 0x28
 8003c88:	6178      	str	r0, [r7, #20]
 8003c8a:	6139      	str	r1, [r7, #16]
 8003c8c:	60fa      	str	r2, [r7, #12]
 8003c8e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f040 84ba 	bne.w	8004610 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003c9c:	4ba3      	ldr	r3, [pc, #652]	; (8003f2c <_vsnprintf+0x2ac>)
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003ca0:	f000 bcb6 	b.w	8004610 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b25      	cmp	r3, #37	; 0x25
 8003caa:	d00d      	beq.n	8003cc8 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	7818      	ldrb	r0, [r3, #0]
 8003cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cb2:	1c53      	adds	r3, r2, #1
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb6:	697c      	ldr	r4, [r7, #20]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6939      	ldr	r1, [r7, #16]
 8003cbc:	47a0      	blx	r4
      format++;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	60bb      	str	r3, [r7, #8]
      continue;
 8003cc4:	f000 bca4 	b.w	8004610 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	3b20      	subs	r3, #32
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d857      	bhi.n	8003d8c <_vsnprintf+0x10c>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <_vsnprintf+0x64>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d65 	.word	0x08003d65
 8003ce8:	08003d8d 	.word	0x08003d8d
 8003cec:	08003d8d 	.word	0x08003d8d
 8003cf0:	08003d79 	.word	0x08003d79
 8003cf4:	08003d8d 	.word	0x08003d8d
 8003cf8:	08003d8d 	.word	0x08003d8d
 8003cfc:	08003d8d 	.word	0x08003d8d
 8003d00:	08003d8d 	.word	0x08003d8d
 8003d04:	08003d8d 	.word	0x08003d8d
 8003d08:	08003d8d 	.word	0x08003d8d
 8003d0c:	08003d8d 	.word	0x08003d8d
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d8d 	.word	0x08003d8d
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d8d 	.word	0x08003d8d
 8003d20:	08003d8d 	.word	0x08003d8d
 8003d24:	08003d29 	.word	0x08003d29
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	2301      	movs	r3, #1
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	e02a      	b.n	8003d92 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d3e:	f043 0302 	orr.w	r3, r3, #2
 8003d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4e:	e020      	b.n	8003d92 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d52:	f043 0304 	orr.w	r3, r3, #4
 8003d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
 8003d62:	e016      	b.n	8003d92 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d66:	f043 0308 	orr.w	r3, r3, #8
 8003d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	2301      	movs	r3, #1
 8003d74:	653b      	str	r3, [r7, #80]	; 0x50
 8003d76:	e00c      	b.n	8003d92 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7a:	f043 0310 	orr.w	r3, r3, #16
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	2301      	movs	r3, #1
 8003d88:	653b      	str	r3, [r7, #80]	; 0x50
 8003d8a:	e002      	b.n	8003d92 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003d90:	bf00      	nop
      }
    } while (n);
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d19c      	bne.n	8003cd2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff f84a 	bl	8002e3a <_is_digit>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d006      	beq.n	8003dba <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f858 	bl	8002e66 <_atoi>
 8003db6:	65b8      	str	r0, [r7, #88]	; 0x58
 8003db8:	e01a      	b.n	8003df0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8003dc0:	d116      	bne.n	8003df0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da07      	bge.n	8003de6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	425b      	negs	r3, r3
 8003de2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003de4:	e001      	b.n	8003dea <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dfa:	d127      	bne.n	8003e4c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7ff f813 	bl	8002e3a <_is_digit>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003e1a:	f107 0308 	add.w	r3, r7, #8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff f821 	bl	8002e66 <_atoi>
 8003e24:	6578      	str	r0, [r7, #84]	; 0x54
 8003e26:	e011      	b.n	8003e4c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2e:	d10d      	bne.n	8003e4c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003e30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e34:	1d1a      	adds	r2, r3, #4
 8003e36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e44:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	3b68      	subs	r3, #104	; 0x68
 8003e52:	2b12      	cmp	r3, #18
 8003e54:	d866      	bhi.n	8003f24 <_vsnprintf+0x2a4>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <_vsnprintf+0x1dc>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003ecf 	.word	0x08003ecf
 8003e60:	08003f25 	.word	0x08003f25
 8003e64:	08003f05 	.word	0x08003f05
 8003e68:	08003f25 	.word	0x08003f25
 8003e6c:	08003ea9 	.word	0x08003ea9
 8003e70:	08003f25 	.word	0x08003f25
 8003e74:	08003f25 	.word	0x08003f25
 8003e78:	08003f25 	.word	0x08003f25
 8003e7c:	08003f25 	.word	0x08003f25
 8003e80:	08003f25 	.word	0x08003f25
 8003e84:	08003f25 	.word	0x08003f25
 8003e88:	08003f25 	.word	0x08003f25
 8003e8c:	08003ef5 	.word	0x08003ef5
 8003e90:	08003f25 	.word	0x08003f25
 8003e94:	08003f25 	.word	0x08003f25
 8003e98:	08003f25 	.word	0x08003f25
 8003e9c:	08003f25 	.word	0x08003f25
 8003ea0:	08003f25 	.word	0x08003f25
 8003ea4:	08003f15 	.word	0x08003f15
      case 'l' :
        flags |= FLAGS_LONG;
 8003ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eae:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b6c      	cmp	r3, #108	; 0x6c
 8003ebc:	d134      	bne.n	8003f28 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003ecc:	e02c      	b.n	8003f28 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003ece:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	3301      	adds	r3, #1
 8003eda:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b68      	cmp	r3, #104	; 0x68
 8003ee2:	d125      	bne.n	8003f30 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eea:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003ef2:	e01d      	b.n	8003f30 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	3301      	adds	r3, #1
 8003f00:	60bb      	str	r3, [r7, #8]
        break;
 8003f02:	e016      	b.n	8003f32 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
        break;
 8003f12:	e00e      	b.n	8003f32 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	60bb      	str	r3, [r7, #8]
        break;
 8003f22:	e006      	b.n	8003f32 <_vsnprintf+0x2b2>
      default :
        break;
 8003f24:	bf00      	nop
 8003f26:	e004      	b.n	8003f32 <_vsnprintf+0x2b2>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e002      	b.n	8003f32 <_vsnprintf+0x2b2>
 8003f2c:	08002de9 	.word	0x08002de9
        break;
 8003f30:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	3b25      	subs	r3, #37	; 0x25
 8003f38:	2b53      	cmp	r3, #83	; 0x53
 8003f3a:	f200 835c 	bhi.w	80045f6 <_vsnprintf+0x976>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <_vsnprintf+0x2c4>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	080045df 	.word	0x080045df
 8003f48:	080045f7 	.word	0x080045f7
 8003f4c:	080045f7 	.word	0x080045f7
 8003f50:	080045f7 	.word	0x080045f7
 8003f54:	080045f7 	.word	0x080045f7
 8003f58:	080045f7 	.word	0x080045f7
 8003f5c:	080045f7 	.word	0x080045f7
 8003f60:	080045f7 	.word	0x080045f7
 8003f64:	080045f7 	.word	0x080045f7
 8003f68:	080045f7 	.word	0x080045f7
 8003f6c:	080045f7 	.word	0x080045f7
 8003f70:	080045f7 	.word	0x080045f7
 8003f74:	080045f7 	.word	0x080045f7
 8003f78:	080045f7 	.word	0x080045f7
 8003f7c:	080045f7 	.word	0x080045f7
 8003f80:	080045f7 	.word	0x080045f7
 8003f84:	080045f7 	.word	0x080045f7
 8003f88:	080045f7 	.word	0x080045f7
 8003f8c:	080045f7 	.word	0x080045f7
 8003f90:	080045f7 	.word	0x080045f7
 8003f94:	080045f7 	.word	0x080045f7
 8003f98:	080045f7 	.word	0x080045f7
 8003f9c:	080045f7 	.word	0x080045f7
 8003fa0:	080045f7 	.word	0x080045f7
 8003fa4:	080045f7 	.word	0x080045f7
 8003fa8:	080045f7 	.word	0x080045f7
 8003fac:	080045f7 	.word	0x080045f7
 8003fb0:	080045f7 	.word	0x080045f7
 8003fb4:	080045f7 	.word	0x080045f7
 8003fb8:	080045f7 	.word	0x080045f7
 8003fbc:	080045f7 	.word	0x080045f7
 8003fc0:	080045f7 	.word	0x080045f7
 8003fc4:	08004397 	.word	0x08004397
 8003fc8:	0800434b 	.word	0x0800434b
 8003fcc:	08004397 	.word	0x08004397
 8003fd0:	080045f7 	.word	0x080045f7
 8003fd4:	080045f7 	.word	0x080045f7
 8003fd8:	080045f7 	.word	0x080045f7
 8003fdc:	080045f7 	.word	0x080045f7
 8003fe0:	080045f7 	.word	0x080045f7
 8003fe4:	080045f7 	.word	0x080045f7
 8003fe8:	080045f7 	.word	0x080045f7
 8003fec:	080045f7 	.word	0x080045f7
 8003ff0:	080045f7 	.word	0x080045f7
 8003ff4:	080045f7 	.word	0x080045f7
 8003ff8:	080045f7 	.word	0x080045f7
 8003ffc:	080045f7 	.word	0x080045f7
 8004000:	080045f7 	.word	0x080045f7
 8004004:	080045f7 	.word	0x080045f7
 8004008:	080045f7 	.word	0x080045f7
 800400c:	080045f7 	.word	0x080045f7
 8004010:	08004095 	.word	0x08004095
 8004014:	080045f7 	.word	0x080045f7
 8004018:	080045f7 	.word	0x080045f7
 800401c:	080045f7 	.word	0x080045f7
 8004020:	080045f7 	.word	0x080045f7
 8004024:	080045f7 	.word	0x080045f7
 8004028:	080045f7 	.word	0x080045f7
 800402c:	080045f7 	.word	0x080045f7
 8004030:	080045f7 	.word	0x080045f7
 8004034:	080045f7 	.word	0x080045f7
 8004038:	08004095 	.word	0x08004095
 800403c:	08004403 	.word	0x08004403
 8004040:	08004095 	.word	0x08004095
 8004044:	08004397 	.word	0x08004397
 8004048:	0800434b 	.word	0x0800434b
 800404c:	08004397 	.word	0x08004397
 8004050:	080045f7 	.word	0x080045f7
 8004054:	08004095 	.word	0x08004095
 8004058:	080045f7 	.word	0x080045f7
 800405c:	080045f7 	.word	0x080045f7
 8004060:	080045f7 	.word	0x080045f7
 8004064:	080045f7 	.word	0x080045f7
 8004068:	080045f7 	.word	0x080045f7
 800406c:	08004095 	.word	0x08004095
 8004070:	08004543 	.word	0x08004543
 8004074:	080045f7 	.word	0x080045f7
 8004078:	080045f7 	.word	0x080045f7
 800407c:	0800447b 	.word	0x0800447b
 8004080:	080045f7 	.word	0x080045f7
 8004084:	08004095 	.word	0x08004095
 8004088:	080045f7 	.word	0x080045f7
 800408c:	080045f7 	.word	0x080045f7
 8004090:	08004095 	.word	0x08004095
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b78      	cmp	r3, #120	; 0x78
 800409a:	d003      	beq.n	80040a4 <_vsnprintf+0x424>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b58      	cmp	r3, #88	; 0x58
 80040a2:	d102      	bne.n	80040aa <_vsnprintf+0x42a>
          base = 16U;
 80040a4:	2310      	movs	r3, #16
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a8:	e013      	b.n	80040d2 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b6f      	cmp	r3, #111	; 0x6f
 80040b0:	d102      	bne.n	80040b8 <_vsnprintf+0x438>
          base =  8U;
 80040b2:	2308      	movs	r3, #8
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b6:	e00c      	b.n	80040d2 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b62      	cmp	r3, #98	; 0x62
 80040be:	d102      	bne.n	80040c6 <_vsnprintf+0x446>
          base =  2U;
 80040c0:	2302      	movs	r3, #2
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	e005      	b.n	80040d2 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 80040c6:	230a      	movs	r3, #10
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80040ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040cc:	f023 0310 	bic.w	r3, r3, #16
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b58      	cmp	r3, #88	; 0x58
 80040d8:	d103      	bne.n	80040e2 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80040da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040dc:	f043 0320 	orr.w	r3, r3, #32
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b69      	cmp	r3, #105	; 0x69
 80040e8:	d007      	beq.n	80040fa <_vsnprintf+0x47a>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b64      	cmp	r3, #100	; 0x64
 80040f0:	d003      	beq.n	80040fa <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80040f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f4:	f023 030c 	bic.w	r3, r3, #12
 80040f8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80040fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 8004104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b69      	cmp	r3, #105	; 0x69
 8004112:	d004      	beq.n	800411e <_vsnprintf+0x49e>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b64      	cmp	r3, #100	; 0x64
 800411a:	f040 8098 	bne.w	800424e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800411e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004124:	2b00      	cmp	r3, #0
 8004126:	d031      	beq.n	800418c <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800412c:	3307      	adds	r3, #7
 800412e:	f023 0307 	bic.w	r3, r3, #7
 8004132:	f103 0208 	add.w	r2, r3, #8
 8004136:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	da06      	bge.n	8004158 <_vsnprintf+0x4d8>
 800414a:	2100      	movs	r1, #0
 800414c:	f1d2 0800 	rsbs	r8, r2, #0
 8004150:	eb61 0903 	sbc.w	r9, r1, r3
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	69f9      	ldr	r1, [r7, #28]
 800415a:	0fc9      	lsrs	r1, r1, #31
 800415c:	b2c9      	uxtb	r1, r1
 800415e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004160:	2400      	movs	r4, #0
 8004162:	4682      	mov	sl, r0
 8004164:	46a3      	mov	fp, r4
 8004166:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004168:	9008      	str	r0, [sp, #32]
 800416a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800416c:	9007      	str	r0, [sp, #28]
 800416e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004170:	9006      	str	r0, [sp, #24]
 8004172:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004176:	9102      	str	r1, [sp, #8]
 8004178:	e9cd 2300 	strd	r2, r3, [sp]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	6978      	ldr	r0, [r7, #20]
 8004184:	f7ff f825 	bl	80031d2 <_ntoa_long_long>
 8004188:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800418a:	e0da      	b.n	8004342 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800418c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8004196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800419a:	1d1a      	adds	r2, r3, #4
 800419c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfb8      	it	lt
 80041aa:	425b      	neglt	r3, r3
 80041ac:	4619      	mov	r1, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	0fdb      	lsrs	r3, r3, #31
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041b6:	9205      	str	r2, [sp, #20]
 80041b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ba:	9204      	str	r2, [sp, #16]
 80041bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041be:	9203      	str	r2, [sp, #12]
 80041c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c2:	9202      	str	r2, [sp, #8]
 80041c4:	9301      	str	r3, [sp, #4]
 80041c6:	9100      	str	r1, [sp, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041cc:	6939      	ldr	r1, [r7, #16]
 80041ce:	6978      	ldr	r0, [r7, #20]
 80041d0:	f7fe ff99 	bl	8003106 <_ntoa_long>
 80041d4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80041d6:	e0b4      	b.n	8004342 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80041d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <_vsnprintf+0x572>
 80041e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e6:	1d1a      	adds	r2, r3, #4
 80041e8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	e012      	b.n	8004218 <_vsnprintf+0x598>
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <_vsnprintf+0x58c>
 80041fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	b21b      	sxth	r3, r3
 800420a:	e005      	b.n	8004218 <_vsnprintf+0x598>
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004210:	1d1a      	adds	r2, r3, #4
 8004212:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	bfb8      	it	lt
 8004220:	425b      	neglt	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	0fdb      	lsrs	r3, r3, #31
 8004228:	b2db      	uxtb	r3, r3
 800422a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800422c:	9205      	str	r2, [sp, #20]
 800422e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004230:	9204      	str	r2, [sp, #16]
 8004232:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004234:	9203      	str	r2, [sp, #12]
 8004236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004238:	9202      	str	r2, [sp, #8]
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	9100      	str	r1, [sp, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f7fe ff5e 	bl	8003106 <_ntoa_long>
 800424a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800424c:	e079      	b.n	8004342 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004254:	2b00      	cmp	r3, #0
 8004256:	d022      	beq.n	800429e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004258:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800425c:	3307      	adds	r3, #7
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	f103 0208 	add.w	r2, r3, #8
 8004266:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004270:	2000      	movs	r0, #0
 8004272:	460d      	mov	r5, r1
 8004274:	4606      	mov	r6, r0
 8004276:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004278:	9108      	str	r1, [sp, #32]
 800427a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800427c:	9107      	str	r1, [sp, #28]
 800427e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004280:	9106      	str	r1, [sp, #24]
 8004282:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004286:	2100      	movs	r1, #0
 8004288:	9102      	str	r1, [sp, #8]
 800428a:	e9cd 2300 	strd	r2, r3, [sp]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004292:	6939      	ldr	r1, [r7, #16]
 8004294:	6978      	ldr	r0, [r7, #20]
 8004296:	f7fe ff9c 	bl	80031d2 <_ntoa_long_long>
 800429a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800429c:	e051      	b.n	8004342 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800429e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d018      	beq.n	80042da <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80042a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ac:	1d1a      	adds	r2, r3, #4
 80042ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042b6:	9205      	str	r2, [sp, #20]
 80042b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042ba:	9204      	str	r2, [sp, #16]
 80042bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042be:	9203      	str	r2, [sp, #12]
 80042c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c2:	9202      	str	r2, [sp, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	9201      	str	r2, [sp, #4]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ce:	6939      	ldr	r1, [r7, #16]
 80042d0:	6978      	ldr	r0, [r7, #20]
 80042d2:	f7fe ff18 	bl	8003106 <_ntoa_long>
 80042d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80042d8:	e033      	b.n	8004342 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80042da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <_vsnprintf+0x674>
 80042e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e8:	1d1a      	adds	r2, r3, #4
 80042ea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e012      	b.n	800431a <_vsnprintf+0x69a>
 80042f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <_vsnprintf+0x68e>
 80042fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004302:	1d1a      	adds	r2, r3, #4
 8004304:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	e005      	b.n	800431a <_vsnprintf+0x69a>
 800430e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004312:	1d1a      	adds	r2, r3, #4
 8004314:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800431c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431e:	9305      	str	r3, [sp, #20]
 8004320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004322:	9304      	str	r3, [sp, #16]
 8004324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432a:	9302      	str	r3, [sp, #8]
 800432c:	2300      	movs	r3, #0
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004338:	6939      	ldr	r1, [r7, #16]
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7fe fee3 	bl	8003106 <_ntoa_long>
 8004340:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3301      	adds	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
        break;
 8004348:	e162      	b.n	8004610 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b46      	cmp	r3, #70	; 0x46
 8004350:	d103      	bne.n	800435a <_vsnprintf+0x6da>
 8004352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004354:	f043 0320 	orr.w	r3, r3, #32
 8004358:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800435a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800435e:	3307      	adds	r3, #7
 8004360:	f023 0307 	bic.w	r3, r3, #7
 8004364:	f103 0208 	add.w	r2, r3, #8
 8004368:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004372:	9104      	str	r1, [sp, #16]
 8004374:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004376:	9103      	str	r1, [sp, #12]
 8004378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800437a:	9102      	str	r1, [sp, #8]
 800437c:	e9cd 2300 	strd	r2, r3, [sp]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004384:	6939      	ldr	r1, [r7, #16]
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7fe ff92 	bl	80032b0 <_ftoa>
 800438c:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
        break;
 8004394:	e13c      	b.n	8004610 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b67      	cmp	r3, #103	; 0x67
 800439c:	d003      	beq.n	80043a6 <_vsnprintf+0x726>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b47      	cmp	r3, #71	; 0x47
 80043a4:	d103      	bne.n	80043ae <_vsnprintf+0x72e>
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b45      	cmp	r3, #69	; 0x45
 80043b4:	d003      	beq.n	80043be <_vsnprintf+0x73e>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b47      	cmp	r3, #71	; 0x47
 80043bc:	d103      	bne.n	80043c6 <_vsnprintf+0x746>
 80043be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c0:	f043 0320 	orr.w	r3, r3, #32
 80043c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80043c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043ca:	3307      	adds	r3, #7
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80043de:	9104      	str	r1, [sp, #16]
 80043e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e2:	9103      	str	r1, [sp, #12]
 80043e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043e6:	9102      	str	r1, [sp, #8]
 80043e8:	e9cd 2300 	strd	r2, r3, [sp]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043f0:	6939      	ldr	r1, [r7, #16]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff f9b4 	bl	8003760 <_etoa>
 80043f8:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
        break;
 8004400:	e106      	b.n	8004610 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10e      	bne.n	800442e <_vsnprintf+0x7ae>
          while (l++ < width) {
 8004410:	e007      	b.n	8004422 <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 8004412:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004414:	1c53      	adds	r3, r2, #1
 8004416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004418:	697c      	ldr	r4, [r7, #20]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6939      	ldr	r1, [r7, #16]
 800441e:	2020      	movs	r0, #32
 8004420:	47a0      	blx	r4
          while (l++ < width) {
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	647a      	str	r2, [r7, #68]	; 0x44
 8004428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800442a:	429a      	cmp	r2, r3
 800442c:	d8f1      	bhi.n	8004412 <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800442e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004432:	1d1a      	adds	r2, r3, #4
 8004434:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	b2d8      	uxtb	r0, r3
 800443c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800443e:	1c53      	adds	r3, r2, #1
 8004440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004442:	697c      	ldr	r4, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <_vsnprintf+0x7f2>
          while (l++ < width) {
 8004454:	e007      	b.n	8004466 <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 8004456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004458:	1c53      	adds	r3, r2, #1
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	697c      	ldr	r4, [r7, #20]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	2020      	movs	r0, #32
 8004464:	47a0      	blx	r4
          while (l++ < width) {
 8004466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	647a      	str	r2, [r7, #68]	; 0x44
 800446c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446e:	429a      	cmp	r2, r3
 8004470:	d8f1      	bhi.n	8004456 <_vsnprintf+0x7d6>
          }
        }
        format++;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3301      	adds	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
        break;
 8004478:	e0ca      	b.n	8004610 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800447a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <_vsnprintf+0x812>
 800448e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004490:	e001      	b.n	8004496 <_vsnprintf+0x816>
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	4619      	mov	r1, r3
 8004498:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800449a:	f7fe fcb2 	bl	8002e02 <_strnlen_s>
 800449e:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80044aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	4293      	cmp	r3, r2
 80044b0:	bf28      	it	cs
 80044b2:	4613      	movcs	r3, r2
 80044b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80044b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11a      	bne.n	80044f6 <_vsnprintf+0x876>
          while (l++ < width) {
 80044c0:	e007      	b.n	80044d2 <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80044c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c4:	1c53      	adds	r3, r2, #1
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	697c      	ldr	r4, [r7, #20]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6939      	ldr	r1, [r7, #16]
 80044ce:	2020      	movs	r0, #32
 80044d0:	47a0      	blx	r4
          while (l++ < width) {
 80044d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044da:	429a      	cmp	r2, r3
 80044dc:	d8f1      	bhi.n	80044c2 <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80044de:	e00a      	b.n	80044f6 <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80044e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	643a      	str	r2, [r7, #64]	; 0x40
 80044e6:	7818      	ldrb	r0, [r3, #0]
 80044e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ea:	1c53      	adds	r3, r2, #1
 80044ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ee:	697c      	ldr	r4, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6939      	ldr	r1, [r7, #16]
 80044f4:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80044f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d009      	beq.n	8004512 <_vsnprintf+0x892>
 80044fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0eb      	beq.n	80044e0 <_vsnprintf+0x860>
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	1e5a      	subs	r2, r3, #1
 800450c:	657a      	str	r2, [r7, #84]	; 0x54
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e6      	bne.n	80044e0 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <_vsnprintf+0x8ba>
          while (l++ < width) {
 800451c:	e007      	b.n	800452e <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 800451e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004520:	1c53      	adds	r3, r2, #1
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	697c      	ldr	r4, [r7, #20]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6939      	ldr	r1, [r7, #16]
 800452a:	2020      	movs	r0, #32
 800452c:	47a0      	blx	r4
          while (l++ < width) {
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004536:	429a      	cmp	r2, r3
 8004538:	d8f1      	bhi.n	800451e <_vsnprintf+0x89e>
          }
        }
        format++;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3301      	adds	r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
        break;
 8004540:	e066      	b.n	8004610 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004542:	2308      	movs	r3, #8
 8004544:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004548:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800454c:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800455c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004560:	1d1a      	adds	r2, r3, #4
 8004562:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	2300      	movs	r3, #0
 800456c:	603a      	str	r2, [r7, #0]
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004572:	9308      	str	r3, [sp, #32]
 8004574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004576:	9307      	str	r3, [sp, #28]
 8004578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457a:	9306      	str	r3, [sp, #24]
 800457c:	f04f 0210 	mov.w	r2, #16
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004588:	2300      	movs	r3, #0
 800458a:	9302      	str	r3, [sp, #8]
 800458c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004590:	e9cd 3400 	strd	r3, r4, [sp]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004598:	6939      	ldr	r1, [r7, #16]
 800459a:	6978      	ldr	r0, [r7, #20]
 800459c:	f7fe fe19 	bl	80031d2 <_ntoa_long_long>
 80045a0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80045a2:	e018      	b.n	80045d6 <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80045a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045a8:	1d1a      	adds	r2, r3, #4
 80045aa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b4:	9305      	str	r3, [sp, #20]
 80045b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045bc:	9303      	str	r3, [sp, #12]
 80045be:	2310      	movs	r3, #16
 80045c0:	9302      	str	r3, [sp, #8]
 80045c2:	2300      	movs	r3, #0
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	9200      	str	r2, [sp, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045cc:	6939      	ldr	r1, [r7, #16]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7fe fd99 	bl	8003106 <_ntoa_long>
 80045d4:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	3301      	adds	r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
        break;
 80045dc:	e018      	b.n	8004610 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80045de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e0:	1c53      	adds	r3, r2, #1
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	697c      	ldr	r4, [r7, #20]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	2025      	movs	r0, #37	; 0x25
 80045ec:	47a0      	blx	r4
        format++;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
        break;
 80045f4:	e00c      	b.n	8004610 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	7818      	ldrb	r0, [r3, #0]
 80045fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045fc:	1c53      	adds	r3, r2, #1
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004600:	697c      	ldr	r4, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6939      	ldr	r1, [r7, #16]
 8004606:	47a0      	blx	r4
        format++;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	3301      	adds	r3, #1
 800460c:	60bb      	str	r3, [r7, #8]
        break;
 800460e:	bf00      	nop
  while (*format)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f ab45 	bne.w	8003ca4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800461a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d302      	bcc.n	8004628 <_vsnprintf+0x9a8>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	e000      	b.n	800462a <_vsnprintf+0x9aa>
 8004628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462a:	697c      	ldr	r4, [r7, #20]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6939      	ldr	r1, [r7, #16]
 8004630:	2000      	movs	r0, #0
 8004632:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004636:	4618      	mov	r0, r3
 8004638:	3764      	adds	r7, #100	; 0x64
 800463a:	46bd      	mov	sp, r7
 800463c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004640 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8004640:	b40c      	push	{r2, r3}
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af02      	add	r7, sp, #8
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800464c:	f107 031c 	add.w	r3, r7, #28
 8004650:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <snprintf_+0x34>)
 800465e:	f7ff fb0f 	bl	8003c80 <_vsnprintf>
 8004662:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004664:	68fb      	ldr	r3, [r7, #12]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004670:	b002      	add	sp, #8
 8004672:	4770      	bx	lr
 8004674:	08002dbd 	.word	0x08002dbd

08004678 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 800467c:	2201      	movs	r2, #1
 800467e:	2102      	movs	r1, #2
 8004680:	480a      	ldr	r0, [pc, #40]	; (80046ac <ssd1306_Reset+0x34>)
 8004682:	f001 fed2 	bl	800642a <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8004686:	2200      	movs	r2, #0
 8004688:	2101      	movs	r1, #1
 800468a:	4808      	ldr	r0, [pc, #32]	; (80046ac <ssd1306_Reset+0x34>)
 800468c:	f001 fecd 	bl	800642a <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8004690:	200a      	movs	r0, #10
 8004692:	f000 faef 	bl	8004c74 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8004696:	2201      	movs	r2, #1
 8004698:	2101      	movs	r1, #1
 800469a:	4804      	ldr	r0, [pc, #16]	; (80046ac <ssd1306_Reset+0x34>)
 800469c:	f001 fec5 	bl	800642a <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80046a0:	200a      	movs	r0, #10
 80046a2:	f000 fae7 	bl	8004c74 <HAL_Delay>
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40010c00 	.word	0x40010c00

080046b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80046ba:	2200      	movs	r2, #0
 80046bc:	2102      	movs	r1, #2
 80046be:	480c      	ldr	r0, [pc, #48]	; (80046f0 <ssd1306_WriteCommand+0x40>)
 80046c0:	f001 feb3 	bl	800642a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80046c4:	2200      	movs	r2, #0
 80046c6:	2140      	movs	r1, #64	; 0x40
 80046c8:	480a      	ldr	r0, [pc, #40]	; (80046f4 <ssd1306_WriteCommand+0x44>)
 80046ca:	f001 feae 	bl	800642a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80046ce:	1df9      	adds	r1, r7, #7
 80046d0:	f04f 33ff 	mov.w	r3, #4294967295
 80046d4:	2201      	movs	r2, #1
 80046d6:	4808      	ldr	r0, [pc, #32]	; (80046f8 <ssd1306_WriteCommand+0x48>)
 80046d8:	f002 fb54 	bl	8006d84 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80046dc:	2201      	movs	r2, #1
 80046de:	2102      	movs	r1, #2
 80046e0:	4803      	ldr	r0, [pc, #12]	; (80046f0 <ssd1306_WriteCommand+0x40>)
 80046e2:	f001 fea2 	bl	800642a <HAL_GPIO_WritePin>
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40010c00 	.word	0x40010c00
 80046f4:	40010800 	.word	0x40010800
 80046f8:	20000098 	.word	0x20000098

080046fc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8004706:	2200      	movs	r2, #0
 8004708:	2102      	movs	r1, #2
 800470a:	480c      	ldr	r0, [pc, #48]	; (800473c <ssd1306_WriteData+0x40>)
 800470c:	f001 fe8d 	bl	800642a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8004710:	2201      	movs	r2, #1
 8004712:	2140      	movs	r1, #64	; 0x40
 8004714:	480a      	ldr	r0, [pc, #40]	; (8004740 <ssd1306_WriteData+0x44>)
 8004716:	f001 fe88 	bl	800642a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b29a      	uxth	r2, r3
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4807      	ldr	r0, [pc, #28]	; (8004744 <ssd1306_WriteData+0x48>)
 8004726:	f002 fb2d 	bl	8006d84 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800472a:	2201      	movs	r2, #1
 800472c:	2102      	movs	r1, #2
 800472e:	4803      	ldr	r0, [pc, #12]	; (800473c <ssd1306_WriteData+0x40>)
 8004730:	f001 fe7b 	bl	800642a <HAL_GPIO_WritePin>
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40010c00 	.word	0x40010c00
 8004740:	40010800 	.word	0x40010800
 8004744:	20000098 	.word	0x20000098

08004748 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800474c:	f7ff ff94 	bl	8004678 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004750:	2064      	movs	r0, #100	; 0x64
 8004752:	f000 fa8f 	bl	8004c74 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004756:	2000      	movs	r0, #0
 8004758:	f000 f9e6 	bl	8004b28 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800475c:	2020      	movs	r0, #32
 800475e:	f7ff ffa7 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004762:	2000      	movs	r0, #0
 8004764:	f7ff ffa4 	bl	80046b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004768:	20b0      	movs	r0, #176	; 0xb0
 800476a:	f7ff ffa1 	bl	80046b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800476e:	20c8      	movs	r0, #200	; 0xc8
 8004770:	f7ff ff9e 	bl	80046b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004774:	2000      	movs	r0, #0
 8004776:	f7ff ff9b 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800477a:	2010      	movs	r0, #16
 800477c:	f7ff ff98 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004780:	2040      	movs	r0, #64	; 0x40
 8004782:	f7ff ff95 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004786:	20ff      	movs	r0, #255	; 0xff
 8004788:	f000 f9ba 	bl	8004b00 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800478c:	20a1      	movs	r0, #161	; 0xa1
 800478e:	f7ff ff8f 	bl	80046b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004792:	20a6      	movs	r0, #166	; 0xa6
 8004794:	f7ff ff8c 	bl	80046b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004798:	20a8      	movs	r0, #168	; 0xa8
 800479a:	f7ff ff89 	bl	80046b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800479e:	203f      	movs	r0, #63	; 0x3f
 80047a0:	f7ff ff86 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80047a4:	20a4      	movs	r0, #164	; 0xa4
 80047a6:	f7ff ff83 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80047aa:	20d3      	movs	r0, #211	; 0xd3
 80047ac:	f7ff ff80 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7ff ff7d 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80047b6:	20d5      	movs	r0, #213	; 0xd5
 80047b8:	f7ff ff7a 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80047bc:	20f0      	movs	r0, #240	; 0xf0
 80047be:	f7ff ff77 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80047c2:	20d9      	movs	r0, #217	; 0xd9
 80047c4:	f7ff ff74 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80047c8:	2022      	movs	r0, #34	; 0x22
 80047ca:	f7ff ff71 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80047ce:	20da      	movs	r0, #218	; 0xda
 80047d0:	f7ff ff6e 	bl	80046b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80047d4:	2012      	movs	r0, #18
 80047d6:	f7ff ff6b 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80047da:	20db      	movs	r0, #219	; 0xdb
 80047dc:	f7ff ff68 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80047e0:	2020      	movs	r0, #32
 80047e2:	f7ff ff65 	bl	80046b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80047e6:	208d      	movs	r0, #141	; 0x8d
 80047e8:	f7ff ff62 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80047ec:	2014      	movs	r0, #20
 80047ee:	f7ff ff5f 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80047f2:	2001      	movs	r0, #1
 80047f4:	f000 f998 	bl	8004b28 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80047f8:	2000      	movs	r0, #0
 80047fa:	f000 f80f 	bl	800481c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80047fe:	f000 f82f 	bl	8004860 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <ssd1306_Init+0xd0>)
 8004804:	2200      	movs	r2, #0
 8004806:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <ssd1306_Init+0xd0>)
 800480a:	2200      	movs	r2, #0
 800480c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800480e:	4b02      	ldr	r3, [pc, #8]	; (8004818 <ssd1306_Init+0xd0>)
 8004810:	2201      	movs	r2, #1
 8004812:	711a      	strb	r2, [r3, #4]
}
 8004814:	bf00      	nop
 8004816:	bd80      	pop	{r7, pc}
 8004818:	200007a8 	.word	0x200007a8

0800481c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e00d      	b.n	8004848 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800482c:	79fb      	ldrb	r3, [r7, #7]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <ssd1306_Fill+0x1a>
 8004832:	2100      	movs	r1, #0
 8004834:	e000      	b.n	8004838 <ssd1306_Fill+0x1c>
 8004836:	21ff      	movs	r1, #255	; 0xff
 8004838:	4a08      	ldr	r2, [pc, #32]	; (800485c <ssd1306_Fill+0x40>)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	460a      	mov	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800484e:	d3ed      	bcc.n	800482c <ssd1306_Fill+0x10>
    }
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr
 800485c:	20000398 	.word	0x20000398

08004860 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004866:	2300      	movs	r3, #0
 8004868:	71fb      	strb	r3, [r7, #7]
 800486a:	e01a      	b.n	80048a2 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	3b50      	subs	r3, #80	; 0x50
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff1c 	bl	80046b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004878:	2000      	movs	r0, #0
 800487a:	f7ff ff19 	bl	80046b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800487e:	2010      	movs	r0, #16
 8004880:	f7ff ff16 	bl	80046b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004884:	79fa      	ldrb	r2, [r7, #7]
 8004886:	4613      	mov	r3, r2
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	461a      	mov	r2, r3
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <ssd1306_UpdateScreen+0x54>)
 8004892:	4413      	add	r3, r2
 8004894:	2182      	movs	r1, #130	; 0x82
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff30 	bl	80046fc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800489c:	79fb      	ldrb	r3, [r7, #7]
 800489e:	3301      	adds	r3, #1
 80048a0:	71fb      	strb	r3, [r7, #7]
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b07      	cmp	r3, #7
 80048a6:	d9e1      	bls.n	800486c <ssd1306_UpdateScreen+0xc>
    }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000398 	.word	0x20000398

080048b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80048b8:	b490      	push	{r4, r7}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
 80048c2:	460b      	mov	r3, r1
 80048c4:	71bb      	strb	r3, [r7, #6]
 80048c6:	4613      	mov	r3, r2
 80048c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b81      	cmp	r3, #129	; 0x81
 80048ce:	d849      	bhi.n	8004964 <ssd1306_DrawPixel+0xac>
 80048d0:	79bb      	ldrb	r3, [r7, #6]
 80048d2:	2b3f      	cmp	r3, #63	; 0x3f
 80048d4:	d846      	bhi.n	8004964 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80048d6:	797b      	ldrb	r3, [r7, #5]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d120      	bne.n	800491e <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80048dc:	79fa      	ldrb	r2, [r7, #7]
 80048de:	79bb      	ldrb	r3, [r7, #6]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	b2d8      	uxtb	r0, r3
 80048e4:	4601      	mov	r1, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	440b      	add	r3, r1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	4a1f      	ldr	r2, [pc, #124]	; (8004970 <ssd1306_DrawPixel+0xb8>)
 80048f2:	5cd3      	ldrb	r3, [r2, r3]
 80048f4:	b25a      	sxtb	r2, r3
 80048f6:	79bb      	ldrb	r3, [r7, #6]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	2101      	movs	r1, #1
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	b25b      	sxtb	r3, r3
 8004904:	4313      	orrs	r3, r2
 8004906:	b25c      	sxtb	r4, r3
 8004908:	79fa      	ldrb	r2, [r7, #7]
 800490a:	4601      	mov	r1, r0
 800490c:	460b      	mov	r3, r1
 800490e:	019b      	lsls	r3, r3, #6
 8004910:	440b      	add	r3, r1
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	4413      	add	r3, r2
 8004916:	b2e1      	uxtb	r1, r4
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <ssd1306_DrawPixel+0xb8>)
 800491a:	54d1      	strb	r1, [r2, r3]
 800491c:	e023      	b.n	8004966 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800491e:	79fa      	ldrb	r2, [r7, #7]
 8004920:	79bb      	ldrb	r3, [r7, #6]
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	b2d8      	uxtb	r0, r3
 8004926:	4601      	mov	r1, r0
 8004928:	460b      	mov	r3, r1
 800492a:	019b      	lsls	r3, r3, #6
 800492c:	440b      	add	r3, r1
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <ssd1306_DrawPixel+0xb8>)
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	b25a      	sxtb	r2, r3
 8004938:	79bb      	ldrb	r3, [r7, #6]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	b25b      	sxtb	r3, r3
 8004946:	43db      	mvns	r3, r3
 8004948:	b25b      	sxtb	r3, r3
 800494a:	4013      	ands	r3, r2
 800494c:	b25c      	sxtb	r4, r3
 800494e:	79fa      	ldrb	r2, [r7, #7]
 8004950:	4601      	mov	r1, r0
 8004952:	460b      	mov	r3, r1
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	440b      	add	r3, r1
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	4413      	add	r3, r2
 800495c:	b2e1      	uxtb	r1, r4
 800495e:	4a04      	ldr	r2, [pc, #16]	; (8004970 <ssd1306_DrawPixel+0xb8>)
 8004960:	54d1      	strb	r1, [r2, r3]
 8004962:	e000      	b.n	8004966 <ssd1306_DrawPixel+0xae>
        return;
 8004964:	bf00      	nop
    }
}
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bc90      	pop	{r4, r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000398 	.word	0x20000398

08004974 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af00      	add	r7, sp, #0
 800497a:	4604      	mov	r4, r0
 800497c:	1d38      	adds	r0, r7, #4
 800497e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004982:	461a      	mov	r2, r3
 8004984:	4623      	mov	r3, r4
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	4613      	mov	r3, r2
 800498a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b1f      	cmp	r3, #31
 8004990:	d902      	bls.n	8004998 <ssd1306_WriteChar+0x24>
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b7e      	cmp	r3, #126	; 0x7e
 8004996:	d901      	bls.n	800499c <ssd1306_WriteChar+0x28>
        return 0;
 8004998:	2300      	movs	r3, #0
 800499a:	e06d      	b.n	8004a78 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800499c:	4b38      	ldr	r3, [pc, #224]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	793b      	ldrb	r3, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	2b82      	cmp	r3, #130	; 0x82
 80049a8:	dc06      	bgt.n	80049b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80049aa:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 80049ac:	885b      	ldrh	r3, [r3, #2]
 80049ae:	461a      	mov	r2, r3
 80049b0:	797b      	ldrb	r3, [r7, #5]
 80049b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	dd01      	ble.n	80049bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e05d      	b.n	8004a78 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e04c      	b.n	8004a5c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	3b20      	subs	r3, #32
 80049c8:	7979      	ldrb	r1, [r7, #5]
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4619      	mov	r1, r3
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	440b      	add	r3, r1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e034      	b.n	8004a4c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80049f2:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	b2d8      	uxtb	r0, r3
 8004a00:	4b1f      	ldr	r3, [pc, #124]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 8004a02:	885b      	ldrh	r3, [r3, #2]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	7bba      	ldrb	r2, [r7, #14]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f7ff ff51 	bl	80048b8 <ssd1306_DrawPixel>
 8004a16:	e016      	b.n	8004a46 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	b2d8      	uxtb	r0, r3
 8004a26:	4b16      	ldr	r3, [pc, #88]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 8004a28:	885b      	ldrh	r3, [r3, #2]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	b2d9      	uxtb	r1, r3
 8004a34:	7bbb      	ldrb	r3, [r7, #14]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	f7ff ff39 	bl	80048b8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
 8004a4c:	793b      	ldrb	r3, [r7, #4]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d3c5      	bcc.n	80049e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	797b      	ldrb	r3, [r7, #5]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d3ad      	bcc.n	80049c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8004a66:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 8004a68:	881a      	ldrh	r2, [r3, #0]
 8004a6a:	793b      	ldrb	r3, [r7, #4]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <ssd1306_WriteChar+0x10c>)
 8004a74:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3724      	adds	r7, #36	; 0x24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	200007a8 	.word	0x200007a8

08004a84 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	1d38      	adds	r0, r7, #4
 8004a8e:	e880 0006 	stmia.w	r0, {r1, r2}
 8004a92:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8004a94:	e012      	b.n	8004abc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	7818      	ldrb	r0, [r3, #0]
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	1d3a      	adds	r2, r7, #4
 8004a9e:	ca06      	ldmia	r2, {r1, r2}
 8004aa0:	f7ff ff68 	bl	8004974 <ssd1306_WriteChar>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d002      	beq.n	8004ab6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	e008      	b.n	8004ac8 <ssd1306_WriteString+0x44>
        }
        str++;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e8      	bne.n	8004a96 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460a      	mov	r2, r1
 8004ada:	71fb      	strb	r3, [r7, #7]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <ssd1306_SetCursor+0x2c>)
 8004ae6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004ae8:	79bb      	ldrb	r3, [r7, #6]
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <ssd1306_SetCursor+0x2c>)
 8004aee:	805a      	strh	r2, [r3, #2]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	200007a8 	.word	0x200007a8

08004b00 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004b0a:	2381      	movs	r3, #129	; 0x81
 8004b0c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fdcd 	bl	80046b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fdc9 	bl	80046b0 <ssd1306_WriteCommand>
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004b38:	23af      	movs	r3, #175	; 0xaf
 8004b3a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004b3c:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <ssd1306_SetDisplayOn+0x38>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	715a      	strb	r2, [r3, #5]
 8004b42:	e004      	b.n	8004b4e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004b44:	23ae      	movs	r3, #174	; 0xae
 8004b46:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004b48:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <ssd1306_SetDisplayOn+0x38>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fdad 	bl	80046b0 <ssd1306_WriteCommand>
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	200007a8 	.word	0x200007a8

08004b64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b64:	f7fe f924 	bl	8002db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b68:	480b      	ldr	r0, [pc, #44]	; (8004b98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004b6a:	490c      	ldr	r1, [pc, #48]	; (8004b9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004b6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b70:	e002      	b.n	8004b78 <LoopCopyDataInit>

08004b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b76:	3304      	adds	r3, #4

08004b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b7c:	d3f9      	bcc.n	8004b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004b80:	4c09      	ldr	r4, [pc, #36]	; (8004ba8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b84:	e001      	b.n	8004b8a <LoopFillZerobss>

08004b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b88:	3204      	adds	r2, #4

08004b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b8c:	d3fb      	bcc.n	8004b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b8e:	f003 fd35 	bl	80085fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b92:	f7fd fc8d 	bl	80024b0 <main>
  bx lr
 8004b96:	4770      	bx	lr
  ldr r0, =_sdata
 8004b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b9c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8004ba0:	0800c7f0 	.word	0x0800c7f0
  ldr r2, =_sbss
 8004ba4:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8004ba8:	200007b4 	.word	0x200007b4

08004bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004bac:	e7fe      	b.n	8004bac <ADC1_2_IRQHandler>
	...

08004bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_Init+0x28>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a07      	ldr	r2, [pc, #28]	; (8004bd8 <HAL_Init+0x28>)
 8004bba:	f043 0310 	orr.w	r3, r3, #16
 8004bbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bc0:	2003      	movs	r0, #3
 8004bc2:	f000 ffb3 	bl	8005b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bc6:	200f      	movs	r0, #15
 8004bc8:	f000 f808 	bl	8004bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bcc:	f7fd ff04 	bl	80029d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40022000 	.word	0x40022000

08004bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004be4:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_InitTick+0x54>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_InitTick+0x58>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	4619      	mov	r1, r3
 8004bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 ffcb 	bl	8005b96 <HAL_SYSTICK_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e00e      	b.n	8004c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b0f      	cmp	r3, #15
 8004c0e:	d80a      	bhi.n	8004c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c10:	2200      	movs	r2, #0
 8004c12:	6879      	ldr	r1, [r7, #4]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	f000 ff93 	bl	8005b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c1c:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <HAL_InitTick+0x5c>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	e000      	b.n	8004c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000020 	.word	0x20000020
 8004c34:	20000050 	.word	0x20000050
 8004c38:	2000004c 	.word	0x2000004c

08004c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_IncTick+0x1c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_IncTick+0x20>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a03      	ldr	r2, [pc, #12]	; (8004c5c <HAL_IncTick+0x20>)
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	20000050 	.word	0x20000050
 8004c5c:	200007b0 	.word	0x200007b0

08004c60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return uwTick;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_GetTick+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	200007b0 	.word	0x200007b0

08004c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7ff fff0 	bl	8004c60 <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d005      	beq.n	8004c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_Delay+0x44>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c9a:	bf00      	nop
 8004c9c:	f7ff ffe0 	bl	8004c60 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d8f7      	bhi.n	8004c9c <HAL_Delay+0x28>
  {
  }
}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20000050 	.word	0x20000050

08004cbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0ed      	b.n	8004eaa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fd feae 	bl	8002a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cf0:	f7ff ffb6 	bl	8004c60 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cf6:	e012      	b.n	8004d1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cf8:	f7ff ffb2 	bl	8004c60 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b0a      	cmp	r3, #10
 8004d04:	d90b      	bls.n	8004d1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2205      	movs	r2, #5
 8004d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e0c5      	b.n	8004eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0e5      	beq.n	8004cf8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0202 	bic.w	r2, r2, #2
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d3c:	f7ff ff90 	bl	8004c60 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d42:	e012      	b.n	8004d6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d44:	f7ff ff8c 	bl	8004c60 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b0a      	cmp	r3, #10
 8004d50:	d90b      	bls.n	8004d6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2205      	movs	r2, #5
 8004d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e09f      	b.n	8004eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7e1b      	ldrb	r3, [r3, #24]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d108      	bne.n	8004d92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	7e5b      	ldrb	r3, [r3, #25]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d108      	bne.n	8004dbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e007      	b.n	8004dcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7e9b      	ldrb	r3, [r3, #26]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d108      	bne.n	8004de6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0220 	orr.w	r2, r2, #32
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e007      	b.n	8004df6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0220 	bic.w	r2, r2, #32
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7edb      	ldrb	r3, [r3, #27]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d108      	bne.n	8004e10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0210 	bic.w	r2, r2, #16
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e007      	b.n	8004e20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0210 	orr.w	r2, r2, #16
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7f1b      	ldrb	r3, [r3, #28]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d108      	bne.n	8004e3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0208 	orr.w	r2, r2, #8
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e007      	b.n	8004e4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0208 	bic.w	r2, r2, #8
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7f5b      	ldrb	r3, [r3, #29]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d108      	bne.n	8004e64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0204 	orr.w	r2, r2, #4
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0204 	bic.w	r2, r2, #4
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	ea42 0103 	orr.w	r1, r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	1e5a      	subs	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b087      	sub	sp, #28
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ec8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d003      	beq.n	8004ed8 <HAL_CAN_ConfigFilter+0x26>
 8004ed0:	7cfb      	ldrb	r3, [r7, #19]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	f040 80aa 	bne.w	800502c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ede:	f043 0201 	orr.w	r2, r3, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	43db      	mvns	r3, r3
 8004f02:	401a      	ands	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d123      	bne.n	8004f5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	401a      	ands	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	3248      	adds	r2, #72	; 0x48
 8004f3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f50:	6979      	ldr	r1, [r7, #20]
 8004f52:	3348      	adds	r3, #72	; 0x48
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d122      	bne.n	8004fa8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3248      	adds	r2, #72	; 0x48
 8004f88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	3348      	adds	r3, #72	; 0x48
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d109      	bne.n	8004fc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	401a      	ands	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004fc2:	e007      	b.n	8004fd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004fee:	e007      	b.n	8005000 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d107      	bne.n	8005018 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	431a      	orrs	r2, r3
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800501e:	f023 0201 	bic.w	r2, r3, #1
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	e006      	b.n	800503a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d12e      	bne.n	80050b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0201 	bic.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005070:	f7ff fdf6 	bl	8004c60 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005076:	e012      	b.n	800509e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005078:	f7ff fdf2 	bl	8004c60 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b0a      	cmp	r3, #10
 8005084:	d90b      	bls.n	800509e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2205      	movs	r2, #5
 8005096:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e012      	b.n	80050c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e006      	b.n	80050c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
  }
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80050ea:	7ffb      	ldrb	r3, [r7, #31]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d003      	beq.n	80050f8 <HAL_CAN_AddTxMessage+0x2c>
 80050f0:	7ffb      	ldrb	r3, [r7, #31]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	f040 80ad 	bne.w	8005252 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10a      	bne.n	8005118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005108:	2b00      	cmp	r3, #0
 800510a:	d105      	bne.n	8005118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 8095 	beq.w	8005242 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	0e1b      	lsrs	r3, r3, #24
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005122:	2201      	movs	r2, #1
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10d      	bne.n	8005150 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	6809      	ldr	r1, [r1, #0]
 8005142:	431a      	orrs	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3318      	adds	r3, #24
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	440b      	add	r3, r1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e00f      	b.n	8005170 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800515a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005164:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	3318      	adds	r3, #24
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	440b      	add	r3, r1
 800516e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6819      	ldr	r1, [r3, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3318      	adds	r3, #24
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	440b      	add	r3, r1
 8005180:	3304      	adds	r3, #4
 8005182:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	7d1b      	ldrb	r3, [r3, #20]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d111      	bne.n	80051b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	3318      	adds	r3, #24
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	3304      	adds	r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6811      	ldr	r1, [r2, #0]
 80051a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	3318      	adds	r3, #24
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	440b      	add	r3, r1
 80051ac:	3304      	adds	r3, #4
 80051ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3307      	adds	r3, #7
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	061a      	lsls	r2, r3, #24
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3306      	adds	r3, #6
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3305      	adds	r3, #5
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	4313      	orrs	r3, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	3204      	adds	r2, #4
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	4610      	mov	r0, r2
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	6811      	ldr	r1, [r2, #0]
 80051d8:	ea43 0200 	orr.w	r2, r3, r0
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	440b      	add	r3, r1
 80051e2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80051e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3303      	adds	r3, #3
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	061a      	lsls	r2, r3, #24
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3302      	adds	r3, #2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3301      	adds	r3, #1
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	4313      	orrs	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	7812      	ldrb	r2, [r2, #0]
 8005208:	4610      	mov	r0, r2
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	ea43 0200 	orr.w	r2, r3, r0
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	440b      	add	r3, r1
 8005218:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800521c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	3318      	adds	r3, #24
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	6811      	ldr	r1, [r2, #0]
 8005230:	f043 0201 	orr.w	r2, r3, #1
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	3318      	adds	r3, #24
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	440b      	add	r3, r1
 800523c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	e00e      	b.n	8005260 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e006      	b.n	8005260 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	3724      	adds	r7, #36	; 0x24
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800527c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d002      	beq.n	800528a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005284:	7afb      	ldrb	r3, [r7, #11]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d11d      	bne.n	80052c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3301      	adds	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80052d2:	b480      	push	{r7}
 80052d4:	b087      	sub	sp, #28
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d003      	beq.n	80052f6 <HAL_CAN_GetRxMessage+0x24>
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f040 8103 	bne.w	80054fc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10e      	bne.n	800531a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d116      	bne.n	8005338 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e0f7      	b.n	800550a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d107      	bne.n	8005338 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0e8      	b.n	800550a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	331b      	adds	r3, #27
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	4413      	add	r3, r2
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0204 	and.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	331b      	adds	r3, #27
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	4413      	add	r3, r2
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	0d5b      	lsrs	r3, r3, #21
 8005366:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	e00b      	b.n	8005388 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	331b      	adds	r3, #27
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	4413      	add	r3, r2
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	08db      	lsrs	r3, r3, #3
 8005380:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	331b      	adds	r3, #27
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4413      	add	r3, r2
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0202 	and.w	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	331b      	adds	r3, #27
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4413      	add	r3, r2
 80053aa:	3304      	adds	r3, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2208      	movs	r2, #8
 80053ba:	611a      	str	r2, [r3, #16]
 80053bc:	e00b      	b.n	80053d6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	331b      	adds	r3, #27
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	3304      	adds	r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 020f 	and.w	r2, r3, #15
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	331b      	adds	r3, #27
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	3304      	adds	r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	0a1b      	lsrs	r3, r3, #8
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	331b      	adds	r3, #27
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4413      	add	r3, r2
 80053fa:	3304      	adds	r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	4413      	add	r3, r2
 8005426:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0a1a      	lsrs	r2, r3, #8
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	4413      	add	r3, r2
 8005440:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0c1a      	lsrs	r2, r3, #16
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	3302      	adds	r3, #2
 800544c:	b2d2      	uxtb	r2, r2
 800544e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	0e1a      	lsrs	r2, r3, #24
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	3303      	adds	r3, #3
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	3304      	adds	r3, #4
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	4413      	add	r3, r2
 800548c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	0a1a      	lsrs	r2, r3, #8
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	3305      	adds	r3, #5
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0c1a      	lsrs	r2, r3, #16
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	3306      	adds	r3, #6
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	4413      	add	r3, r2
 80054c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	0e1a      	lsrs	r2, r3, #24
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	3307      	adds	r3, #7
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0220 	orr.w	r2, r2, #32
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	e007      	b.n	80054f8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0220 	orr.w	r2, r2, #32
 80054f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	e006      	b.n	800550a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005524:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d002      	beq.n	8005532 <HAL_CAN_ActivateNotification+0x1e>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d109      	bne.n	8005546 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6959      	ldr	r1, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e006      	b.n	8005554 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d07c      	beq.n	800569e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d023      	beq.n	80055f6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f983 	bl	80058cc <HAL_CAN_TxMailbox0CompleteCallback>
 80055c6:	e016      	b.n	80055f6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055d8:	627b      	str	r3, [r7, #36]	; 0x24
 80055da:	e00c      	b.n	80055f6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
 80055ee:	e002      	b.n	80055f6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f986 	bl	8005902 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d024      	beq.n	800564a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005608:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f962 	bl	80058de <HAL_CAN_TxMailbox1CompleteCallback>
 800561a:	e016      	b.n	800564a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005622:	2b00      	cmp	r3, #0
 8005624:	d004      	beq.n	8005630 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
 800562e:	e00c      	b.n	800564a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
 8005642:	e002      	b.n	800564a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f965 	bl	8005914 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d024      	beq.n	800569e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800565c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f941 	bl	80058f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800566e:	e016      	b.n	800569e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d004      	beq.n	8005684 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	e00c      	b.n	800569e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
 8005696:	e002      	b.n	800569e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f944 	bl	8005926 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f003 0310 	and.w	r3, r3, #16
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2210      	movs	r2, #16
 80056c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d006      	beq.n	80056e4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2208      	movs	r2, #8
 80056dc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f92a 	bl	8005938 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7fb fc5b 	bl	8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f003 0310 	and.w	r3, r3, #16
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800571c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2210      	movs	r2, #16
 8005724:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2208      	movs	r2, #8
 8005740:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f90a 	bl	800595c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f8f2 	bl	800594a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00b      	beq.n	8005788 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d006      	beq.n	8005788 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2210      	movs	r2, #16
 8005780:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f8f3 	bl	800596e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f003 0308 	and.w	r3, r3, #8
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2208      	movs	r2, #8
 80057a2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8eb 	bl	8005980 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d07b      	beq.n	80058ac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d072      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d008      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f043 0302 	orr.w	r3, r3, #2
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	f043 0304 	orr.w	r3, r3, #4
 8005810:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005818:	2b00      	cmp	r3, #0
 800581a:	d043      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	d03e      	beq.n	80058a4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800582c:	2b60      	cmp	r3, #96	; 0x60
 800582e:	d02b      	beq.n	8005888 <HAL_CAN_IRQHandler+0x32a>
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d82e      	bhi.n	8005892 <HAL_CAN_IRQHandler+0x334>
 8005834:	2b50      	cmp	r3, #80	; 0x50
 8005836:	d022      	beq.n	800587e <HAL_CAN_IRQHandler+0x320>
 8005838:	2b50      	cmp	r3, #80	; 0x50
 800583a:	d82a      	bhi.n	8005892 <HAL_CAN_IRQHandler+0x334>
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d019      	beq.n	8005874 <HAL_CAN_IRQHandler+0x316>
 8005840:	2b40      	cmp	r3, #64	; 0x40
 8005842:	d826      	bhi.n	8005892 <HAL_CAN_IRQHandler+0x334>
 8005844:	2b30      	cmp	r3, #48	; 0x30
 8005846:	d010      	beq.n	800586a <HAL_CAN_IRQHandler+0x30c>
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d822      	bhi.n	8005892 <HAL_CAN_IRQHandler+0x334>
 800584c:	2b10      	cmp	r3, #16
 800584e:	d002      	beq.n	8005856 <HAL_CAN_IRQHandler+0x2f8>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d005      	beq.n	8005860 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005854:	e01d      	b.n	8005892 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	f043 0308 	orr.w	r3, r3, #8
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800585e:	e019      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	f043 0310 	orr.w	r3, r3, #16
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005868:	e014      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	f043 0320 	orr.w	r3, r3, #32
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005872:	e00f      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800587c:	e00a      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005886:	e005      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005890:	e000      	b.n	8005894 <HAL_CAN_IRQHandler+0x336>
            break;
 8005892:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80058a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2204      	movs	r2, #4
 80058aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fb fb96 	bl	8000ff0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80058c4:	bf00      	nop
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr

08005914 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	bc80      	pop	{r7}
 8005948:	4770      	bx	lr

0800594a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	bc80      	pop	{r7}
 800595a:	4770      	bx	lr

0800595c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	bc80      	pop	{r7}
 800596c:	4770      	bx	lr

0800596e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f003 0307 	and.w	r3, r3, #7
 80059a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <__NVIC_SetPriorityGrouping+0x44>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059c6:	4a04      	ldr	r2, [pc, #16]	; (80059d8 <__NVIC_SetPriorityGrouping+0x44>)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	60d3      	str	r3, [r2, #12]
}
 80059cc:	bf00      	nop
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <__NVIC_GetPriorityGrouping+0x18>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	0a1b      	lsrs	r3, r3, #8
 80059e6:	f003 0307 	and.w	r3, r3, #7
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000ed00 	.word	0xe000ed00

080059f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	db0b      	blt.n	8005a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f003 021f 	and.w	r2, r3, #31
 8005a10:	4906      	ldr	r1, [pc, #24]	; (8005a2c <__NVIC_EnableIRQ+0x34>)
 8005a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2001      	movs	r0, #1
 8005a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	e000e100 	.word	0xe000e100

08005a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	6039      	str	r1, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	db0a      	blt.n	8005a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	490c      	ldr	r1, [pc, #48]	; (8005a7c <__NVIC_SetPriority+0x4c>)
 8005a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4e:	0112      	lsls	r2, r2, #4
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	440b      	add	r3, r1
 8005a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a58:	e00a      	b.n	8005a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4908      	ldr	r1, [pc, #32]	; (8005a80 <__NVIC_SetPriority+0x50>)
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	3b04      	subs	r3, #4
 8005a68:	0112      	lsls	r2, r2, #4
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	761a      	strb	r2, [r3, #24]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	e000e100 	.word	0xe000e100
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f1c3 0307 	rsb	r3, r3, #7
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	bf28      	it	cs
 8005aa2:	2304      	movcs	r3, #4
 8005aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	2b06      	cmp	r3, #6
 8005aac:	d902      	bls.n	8005ab4 <NVIC_EncodePriority+0x30>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3b03      	subs	r3, #3
 8005ab2:	e000      	b.n	8005ab6 <NVIC_EncodePriority+0x32>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	43da      	mvns	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005acc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	43d9      	mvns	r1, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005adc:	4313      	orrs	r3, r2
         );
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3724      	adds	r7, #36	; 0x24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af8:	d301      	bcc.n	8005afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005afa:	2301      	movs	r3, #1
 8005afc:	e00f      	b.n	8005b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005afe:	4a0a      	ldr	r2, [pc, #40]	; (8005b28 <SysTick_Config+0x40>)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b06:	210f      	movs	r1, #15
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	f7ff ff90 	bl	8005a30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b10:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <SysTick_Config+0x40>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <SysTick_Config+0x40>)
 8005b18:	2207      	movs	r2, #7
 8005b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	e000e010 	.word	0xe000e010

08005b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ff2d 	bl	8005994 <__NVIC_SetPriorityGrouping>
}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	4603      	mov	r3, r0
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b54:	f7ff ff42 	bl	80059dc <__NVIC_GetPriorityGrouping>
 8005b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	6978      	ldr	r0, [r7, #20]
 8005b60:	f7ff ff90 	bl	8005a84 <NVIC_EncodePriority>
 8005b64:	4602      	mov	r2, r0
 8005b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff ff5f 	bl	8005a30 <__NVIC_SetPriority>
}
 8005b72:	bf00      	nop
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	4603      	mov	r3, r0
 8005b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ff35 	bl	80059f8 <__NVIC_EnableIRQ>
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff ffa2 	bl	8005ae8 <SysTick_Config>
 8005ba4:	4603      	mov	r3, r0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e043      	b.n	8005c4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <HAL_DMA_Init+0xa8>)
 8005bce:	4413      	add	r3, r2
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_DMA_Init+0xac>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	009a      	lsls	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <HAL_DMA_Init+0xb0>)
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005bfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr
 8005c58:	bffdfff8 	.word	0xbffdfff8
 8005c5c:	cccccccd 	.word	0xcccccccd
 8005c60:	40020000 	.word	0x40020000

08005c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_Start_IT+0x20>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e04b      	b.n	8005d1c <HAL_DMA_Start_IT+0xb8>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d13a      	bne.n	8005d0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f9eb 	bl	8006098 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f042 020e 	orr.w	r2, r2, #14
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e00f      	b.n	8005cfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 0204 	bic.w	r2, r2, #4
 8005cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 020a 	orr.w	r2, r2, #10
 8005cfa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e005      	b.n	8005d1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
 8005d18:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d008      	beq.n	8005d4e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e020      	b.n	8005d90 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 020e 	bic.w	r2, r2, #14
 8005d5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	2101      	movs	r1, #1
 8005d78:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr
	...

08005d9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d005      	beq.n	8005dc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2204      	movs	r2, #4
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
 8005dbe:	e051      	b.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 020e 	bic.w	r2, r2, #14
 8005dce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0201 	bic.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <HAL_DMA_Abort_IT+0xd4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d029      	beq.n	8005e3e <HAL_DMA_Abort_IT+0xa2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_DMA_Abort_IT+0xd8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_DMA_Abort_IT+0x9e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a1f      	ldr	r2, [pc, #124]	; (8005e78 <HAL_DMA_Abort_IT+0xdc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA_Abort_IT+0x98>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <HAL_DMA_Abort_IT+0xe0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d012      	beq.n	8005e2e <HAL_DMA_Abort_IT+0x92>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1c      	ldr	r2, [pc, #112]	; (8005e80 <HAL_DMA_Abort_IT+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00a      	beq.n	8005e28 <HAL_DMA_Abort_IT+0x8c>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	; (8005e84 <HAL_DMA_Abort_IT+0xe8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d102      	bne.n	8005e22 <HAL_DMA_Abort_IT+0x86>
 8005e1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005e20:	e00e      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e26:	e00b      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e2c:	e008      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e32:	e005      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e38:	e002      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e3a:	2310      	movs	r3, #16
 8005e3c:	e000      	b.n	8005e40 <HAL_DMA_Abort_IT+0xa4>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	4a11      	ldr	r2, [pc, #68]	; (8005e88 <HAL_DMA_Abort_IT+0xec>)
 8005e42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
    } 
  }
  return status;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40020008 	.word	0x40020008
 8005e74:	4002001c 	.word	0x4002001c
 8005e78:	40020030 	.word	0x40020030
 8005e7c:	40020044 	.word	0x40020044
 8005e80:	40020058 	.word	0x40020058
 8005e84:	4002006c 	.word	0x4002006c
 8005e88:	40020000 	.word	0x40020000

08005e8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d04f      	beq.n	8005f54 <HAL_DMA_IRQHandler+0xc8>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d04a      	beq.n	8005f54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0320 	and.w	r3, r3, #32
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a66      	ldr	r2, [pc, #408]	; (800607c <HAL_DMA_IRQHandler+0x1f0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d029      	beq.n	8005f3a <HAL_DMA_IRQHandler+0xae>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a65      	ldr	r2, [pc, #404]	; (8006080 <HAL_DMA_IRQHandler+0x1f4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_DMA_IRQHandler+0xaa>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a63      	ldr	r2, [pc, #396]	; (8006084 <HAL_DMA_IRQHandler+0x1f8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01a      	beq.n	8005f30 <HAL_DMA_IRQHandler+0xa4>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a62      	ldr	r2, [pc, #392]	; (8006088 <HAL_DMA_IRQHandler+0x1fc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d012      	beq.n	8005f2a <HAL_DMA_IRQHandler+0x9e>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a60      	ldr	r2, [pc, #384]	; (800608c <HAL_DMA_IRQHandler+0x200>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00a      	beq.n	8005f24 <HAL_DMA_IRQHandler+0x98>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a5f      	ldr	r2, [pc, #380]	; (8006090 <HAL_DMA_IRQHandler+0x204>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d102      	bne.n	8005f1e <HAL_DMA_IRQHandler+0x92>
 8005f18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f1c:	e00e      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f22:	e00b      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f28:	e008      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f2e:	e005      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f34:	e002      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	e000      	b.n	8005f3c <HAL_DMA_IRQHandler+0xb0>
 8005f3a:	2304      	movs	r3, #4
 8005f3c:	4a55      	ldr	r2, [pc, #340]	; (8006094 <HAL_DMA_IRQHandler+0x208>)
 8005f3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8094 	beq.w	8006072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005f52:	e08e      	b.n	8006072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	2202      	movs	r2, #2
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d056      	beq.n	8006012 <HAL_DMA_IRQHandler+0x186>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d051      	beq.n	8006012 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10b      	bne.n	8005f94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 020a 	bic.w	r2, r2, #10
 8005f8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <HAL_DMA_IRQHandler+0x1f0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d029      	beq.n	8005ff2 <HAL_DMA_IRQHandler+0x166>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a37      	ldr	r2, [pc, #220]	; (8006080 <HAL_DMA_IRQHandler+0x1f4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_DMA_IRQHandler+0x162>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a35      	ldr	r2, [pc, #212]	; (8006084 <HAL_DMA_IRQHandler+0x1f8>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01a      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x15c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a34      	ldr	r2, [pc, #208]	; (8006088 <HAL_DMA_IRQHandler+0x1fc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d012      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x156>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a32      	ldr	r2, [pc, #200]	; (800608c <HAL_DMA_IRQHandler+0x200>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00a      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x150>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a31      	ldr	r2, [pc, #196]	; (8006090 <HAL_DMA_IRQHandler+0x204>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d102      	bne.n	8005fd6 <HAL_DMA_IRQHandler+0x14a>
 8005fd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005fd4:	e00e      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fda:	e00b      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fe0:	e008      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fe6:	e005      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fec:	e002      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005fee:	2320      	movs	r3, #32
 8005ff0:	e000      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x168>
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <HAL_DMA_IRQHandler+0x208>)
 8005ff6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	2b00      	cmp	r3, #0
 8006006:	d034      	beq.n	8006072 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006010:	e02f      	b.n	8006072 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	2208      	movs	r2, #8
 8006018:	409a      	lsls	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d028      	beq.n	8006074 <HAL_DMA_IRQHandler+0x1e8>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d023      	beq.n	8006074 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020e 	bic.w	r2, r2, #14
 800603a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	2101      	movs	r1, #1
 8006046:	fa01 f202 	lsl.w	r2, r1, r2
 800604a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	4798      	blx	r3
    }
  }
  return;
 8006072:	bf00      	nop
 8006074:	bf00      	nop
}
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40020008 	.word	0x40020008
 8006080:	4002001c 	.word	0x4002001c
 8006084:	40020030 	.word	0x40020030
 8006088:	40020044 	.word	0x40020044
 800608c:	40020058 	.word	0x40020058
 8006090:	4002006c 	.word	0x4002006c
 8006094:	40020000 	.word	0x40020000

08006098 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2101      	movs	r1, #1
 80060b0:	fa01 f202 	lsl.w	r2, r1, r2
 80060b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b10      	cmp	r3, #16
 80060c4:	d108      	bne.n	80060d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060d6:	e007      	b.n	80060e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	60da      	str	r2, [r3, #12]
}
 80060e8:	bf00      	nop
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bc80      	pop	{r7}
 80060f0:	4770      	bx	lr
	...

080060f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b08b      	sub	sp, #44	; 0x2c
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060fe:	2300      	movs	r3, #0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006102:	2300      	movs	r3, #0
 8006104:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006106:	e169      	b.n	80063dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006108:	2201      	movs	r2, #1
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	429a      	cmp	r2, r3
 8006122:	f040 8158 	bne.w	80063d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4a9a      	ldr	r2, [pc, #616]	; (8006394 <HAL_GPIO_Init+0x2a0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d05e      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
 8006130:	4a98      	ldr	r2, [pc, #608]	; (8006394 <HAL_GPIO_Init+0x2a0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d875      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 8006136:	4a98      	ldr	r2, [pc, #608]	; (8006398 <HAL_GPIO_Init+0x2a4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d058      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
 800613c:	4a96      	ldr	r2, [pc, #600]	; (8006398 <HAL_GPIO_Init+0x2a4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d86f      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 8006142:	4a96      	ldr	r2, [pc, #600]	; (800639c <HAL_GPIO_Init+0x2a8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d052      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
 8006148:	4a94      	ldr	r2, [pc, #592]	; (800639c <HAL_GPIO_Init+0x2a8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d869      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 800614e:	4a94      	ldr	r2, [pc, #592]	; (80063a0 <HAL_GPIO_Init+0x2ac>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d04c      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
 8006154:	4a92      	ldr	r2, [pc, #584]	; (80063a0 <HAL_GPIO_Init+0x2ac>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d863      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 800615a:	4a92      	ldr	r2, [pc, #584]	; (80063a4 <HAL_GPIO_Init+0x2b0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d046      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
 8006160:	4a90      	ldr	r2, [pc, #576]	; (80063a4 <HAL_GPIO_Init+0x2b0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d85d      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 8006166:	2b12      	cmp	r3, #18
 8006168:	d82a      	bhi.n	80061c0 <HAL_GPIO_Init+0xcc>
 800616a:	2b12      	cmp	r3, #18
 800616c:	d859      	bhi.n	8006222 <HAL_GPIO_Init+0x12e>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <HAL_GPIO_Init+0x80>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	080061ef 	.word	0x080061ef
 8006178:	080061c9 	.word	0x080061c9
 800617c:	080061db 	.word	0x080061db
 8006180:	0800621d 	.word	0x0800621d
 8006184:	08006223 	.word	0x08006223
 8006188:	08006223 	.word	0x08006223
 800618c:	08006223 	.word	0x08006223
 8006190:	08006223 	.word	0x08006223
 8006194:	08006223 	.word	0x08006223
 8006198:	08006223 	.word	0x08006223
 800619c:	08006223 	.word	0x08006223
 80061a0:	08006223 	.word	0x08006223
 80061a4:	08006223 	.word	0x08006223
 80061a8:	08006223 	.word	0x08006223
 80061ac:	08006223 	.word	0x08006223
 80061b0:	08006223 	.word	0x08006223
 80061b4:	08006223 	.word	0x08006223
 80061b8:	080061d1 	.word	0x080061d1
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	4a79      	ldr	r2, [pc, #484]	; (80063a8 <HAL_GPIO_Init+0x2b4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80061c6:	e02c      	b.n	8006222 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	623b      	str	r3, [r7, #32]
          break;
 80061ce:	e029      	b.n	8006224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	3304      	adds	r3, #4
 80061d6:	623b      	str	r3, [r7, #32]
          break;
 80061d8:	e024      	b.n	8006224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	3308      	adds	r3, #8
 80061e0:	623b      	str	r3, [r7, #32]
          break;
 80061e2:	e01f      	b.n	8006224 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	330c      	adds	r3, #12
 80061ea:	623b      	str	r3, [r7, #32]
          break;
 80061ec:	e01a      	b.n	8006224 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d102      	bne.n	80061fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80061f6:	2304      	movs	r3, #4
 80061f8:	623b      	str	r3, [r7, #32]
          break;
 80061fa:	e013      	b.n	8006224 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d105      	bne.n	8006210 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006204:	2308      	movs	r3, #8
 8006206:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	611a      	str	r2, [r3, #16]
          break;
 800620e:	e009      	b.n	8006224 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006210:	2308      	movs	r3, #8
 8006212:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	615a      	str	r2, [r3, #20]
          break;
 800621a:	e003      	b.n	8006224 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800621c:	2300      	movs	r3, #0
 800621e:	623b      	str	r3, [r7, #32]
          break;
 8006220:	e000      	b.n	8006224 <HAL_GPIO_Init+0x130>
          break;
 8006222:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2bff      	cmp	r3, #255	; 0xff
 8006228:	d801      	bhi.n	800622e <HAL_GPIO_Init+0x13a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	e001      	b.n	8006232 <HAL_GPIO_Init+0x13e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3304      	adds	r3, #4
 8006232:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2bff      	cmp	r3, #255	; 0xff
 8006238:	d802      	bhi.n	8006240 <HAL_GPIO_Init+0x14c>
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	e002      	b.n	8006246 <HAL_GPIO_Init+0x152>
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	3b08      	subs	r3, #8
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	210f      	movs	r1, #15
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	fa01 f303 	lsl.w	r3, r1, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80b1 	beq.w	80063d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006274:	4b4d      	ldr	r3, [pc, #308]	; (80063ac <HAL_GPIO_Init+0x2b8>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	4a4c      	ldr	r2, [pc, #304]	; (80063ac <HAL_GPIO_Init+0x2b8>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6193      	str	r3, [r2, #24]
 8006280:	4b4a      	ldr	r3, [pc, #296]	; (80063ac <HAL_GPIO_Init+0x2b8>)
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800628c:	4a48      	ldr	r2, [pc, #288]	; (80063b0 <HAL_GPIO_Init+0x2bc>)
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	3302      	adds	r3, #2
 8006294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006298:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	220f      	movs	r2, #15
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a40      	ldr	r2, [pc, #256]	; (80063b4 <HAL_GPIO_Init+0x2c0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d013      	beq.n	80062e0 <HAL_GPIO_Init+0x1ec>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a3f      	ldr	r2, [pc, #252]	; (80063b8 <HAL_GPIO_Init+0x2c4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00d      	beq.n	80062dc <HAL_GPIO_Init+0x1e8>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <HAL_GPIO_Init+0x2c8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d007      	beq.n	80062d8 <HAL_GPIO_Init+0x1e4>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a3d      	ldr	r2, [pc, #244]	; (80063c0 <HAL_GPIO_Init+0x2cc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d101      	bne.n	80062d4 <HAL_GPIO_Init+0x1e0>
 80062d0:	2303      	movs	r3, #3
 80062d2:	e006      	b.n	80062e2 <HAL_GPIO_Init+0x1ee>
 80062d4:	2304      	movs	r3, #4
 80062d6:	e004      	b.n	80062e2 <HAL_GPIO_Init+0x1ee>
 80062d8:	2302      	movs	r3, #2
 80062da:	e002      	b.n	80062e2 <HAL_GPIO_Init+0x1ee>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_GPIO_Init+0x1ee>
 80062e0:	2300      	movs	r3, #0
 80062e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e4:	f002 0203 	and.w	r2, r2, #3
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	4093      	lsls	r3, r2
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80062f2:	492f      	ldr	r1, [pc, #188]	; (80063b0 <HAL_GPIO_Init+0x2bc>)
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	089b      	lsrs	r3, r3, #2
 80062f8:	3302      	adds	r3, #2
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d006      	beq.n	800631a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	492c      	ldr	r1, [pc, #176]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	4313      	orrs	r3, r2
 8006316:	608b      	str	r3, [r1, #8]
 8006318:	e006      	b.n	8006328 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800631a:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	43db      	mvns	r3, r3
 8006322:	4928      	ldr	r1, [pc, #160]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006324:	4013      	ands	r3, r2
 8006326:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006334:	4b23      	ldr	r3, [pc, #140]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	4922      	ldr	r1, [pc, #136]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	4313      	orrs	r3, r2
 800633e:	60cb      	str	r3, [r1, #12]
 8006340:	e006      	b.n	8006350 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	43db      	mvns	r3, r3
 800634a:	491e      	ldr	r1, [pc, #120]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800634c:	4013      	ands	r3, r2
 800634e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	4918      	ldr	r1, [pc, #96]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
 8006368:	e006      	b.n	8006378 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	43db      	mvns	r3, r3
 8006372:	4914      	ldr	r1, [pc, #80]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006374:	4013      	ands	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d021      	beq.n	80063c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006384:	4b0f      	ldr	r3, [pc, #60]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	490e      	ldr	r1, [pc, #56]	; (80063c4 <HAL_GPIO_Init+0x2d0>)
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	4313      	orrs	r3, r2
 800638e:	600b      	str	r3, [r1, #0]
 8006390:	e021      	b.n	80063d6 <HAL_GPIO_Init+0x2e2>
 8006392:	bf00      	nop
 8006394:	10320000 	.word	0x10320000
 8006398:	10310000 	.word	0x10310000
 800639c:	10220000 	.word	0x10220000
 80063a0:	10210000 	.word	0x10210000
 80063a4:	10120000 	.word	0x10120000
 80063a8:	10110000 	.word	0x10110000
 80063ac:	40021000 	.word	0x40021000
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40010800 	.word	0x40010800
 80063b8:	40010c00 	.word	0x40010c00
 80063bc:	40011000 	.word	0x40011000
 80063c0:	40011400 	.word	0x40011400
 80063c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_GPIO_Init+0x304>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	4909      	ldr	r1, [pc, #36]	; (80063f8 <HAL_GPIO_Init+0x304>)
 80063d2:	4013      	ands	r3, r2
 80063d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	3301      	adds	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f47f ae8e 	bne.w	8006108 <HAL_GPIO_Init+0x14>
  }
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	372c      	adds	r7, #44	; 0x2c
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr
 80063f8:	40010400 	.word	0x40010400

080063fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	887b      	ldrh	r3, [r7, #2]
 800640e:	4013      	ands	r3, r2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
 8006418:	e001      	b.n	800641e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800641e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	bc80      	pop	{r7}
 8006428:	4770      	bx	lr

0800642a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	807b      	strh	r3, [r7, #2]
 8006436:	4613      	mov	r3, r2
 8006438:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800643a:	787b      	ldrb	r3, [r7, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006440:	887a      	ldrh	r2, [r7, #2]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006446:	e003      	b.n	8006450 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	041a      	lsls	r2, r3, #16
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	611a      	str	r2, [r3, #16]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
	...

0800645c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e272      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8087 	beq.w	800658a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800647c:	4b92      	ldr	r3, [pc, #584]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 030c 	and.w	r3, r3, #12
 8006484:	2b04      	cmp	r3, #4
 8006486:	d00c      	beq.n	80064a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006488:	4b8f      	ldr	r3, [pc, #572]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 030c 	and.w	r3, r3, #12
 8006490:	2b08      	cmp	r3, #8
 8006492:	d112      	bne.n	80064ba <HAL_RCC_OscConfig+0x5e>
 8006494:	4b8c      	ldr	r3, [pc, #560]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d10b      	bne.n	80064ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a2:	4b89      	ldr	r3, [pc, #548]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d06c      	beq.n	8006588 <HAL_RCC_OscConfig+0x12c>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d168      	bne.n	8006588 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e24c      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d106      	bne.n	80064d2 <HAL_RCC_OscConfig+0x76>
 80064c4:	4b80      	ldr	r3, [pc, #512]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a7f      	ldr	r2, [pc, #508]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e02e      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x98>
 80064da:	4b7b      	ldr	r3, [pc, #492]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a7a      	ldr	r2, [pc, #488]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b78      	ldr	r3, [pc, #480]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a77      	ldr	r2, [pc, #476]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e01d      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0xbc>
 80064fe:	4b72      	ldr	r3, [pc, #456]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a71      	ldr	r2, [pc, #452]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b6f      	ldr	r3, [pc, #444]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a6e      	ldr	r2, [pc, #440]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0xd4>
 8006518:	4b6b      	ldr	r3, [pc, #428]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a6a      	ldr	r2, [pc, #424]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800651e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b68      	ldr	r3, [pc, #416]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a67      	ldr	r2, [pc, #412]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800652a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800652e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d013      	beq.n	8006560 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7fe fb92 	bl	8004c60 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fe fb8e 	bl	8004c60 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	; 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e200      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006552:	4b5d      	ldr	r3, [pc, #372]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0xe4>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fe fb7e 	bl	8004c60 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006568:	f7fe fb7a 	bl	8004c60 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e1ec      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800657a:	4b53      	ldr	r3, [pc, #332]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x10c>
 8006586:	e000      	b.n	800658a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d063      	beq.n	800665e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006596:	4b4c      	ldr	r3, [pc, #304]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065a2:	4b49      	ldr	r3, [pc, #292]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d11c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x18c>
 80065ae:	4b46      	ldr	r3, [pc, #280]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d116      	bne.n	80065e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ba:	4b43      	ldr	r3, [pc, #268]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_RCC_OscConfig+0x176>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d001      	beq.n	80065d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e1c0      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d2:	4b3d      	ldr	r3, [pc, #244]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4939      	ldr	r1, [pc, #228]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e6:	e03a      	b.n	800665e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d020      	beq.n	8006632 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065f0:	4b36      	ldr	r3, [pc, #216]	; (80066cc <HAL_RCC_OscConfig+0x270>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f6:	f7fe fb33 	bl	8004c60 <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065fe:	f7fe fb2f 	bl	8004c60 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e1a1      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006610:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f0      	beq.n	80065fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661c:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4927      	ldr	r1, [pc, #156]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]
 8006630:	e015      	b.n	800665e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006632:	4b26      	ldr	r3, [pc, #152]	; (80066cc <HAL_RCC_OscConfig+0x270>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006638:	f7fe fb12 	bl	8004c60 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006640:	f7fe fb0e 	bl	8004c60 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e180      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006652:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d03a      	beq.n	80066e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d019      	beq.n	80066a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <HAL_RCC_OscConfig+0x274>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006678:	f7fe faf2 	bl	8004c60 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006680:	f7fe faee 	bl	8004c60 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e160      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <HAL_RCC_OscConfig+0x26c>)
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0f0      	beq.n	8006680 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800669e:	2001      	movs	r0, #1
 80066a0:	f000 face 	bl	8006c40 <RCC_Delay>
 80066a4:	e01c      	b.n	80066e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <HAL_RCC_OscConfig+0x274>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ac:	f7fe fad8 	bl	8004c60 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b2:	e00f      	b.n	80066d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b4:	f7fe fad4 	bl	8004c60 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d908      	bls.n	80066d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e146      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	42420000 	.word	0x42420000
 80066d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d4:	4b92      	ldr	r3, [pc, #584]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e9      	bne.n	80066b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 80a6 	beq.w	800683a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ee:	2300      	movs	r3, #0
 80066f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f2:	4b8b      	ldr	r3, [pc, #556]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066fe:	4b88      	ldr	r3, [pc, #544]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	4a87      	ldr	r2, [pc, #540]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006708:	61d3      	str	r3, [r2, #28]
 800670a:	4b85      	ldr	r3, [pc, #532]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006716:	2301      	movs	r3, #1
 8006718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671a:	4b82      	ldr	r3, [pc, #520]	; (8006924 <HAL_RCC_OscConfig+0x4c8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006722:	2b00      	cmp	r3, #0
 8006724:	d118      	bne.n	8006758 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006726:	4b7f      	ldr	r3, [pc, #508]	; (8006924 <HAL_RCC_OscConfig+0x4c8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a7e      	ldr	r2, [pc, #504]	; (8006924 <HAL_RCC_OscConfig+0x4c8>)
 800672c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006732:	f7fe fa95 	bl	8004c60 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006738:	e008      	b.n	800674c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800673a:	f7fe fa91 	bl	8004c60 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	2b64      	cmp	r3, #100	; 0x64
 8006746:	d901      	bls.n	800674c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e103      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674c:	4b75      	ldr	r3, [pc, #468]	; (8006924 <HAL_RCC_OscConfig+0x4c8>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0f0      	beq.n	800673a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d106      	bne.n	800676e <HAL_RCC_OscConfig+0x312>
 8006760:	4b6f      	ldr	r3, [pc, #444]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4a6e      	ldr	r2, [pc, #440]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006766:	f043 0301 	orr.w	r3, r3, #1
 800676a:	6213      	str	r3, [r2, #32]
 800676c:	e02d      	b.n	80067ca <HAL_RCC_OscConfig+0x36e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10c      	bne.n	8006790 <HAL_RCC_OscConfig+0x334>
 8006776:	4b6a      	ldr	r3, [pc, #424]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	4a69      	ldr	r2, [pc, #420]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	6213      	str	r3, [r2, #32]
 8006782:	4b67      	ldr	r3, [pc, #412]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	4a66      	ldr	r2, [pc, #408]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	6213      	str	r3, [r2, #32]
 800678e:	e01c      	b.n	80067ca <HAL_RCC_OscConfig+0x36e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b05      	cmp	r3, #5
 8006796:	d10c      	bne.n	80067b2 <HAL_RCC_OscConfig+0x356>
 8006798:	4b61      	ldr	r3, [pc, #388]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	4a60      	ldr	r2, [pc, #384]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800679e:	f043 0304 	orr.w	r3, r3, #4
 80067a2:	6213      	str	r3, [r2, #32]
 80067a4:	4b5e      	ldr	r3, [pc, #376]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	4a5d      	ldr	r2, [pc, #372]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	6213      	str	r3, [r2, #32]
 80067b0:	e00b      	b.n	80067ca <HAL_RCC_OscConfig+0x36e>
 80067b2:	4b5b      	ldr	r3, [pc, #364]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4a5a      	ldr	r2, [pc, #360]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	6213      	str	r3, [r2, #32]
 80067be:	4b58      	ldr	r3, [pc, #352]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067c4:	f023 0304 	bic.w	r3, r3, #4
 80067c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d015      	beq.n	80067fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d2:	f7fe fa45 	bl	8004c60 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067da:	f7fe fa41 	bl	8004c60 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d901      	bls.n	80067f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e0b1      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f0:	4b4b      	ldr	r3, [pc, #300]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0ee      	beq.n	80067da <HAL_RCC_OscConfig+0x37e>
 80067fc:	e014      	b.n	8006828 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067fe:	f7fe fa2f 	bl	8004c60 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006804:	e00a      	b.n	800681c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006806:	f7fe fa2b 	bl	8004c60 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	f241 3288 	movw	r2, #5000	; 0x1388
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e09b      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800681c:	4b40      	ldr	r3, [pc, #256]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1ee      	bne.n	8006806 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d105      	bne.n	800683a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800682e:	4b3c      	ldr	r3, [pc, #240]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	4a3b      	ldr	r2, [pc, #236]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006838:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8087 	beq.w	8006952 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006844:	4b36      	ldr	r3, [pc, #216]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b08      	cmp	r3, #8
 800684e:	d061      	beq.n	8006914 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d146      	bne.n	80068e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <HAL_RCC_OscConfig+0x4cc>)
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800685e:	f7fe f9ff 	bl	8004c60 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006866:	f7fe f9fb 	bl	8004c60 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e06d      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006878:	4b29      	ldr	r3, [pc, #164]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1f0      	bne.n	8006866 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800688c:	d108      	bne.n	80068a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800688e:	4b24      	ldr	r3, [pc, #144]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	4921      	ldr	r1, [pc, #132]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 800689c:	4313      	orrs	r3, r2
 800689e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068a0:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a19      	ldr	r1, [r3, #32]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	430b      	orrs	r3, r1
 80068b2:	491b      	ldr	r1, [pc, #108]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068b8:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_RCC_OscConfig+0x4cc>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068be:	f7fe f9cf 	bl	8004c60 <HAL_GetTick>
 80068c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c6:	f7fe f9cb 	bl	8004c60 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e03d      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_OscConfig+0x46a>
 80068e4:	e035      	b.n	8006952 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_RCC_OscConfig+0x4cc>)
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ec:	f7fe f9b8 	bl	8004c60 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f4:	f7fe f9b4 	bl	8004c60 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e026      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006906:	4b06      	ldr	r3, [pc, #24]	; (8006920 <HAL_RCC_OscConfig+0x4c4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1f0      	bne.n	80068f4 <HAL_RCC_OscConfig+0x498>
 8006912:	e01e      	b.n	8006952 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e019      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
 8006928:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800692c:	4b0b      	ldr	r3, [pc, #44]	; (800695c <HAL_RCC_OscConfig+0x500>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	429a      	cmp	r2, r3
 800693e:	d106      	bne.n	800694e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694a:	429a      	cmp	r2, r3
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40021000 	.word	0x40021000

08006960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0d0      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006974:	4b6a      	ldr	r3, [pc, #424]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d910      	bls.n	80069a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006982:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f023 0207 	bic.w	r2, r3, #7
 800698a:	4965      	ldr	r1, [pc, #404]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	4313      	orrs	r3, r2
 8006990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006992:	4b63      	ldr	r3, [pc, #396]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d001      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0b8      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d020      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069bc:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4a58      	ldr	r2, [pc, #352]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0308 	and.w	r3, r3, #8
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069d4:	4b53      	ldr	r3, [pc, #332]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a52      	ldr	r2, [pc, #328]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069e0:	4b50      	ldr	r3, [pc, #320]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	494d      	ldr	r1, [pc, #308]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d040      	beq.n	8006a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a06:	4b47      	ldr	r3, [pc, #284]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d115      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e07f      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a1e:	4b41      	ldr	r3, [pc, #260]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d109      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e073      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2e:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e06b      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a3e:	4b39      	ldr	r3, [pc, #228]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f023 0203 	bic.w	r2, r3, #3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	4936      	ldr	r1, [pc, #216]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a50:	f7fe f906 	bl	8004c60 <HAL_GetTick>
 8006a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a56:	e00a      	b.n	8006a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a58:	f7fe f902 	bl	8004c60 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e053      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6e:	4b2d      	ldr	r3, [pc, #180]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f003 020c 	and.w	r2, r3, #12
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d1eb      	bne.n	8006a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a80:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d210      	bcs.n	8006ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f023 0207 	bic.w	r2, r3, #7
 8006a96:	4922      	ldr	r1, [pc, #136]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e032      	b.n	8006b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d008      	beq.n	8006ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006abc:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4916      	ldr	r1, [pc, #88]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d009      	beq.n	8006aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ada:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	490e      	ldr	r1, [pc, #56]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006aee:	f000 f821 	bl	8006b34 <HAL_RCC_GetSysClockFreq>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <HAL_RCC_ClockConfig+0x1c4>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	091b      	lsrs	r3, r3, #4
 8006afa:	f003 030f 	and.w	r3, r3, #15
 8006afe:	490a      	ldr	r1, [pc, #40]	; (8006b28 <HAL_RCC_ClockConfig+0x1c8>)
 8006b00:	5ccb      	ldrb	r3, [r1, r3]
 8006b02:	fa22 f303 	lsr.w	r3, r2, r3
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <HAL_RCC_ClockConfig+0x1cc>)
 8006b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b0a:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <HAL_RCC_ClockConfig+0x1d0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe f864 	bl	8004bdc <HAL_InitTick>

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40022000 	.word	0x40022000
 8006b24:	40021000 	.word	0x40021000
 8006b28:	08008790 	.word	0x08008790
 8006b2c:	20000020 	.word	0x20000020
 8006b30:	2000004c 	.word	0x2000004c

08006b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]
 8006b42:	2300      	movs	r3, #0
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	2300      	movs	r3, #0
 8006b48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b4e:	4b1e      	ldr	r3, [pc, #120]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d002      	beq.n	8006b64 <HAL_RCC_GetSysClockFreq+0x30>
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d003      	beq.n	8006b6a <HAL_RCC_GetSysClockFreq+0x36>
 8006b62:	e027      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b64:	4b19      	ldr	r3, [pc, #100]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006b66:	613b      	str	r3, [r7, #16]
      break;
 8006b68:	e027      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	0c9b      	lsrs	r3, r3, #18
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006b74:	5cd3      	ldrb	r3, [r2, r3]
 8006b76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b82:	4b11      	ldr	r3, [pc, #68]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	0c5b      	lsrs	r3, r3, #17
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006b8e:	5cd3      	ldrb	r3, [r2, r3]
 8006b90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a0d      	ldr	r2, [pc, #52]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006b96:	fb03 f202 	mul.w	r2, r3, r2
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e004      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	613b      	str	r3, [r7, #16]
      break;
 8006bb2:	e002      	b.n	8006bba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x98>)
 8006bb6:	613b      	str	r3, [r7, #16]
      break;
 8006bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bba:	693b      	ldr	r3, [r7, #16]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	371c      	adds	r7, #28
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	007a1200 	.word	0x007a1200
 8006bd0:	0800c7cc 	.word	0x0800c7cc
 8006bd4:	0800c7dc 	.word	0x0800c7dc
 8006bd8:	003d0900 	.word	0x003d0900

08006bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be0:	4b02      	ldr	r3, [pc, #8]	; (8006bec <HAL_RCC_GetHCLKFreq+0x10>)
 8006be2:	681b      	ldr	r3, [r3, #0]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr
 8006bec:	20000020 	.word	0x20000020

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bf4:	f7ff fff2 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4903      	ldr	r1, [pc, #12]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000
 8006c14:	080087a0 	.word	0x080087a0

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c1c:	f7ff ffde 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	0adb      	lsrs	r3, r3, #11
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4903      	ldr	r1, [pc, #12]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40021000 	.word	0x40021000
 8006c3c:	080087a0 	.word	0x080087a0

08006c40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <RCC_Delay+0x34>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0a      	ldr	r2, [pc, #40]	; (8006c78 <RCC_Delay+0x38>)
 8006c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c52:	0a5b      	lsrs	r3, r3, #9
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	fb02 f303 	mul.w	r3, r2, r3
 8006c5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c5c:	bf00      	nop
  }
  while (Delay --);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	60fa      	str	r2, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1f9      	bne.n	8006c5c <RCC_Delay+0x1c>
}
 8006c68:	bf00      	nop
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bc80      	pop	{r7}
 8006c72:	4770      	bx	lr
 8006c74:	20000020 	.word	0x20000020
 8006c78:	10624dd3 	.word	0x10624dd3

08006c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e076      	b.n	8006d7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d108      	bne.n	8006ca8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c9e:	d009      	beq.n	8006cb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	61da      	str	r2, [r3, #28]
 8006ca6:	e005      	b.n	8006cb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d106      	bne.n	8006cd4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7fb ff24 	bl	8002b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d38:	ea42 0103 	orr.w	r1, r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d40:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	0c1a      	lsrs	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f002 0204 	and.w	r2, r2, #4
 8006d5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69da      	ldr	r2, [r3, #28]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_SPI_Transmit+0x22>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e12d      	b.n	8007002 <HAL_SPI_Transmit+0x27e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dae:	f7fd ff57 	bl	8004c60 <HAL_GetTick>
 8006db2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d002      	beq.n	8006dca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dc8:	e116      	b.n	8006ff8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_SPI_Transmit+0x52>
 8006dd0:	88fb      	ldrh	r3, [r7, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dda:	e10d      	b.n	8006ff8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2203      	movs	r2, #3
 8006de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e22:	d10f      	bne.n	8006e44 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e42:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b40      	cmp	r3, #64	; 0x40
 8006e50:	d007      	beq.n	8006e62 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d14f      	bne.n	8006f0c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <HAL_SPI_Transmit+0xf6>
 8006e74:	8afb      	ldrh	r3, [r7, #22]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d142      	bne.n	8006f00 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	1c9a      	adds	r2, r3, #2
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e9e:	e02f      	b.n	8006f00 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d112      	bne.n	8006ed4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebe:	1c9a      	adds	r2, r3, #2
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ed2:	e015      	b.n	8006f00 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed4:	f7fd fec4 	bl	8004c60 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d803      	bhi.n	8006eec <HAL_SPI_Transmit+0x168>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eea:	d102      	bne.n	8006ef2 <HAL_SPI_Transmit+0x16e>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006efe:	e07b      	b.n	8006ff8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ca      	bne.n	8006ea0 <HAL_SPI_Transmit+0x11c>
 8006f0a:	e050      	b.n	8006fae <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_Transmit+0x196>
 8006f14:	8afb      	ldrh	r3, [r7, #22]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d144      	bne.n	8006fa4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f40:	e030      	b.n	8006fa4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d113      	bne.n	8006f78 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f76:	e015      	b.n	8006fa4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f78:	f7fd fe72 	bl	8004c60 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d803      	bhi.n	8006f90 <HAL_SPI_Transmit+0x20c>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8e:	d102      	bne.n	8006f96 <HAL_SPI_Transmit+0x212>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006fa2:	e029      	b.n	8006ff8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1c9      	bne.n	8006f42 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f8b2 	bl	800711c <SPI_EndRxTxTransaction>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d10a      	bne.n	8006fe2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fcc:	2300      	movs	r3, #0
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e003      	b.n	8006ff8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007000:	7ffb      	ldrb	r3, [r7, #31]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b088      	sub	sp, #32
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800701c:	f7fd fe20 	bl	8004c60 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4413      	add	r3, r2
 800702a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800702c:	f7fd fe18 	bl	8004c60 <HAL_GetTick>
 8007030:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007032:	4b39      	ldr	r3, [pc, #228]	; (8007118 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	015b      	lsls	r3, r3, #5
 8007038:	0d1b      	lsrs	r3, r3, #20
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	fb02 f303 	mul.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007042:	e054      	b.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d050      	beq.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800704c:	f7fd fe08 	bl	8004c60 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	69fa      	ldr	r2, [r7, #28]
 8007058:	429a      	cmp	r2, r3
 800705a:	d902      	bls.n	8007062 <SPI_WaitFlagStateUntilTimeout+0x56>
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d13d      	bne.n	80070de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007070:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707a:	d111      	bne.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d004      	beq.n	8007090 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708e:	d107      	bne.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a8:	d10f      	bne.n	80070ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e017      	b.n	800710e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4013      	ands	r3, r2
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	bf0c      	ite	eq
 80070fe:	2301      	moveq	r3, #1
 8007100:	2300      	movne	r3, #0
 8007102:	b2db      	uxtb	r3, r3
 8007104:	461a      	mov	r2, r3
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	429a      	cmp	r2, r3
 800710a:	d19b      	bne.n	8007044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3720      	adds	r7, #32
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000020 	.word	0x20000020

0800711c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	2180      	movs	r1, #128	; 0x80
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff ff6a 	bl	800700c <SPI_WaitFlagStateUntilTimeout>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007142:	f043 0220 	orr.w	r2, r3, #32
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e000      	b.n	8007150 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e093      	b.n	8007294 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7fb fd09 	bl	8002b98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2202      	movs	r2, #2
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6812      	ldr	r2, [r2, #0]
 8007198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f000 f903 	bl	80073b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	f023 0303 	bic.w	r3, r3, #3
 80071de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	4313      	orrs	r3, r2
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80071f8:	f023 030c 	bic.w	r3, r3, #12
 80071fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007204:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007208:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	021b      	lsls	r3, r3, #8
 8007214:	4313      	orrs	r3, r2
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	011a      	lsls	r2, r3, #4
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	031b      	lsls	r3, r3, #12
 8007228:	4313      	orrs	r3, r2
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007236:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	4313      	orrs	r3, r2
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d110      	bne.n	80072ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d102      	bne.n	80072d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072d2:	7b7b      	ldrb	r3, [r7, #13]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e069      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072ec:	e031      	b.n	8007352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d110      	bne.n	8007316 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d102      	bne.n	8007300 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072fa:	7b3b      	ldrb	r3, [r7, #12]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d001      	beq.n	8007304 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e055      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007314:	e01d      	b.n	8007352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007316:	7bfb      	ldrb	r3, [r7, #15]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d108      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d105      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007322:	7b7b      	ldrb	r3, [r7, #13]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007328:	7b3b      	ldrb	r3, [r7, #12]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d001      	beq.n	8007332 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e03e      	b.n	80073b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2202      	movs	r2, #2
 8007336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_TIM_Encoder_Start+0xc4>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b04      	cmp	r3, #4
 800735c:	d008      	beq.n	8007370 <HAL_TIM_Encoder_Start+0xd4>
 800735e:	e00f      	b.n	8007380 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2201      	movs	r2, #1
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f887 	bl	800747c <TIM_CCxChannelCmd>
      break;
 800736e:	e016      	b.n	800739e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2201      	movs	r2, #1
 8007376:	2104      	movs	r1, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f87f 	bl	800747c <TIM_CCxChannelCmd>
      break;
 800737e:	e00e      	b.n	800739e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f000 f877 	bl	800747c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2201      	movs	r2, #1
 8007394:	2104      	movs	r1, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f870 	bl	800747c <TIM_CCxChannelCmd>
      break;
 800739c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f042 0201 	orr.w	r2, r2, #1
 80073ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a29      	ldr	r2, [pc, #164]	; (8007470 <TIM_Base_SetConfig+0xb8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a26      	ldr	r2, [pc, #152]	; (8007474 <TIM_Base_SetConfig+0xbc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x30>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a25      	ldr	r2, [pc, #148]	; (8007478 <TIM_Base_SetConfig+0xc0>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a1c      	ldr	r2, [pc, #112]	; (8007470 <TIM_Base_SetConfig+0xb8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00b      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d007      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <TIM_Base_SetConfig+0xbc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_Base_SetConfig+0x62>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a18      	ldr	r2, [pc, #96]	; (8007478 <TIM_Base_SetConfig+0xc0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a07      	ldr	r2, [pc, #28]	; (8007470 <TIM_Base_SetConfig+0xb8>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d103      	bne.n	8007460 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	615a      	str	r2, [r3, #20]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40000400 	.word	0x40000400
 8007478:	40000800 	.word	0x40000800

0800747c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	2201      	movs	r2, #1
 8007490:	fa02 f303 	lsl.w	r3, r2, r3
 8007494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6a1a      	ldr	r2, [r3, #32]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	43db      	mvns	r3, r3
 800749e:	401a      	ands	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	fa01 f303 	lsl.w	r3, r1, r3
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d8:	2302      	movs	r3, #2
 80074da:	e046      	b.n	800756a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a16      	ldr	r2, [pc, #88]	; (8007574 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007528:	d009      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a12      	ldr	r2, [pc, #72]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a10      	ldr	r2, [pc, #64]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d10c      	bne.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4313      	orrs	r3, r2
 800754e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	40000800 	.word	0x40000800

08007580 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e042      	b.n	8007618 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fb fb34 	bl	8002c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2224      	movs	r2, #36	; 0x24
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 ff8b 	bl	80084e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695a      	ldr	r2, [r3, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	d16d      	bne.n	800771c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Transmit+0x2c>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e066      	b.n	800771e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2221      	movs	r2, #33	; 0x21
 800765a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800765e:	f7fd faff 	bl	8004c60 <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88fa      	ldrh	r2, [r7, #6]
 8007668:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	88fa      	ldrh	r2, [r7, #6]
 800766e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007678:	d108      	bne.n	800768c <HAL_UART_Transmit+0x6c>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	61bb      	str	r3, [r7, #24]
 800768a:	e003      	b.n	8007694 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007690:	2300      	movs	r3, #0
 8007692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007694:	e02a      	b.n	80076ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2200      	movs	r2, #0
 800769e:	2180      	movs	r1, #128	; 0x80
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fc53 	bl	8007f4c <UART_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e036      	b.n	800771e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	3302      	adds	r3, #2
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e007      	b.n	80076de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	3301      	adds	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1cf      	bne.n	8007696 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2140      	movs	r1, #64	; 0x40
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fc23 	bl	8007f4c <UART_WaitOnFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e006      	b.n	800771e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	e000      	b.n	800771e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800771c:	2302      	movs	r3, #2
  }
}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b08c      	sub	sp, #48	; 0x30
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	4613      	mov	r3, r2
 8007732:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b20      	cmp	r3, #32
 800773e:	d14a      	bne.n	80077d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007746:	88fb      	ldrh	r3, [r7, #6]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e043      	b.n	80077d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800775c:	88fb      	ldrh	r3, [r7, #6]
 800775e:	461a      	mov	r2, r3
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 fc60 	bl	8008028 <UART_Start_Receive_DMA>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800776e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007772:	2b00      	cmp	r3, #0
 8007774:	d12c      	bne.n	80077d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	2b01      	cmp	r3, #1
 800777c:	d125      	bne.n	80077ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	330c      	adds	r3, #12
 800779a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	617b      	str	r3, [r7, #20]
   return(result);
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	f043 0310 	orr.w	r3, r3, #16
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077b4:	627a      	str	r2, [r7, #36]	; 0x24
 80077b6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6a39      	ldr	r1, [r7, #32]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e5      	bne.n	8007794 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80077c8:	e002      	b.n	80077d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80077d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077d4:	e000      	b.n	80077d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3730      	adds	r7, #48	; 0x30
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b0ba      	sub	sp, #232	; 0xe8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007806:	2300      	movs	r3, #0
 8007808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800780c:	2300      	movs	r3, #0
 800780e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800781e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10f      	bne.n	8007846 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <HAL_UART_IRQHandler+0x66>
 8007832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d003      	beq.n	8007846 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fd90 	bl	8008364 <UART_Receive_IT>
      return;
 8007844:	e25b      	b.n	8007cfe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007846:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80de 	beq.w	8007a0c <HAL_UART_IRQHandler+0x22c>
 8007850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800785c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007860:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80d1 	beq.w	8007a0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <HAL_UART_IRQHandler+0xae>
 8007876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007886:	f043 0201 	orr.w	r2, r3, #1
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <HAL_UART_IRQHandler+0xd2>
 800789a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f043 0202 	orr.w	r2, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <HAL_UART_IRQHandler+0xf6>
 80078be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	f043 0204 	orr.w	r2, r3, #4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d011      	beq.n	8007906 <HAL_UART_IRQHandler+0x126>
 80078e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d005      	beq.n	8007906 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f043 0208 	orr.w	r2, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 81f2 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007914:	f003 0320 	and.w	r3, r3, #32
 8007918:	2b00      	cmp	r3, #0
 800791a:	d008      	beq.n	800792e <HAL_UART_IRQHandler+0x14e>
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd1b 	bl	8008364 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf14      	ite	ne
 800793c:	2301      	movne	r3, #1
 800793e:	2300      	moveq	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <HAL_UART_IRQHandler+0x17a>
 8007952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d04f      	beq.n	80079fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fc25 	bl	80081aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d041      	beq.n	80079f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3314      	adds	r3, #20
 8007974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3314      	adds	r3, #20
 8007996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800799a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800799e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1d9      	bne.n	800796e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c6:	4a7e      	ldr	r2, [pc, #504]	; (8007bc0 <HAL_UART_IRQHandler+0x3e0>)
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe f9e4 	bl	8005d9c <HAL_DMA_Abort_IT>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d016      	beq.n	8007a08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e8:	e00e      	b.n	8007a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7f9 fa22 	bl	8000e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f0:	e00a      	b.n	8007a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7f9 fa1e 	bl	8000e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f8:	e006      	b.n	8007a08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7f9 fa1a 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007a06:	e175      	b.n	8007cf4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a08:	bf00      	nop
    return;
 8007a0a:	e173      	b.n	8007cf4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	f040 814f 	bne.w	8007cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8148 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 8141 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a32:	2300      	movs	r3, #0
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	60bb      	str	r3, [r7, #8]
 8007a46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 80b6 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8145 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a76:	429a      	cmp	r2, r3
 8007a78:	f080 813e 	bcs.w	8007cf8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	f000 8088 	beq.w	8007ba0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007abc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ac8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007acc:	e841 2300 	strex	r3, r2, [r1]
 8007ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1d9      	bne.n	8007a90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3314      	adds	r3, #20
 8007afc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e1      	bne.n	8007adc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3314      	adds	r3, #20
 8007b1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3314      	adds	r3, #20
 8007b38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e3      	bne.n	8007b18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	330c      	adds	r3, #12
 8007b64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b82:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e3      	bne.n	8007b5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fe f8c2 	bl	8005d24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7f9 f9d0 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bbc:	e09c      	b.n	8007cf8 <HAL_UART_IRQHandler+0x518>
 8007bbe:	bf00      	nop
 8007bc0:	0800826f 	.word	0x0800826f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 808e 	beq.w	8007cfc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8089 	beq.w	8007cfc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	330c      	adds	r3, #12
 8007bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	330c      	adds	r3, #12
 8007c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c0e:	647a      	str	r2, [r7, #68]	; 0x44
 8007c10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e3      	bne.n	8007bea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3314      	adds	r3, #20
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	623b      	str	r3, [r7, #32]
   return(result);
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f023 0301 	bic.w	r3, r3, #1
 8007c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3314      	adds	r3, #20
 8007c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c46:	633a      	str	r2, [r7, #48]	; 0x30
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e3      	bne.n	8007c22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0310 	bic.w	r3, r3, #16
 8007c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	330c      	adds	r3, #12
 8007c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c8c:	61fa      	str	r2, [r7, #28]
 8007c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	69b9      	ldr	r1, [r7, #24]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	617b      	str	r3, [r7, #20]
   return(result);
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e3      	bne.n	8007c68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ca6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7f9 f955 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cb2:	e023      	b.n	8007cfc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d009      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x4f4>
 8007cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fae2 	bl	8008296 <UART_Transmit_IT>
    return;
 8007cd2:	e014      	b.n	8007cfe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <HAL_UART_IRQHandler+0x51e>
 8007ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fb21 	bl	8008334 <UART_EndTransmit_IT>
    return;
 8007cf2:	e004      	b.n	8007cfe <HAL_UART_IRQHandler+0x51e>
    return;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_UART_IRQHandler+0x51e>
      return;
 8007cfc:	bf00      	nop
  }
}
 8007cfe:	37e8      	adds	r7, #232	; 0xe8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr

08007d3a <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b09c      	sub	sp, #112	; 0x70
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d172      	bne.n	8007e52 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6e:	2200      	movs	r2, #0
 8007d70:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d94:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1e5      	bne.n	8007d72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	3314      	adds	r3, #20
 8007dac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	f023 0301 	bic.w	r3, r3, #1
 8007dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8007dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dce:	e841 2300 	strex	r3, r2, [r1]
 8007dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e5      	bne.n	8007da6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3314      	adds	r3, #20
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df0:	663b      	str	r3, [r7, #96]	; 0x60
 8007df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3314      	adds	r3, #20
 8007df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d119      	bne.n	8007e52 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	330c      	adds	r3, #12
 8007e24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f023 0310 	bic.w	r3, r3, #16
 8007e34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e3e:	61fa      	str	r2, [r7, #28]
 8007e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	69b9      	ldr	r1, [r7, #24]
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e54:	2200      	movs	r2, #0
 8007e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d106      	bne.n	8007e6e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e64:	4619      	mov	r1, r3
 8007e66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e68:	f7f9 f878 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e6c:	e002      	b.n	8007e74 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e70:	f7ff ff51 	bl	8007d16 <HAL_UART_RxCpltCallback>
}
 8007e74:	bf00      	nop
 8007e76:	3770      	adds	r7, #112	; 0x70
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d108      	bne.n	8007eaa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e9c:	085b      	lsrs	r3, r3, #1
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7f9 f85a 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ea8:	e002      	b.n	8007eb0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7ff ff3c 	bl	8007d28 <HAL_UART_RxHalfCpltCallback>
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b21      	cmp	r3, #33	; 0x21
 8007eea:	d108      	bne.n	8007efe <UART_DMAError+0x46>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ef8:	68b8      	ldr	r0, [r7, #8]
 8007efa:	f000 f92f 	bl	800815c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b22      	cmp	r3, #34	; 0x22
 8007f1e:	d108      	bne.n	8007f32 <UART_DMAError+0x7a>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f2c:	68b8      	ldr	r0, [r7, #8]
 8007f2e:	f000 f93c 	bl	80081aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f043 0210 	orr.w	r2, r3, #16
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f3e:	68b8      	ldr	r0, [r7, #8]
 8007f40:	f7f8 ff78 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f44:	bf00      	nop
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	; 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5c:	e050      	b.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d04c      	beq.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f6c:	f7fc fe78 	bl	8004c60 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d241      	bcs.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8007f9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd0:	623a      	str	r2, [r7, #32]
 8007fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e00f      	b.n	8008020 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4013      	ands	r3, r2
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	bf0c      	ite	eq
 8008010:	2301      	moveq	r3, #1
 8008012:	2300      	movne	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	429a      	cmp	r2, r3
 800801c:	d09f      	beq.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3740      	adds	r7, #64	; 0x40
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b098      	sub	sp, #96	; 0x60
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2222      	movs	r2, #34	; 0x22
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008054:	4a3e      	ldr	r2, [pc, #248]	; (8008150 <UART_Start_Receive_DMA+0x128>)
 8008056:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805c:	4a3d      	ldr	r2, [pc, #244]	; (8008154 <UART_Start_Receive_DMA+0x12c>)
 800805e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008064:	4a3c      	ldr	r2, [pc, #240]	; (8008158 <UART_Start_Receive_DMA+0x130>)
 8008066:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806c:	2200      	movs	r2, #0
 800806e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008070:	f107 0308 	add.w	r3, r7, #8
 8008074:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	f7fd fdec 	bl	8005c64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	613b      	str	r3, [r7, #16]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d019      	beq.n	80080de <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	330c      	adds	r3, #12
 80080b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b4:	e853 3f00 	ldrex	r3, [r3]
 80080b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	330c      	adds	r3, #12
 80080c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80080cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80080d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080d2:	e841 2300 	strex	r3, r2, [r1]
 80080d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80080d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e5      	bne.n	80080aa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	3314      	adds	r3, #20
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	e853 3f00 	ldrex	r3, [r3]
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	657b      	str	r3, [r7, #84]	; 0x54
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3314      	adds	r3, #20
 80080fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8008100:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008102:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008106:	e841 2300 	strex	r3, r2, [r1]
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1e5      	bne.n	80080de <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3314      	adds	r3, #20
 8008118:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	617b      	str	r3, [r7, #20]
   return(result);
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008128:	653b      	str	r3, [r7, #80]	; 0x50
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3314      	adds	r3, #20
 8008130:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008132:	627a      	str	r2, [r7, #36]	; 0x24
 8008134:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6a39      	ldr	r1, [r7, #32]
 8008138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3760      	adds	r7, #96	; 0x60
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	08007d51 	.word	0x08007d51
 8008154:	08007e7d 	.word	0x08007e7d
 8008158:	08007eb9 	.word	0x08007eb9

0800815c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b089      	sub	sp, #36	; 0x24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60bb      	str	r3, [r7, #8]
   return(result);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800817a:	61fb      	str	r3, [r7, #28]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	69fa      	ldr	r2, [r7, #28]
 8008184:	61ba      	str	r2, [r7, #24]
 8008186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6979      	ldr	r1, [r7, #20]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	613b      	str	r3, [r7, #16]
   return(result);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e5      	bne.n	8008164 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80081a0:	bf00      	nop
 80081a2:	3724      	adds	r7, #36	; 0x24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b095      	sub	sp, #84	; 0x54
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081d2:	643a      	str	r2, [r7, #64]	; 0x40
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3314      	adds	r3, #20
 80081ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3314      	adds	r3, #20
 8008204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e5      	bne.n	80081e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	2b01      	cmp	r3, #1
 8008220:	d119      	bne.n	8008256 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	330c      	adds	r3, #12
 8008228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	60bb      	str	r3, [r7, #8]
   return(result);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 0310 	bic.w	r3, r3, #16
 8008238:	647b      	str	r3, [r7, #68]	; 0x44
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008242:	61ba      	str	r2, [r7, #24]
 8008244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	6979      	ldr	r1, [r7, #20]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	613b      	str	r3, [r7, #16]
   return(result);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008264:	bf00      	nop
 8008266:	3754      	adds	r7, #84	; 0x54
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7f8 fdd3 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008296:	b480      	push	{r7}
 8008298:	b085      	sub	sp, #20
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b21      	cmp	r3, #33	; 0x21
 80082a8:	d13e      	bne.n	8008328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082b2:	d114      	bne.n	80082de <UART_Transmit_IT+0x48>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d110      	bne.n	80082de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a1b      	ldr	r3, [r3, #32]
 80082d6:	1c9a      	adds	r2, r3, #2
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	621a      	str	r2, [r3, #32]
 80082dc:	e008      	b.n	80082f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	1c59      	adds	r1, r3, #1
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6211      	str	r1, [r2, #32]
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	4619      	mov	r1, r3
 80082fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10f      	bne.n	8008324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e000      	b.n	800832a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008328:	2302      	movs	r3, #2
  }
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800834a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fcd5 	bl	8007d04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08c      	sub	sp, #48	; 0x30
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b22      	cmp	r3, #34	; 0x22
 8008376:	f040 80ae 	bne.w	80084d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008382:	d117      	bne.n	80083b4 <UART_Receive_IT+0x50>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d113      	bne.n	80083b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800838c:	2300      	movs	r3, #0
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	1c9a      	adds	r2, r3, #2
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	629a      	str	r2, [r3, #40]	; 0x28
 80083b2:	e026      	b.n	8008402 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083ba:	2300      	movs	r3, #0
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c6:	d007      	beq.n	80083d8 <UART_Receive_IT+0x74>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <UART_Receive_IT+0x82>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d106      	bne.n	80083e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	e008      	b.n	80083f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008406:	b29b      	uxth	r3, r3
 8008408:	3b01      	subs	r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	4619      	mov	r1, r3
 8008410:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008412:	2b00      	cmp	r3, #0
 8008414:	d15d      	bne.n	80084d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0220 	bic.w	r2, r2, #32
 8008424:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008434:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0201 	bic.w	r2, r2, #1
 8008444:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	2b01      	cmp	r3, #1
 800845a:	d135      	bne.n	80084c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	330c      	adds	r3, #12
 8008468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	613b      	str	r3, [r7, #16]
   return(result);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f023 0310 	bic.w	r3, r3, #16
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008482:	623a      	str	r2, [r7, #32]
 8008484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	69f9      	ldr	r1, [r7, #28]
 8008488:	6a3a      	ldr	r2, [r7, #32]
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e5      	bne.n	8008462 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d10a      	bne.n	80084ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7f8 fd4b 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
 80084c6:	e002      	b.n	80084ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fc24 	bl	8007d16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e002      	b.n	80084d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e000      	b.n	80084d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80084d6:	2302      	movs	r3, #2
  }
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3730      	adds	r7, #48	; 0x30
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800851a:	f023 030c 	bic.w	r3, r3, #12
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	6812      	ldr	r2, [r2, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	430b      	orrs	r3, r1
 8008526:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2c      	ldr	r2, [pc, #176]	; (80085f4 <UART_SetConfig+0x114>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d103      	bne.n	8008550 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008548:	f7fe fb66 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	e002      	b.n	8008556 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008550:	f7fe fb4e 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8008554:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009a      	lsls	r2, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	fbb2 f3f3 	udiv	r3, r2, r3
 800856c:	4a22      	ldr	r2, [pc, #136]	; (80085f8 <UART_SetConfig+0x118>)
 800856e:	fba2 2303 	umull	r2, r3, r2, r3
 8008572:	095b      	lsrs	r3, r3, #5
 8008574:	0119      	lsls	r1, r3, #4
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009a      	lsls	r2, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	fbb2 f2f3 	udiv	r2, r2, r3
 800858c:	4b1a      	ldr	r3, [pc, #104]	; (80085f8 <UART_SetConfig+0x118>)
 800858e:	fba3 0302 	umull	r0, r3, r3, r2
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	2064      	movs	r0, #100	; 0x64
 8008596:	fb00 f303 	mul.w	r3, r0, r3
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	3332      	adds	r3, #50	; 0x32
 80085a0:	4a15      	ldr	r2, [pc, #84]	; (80085f8 <UART_SetConfig+0x118>)
 80085a2:	fba2 2303 	umull	r2, r3, r2, r3
 80085a6:	095b      	lsrs	r3, r3, #5
 80085a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ac:	4419      	add	r1, r3
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	009a      	lsls	r2, r3, #2
 80085b8:	441a      	add	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80085c4:	4b0c      	ldr	r3, [pc, #48]	; (80085f8 <UART_SetConfig+0x118>)
 80085c6:	fba3 0302 	umull	r0, r3, r3, r2
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	2064      	movs	r0, #100	; 0x64
 80085ce:	fb00 f303 	mul.w	r3, r0, r3
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	011b      	lsls	r3, r3, #4
 80085d6:	3332      	adds	r3, #50	; 0x32
 80085d8:	4a07      	ldr	r2, [pc, #28]	; (80085f8 <UART_SetConfig+0x118>)
 80085da:	fba2 2303 	umull	r2, r3, r2, r3
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	f003 020f 	and.w	r2, r3, #15
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	440a      	add	r2, r1
 80085ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085ec:	bf00      	nop
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40013800 	.word	0x40013800
 80085f8:	51eb851f 	.word	0x51eb851f

080085fc <__libc_init_array>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	2600      	movs	r6, #0
 8008600:	4d0c      	ldr	r5, [pc, #48]	; (8008634 <__libc_init_array+0x38>)
 8008602:	4c0d      	ldr	r4, [pc, #52]	; (8008638 <__libc_init_array+0x3c>)
 8008604:	1b64      	subs	r4, r4, r5
 8008606:	10a4      	asrs	r4, r4, #2
 8008608:	42a6      	cmp	r6, r4
 800860a:	d109      	bne.n	8008620 <__libc_init_array+0x24>
 800860c:	f000 f822 	bl	8008654 <_init>
 8008610:	2600      	movs	r6, #0
 8008612:	4d0a      	ldr	r5, [pc, #40]	; (800863c <__libc_init_array+0x40>)
 8008614:	4c0a      	ldr	r4, [pc, #40]	; (8008640 <__libc_init_array+0x44>)
 8008616:	1b64      	subs	r4, r4, r5
 8008618:	10a4      	asrs	r4, r4, #2
 800861a:	42a6      	cmp	r6, r4
 800861c:	d105      	bne.n	800862a <__libc_init_array+0x2e>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	f855 3b04 	ldr.w	r3, [r5], #4
 8008624:	4798      	blx	r3
 8008626:	3601      	adds	r6, #1
 8008628:	e7ee      	b.n	8008608 <__libc_init_array+0xc>
 800862a:	f855 3b04 	ldr.w	r3, [r5], #4
 800862e:	4798      	blx	r3
 8008630:	3601      	adds	r6, #1
 8008632:	e7f2      	b.n	800861a <__libc_init_array+0x1e>
 8008634:	0800c7e8 	.word	0x0800c7e8
 8008638:	0800c7e8 	.word	0x0800c7e8
 800863c:	0800c7e8 	.word	0x0800c7e8
 8008640:	0800c7ec 	.word	0x0800c7ec

08008644 <memset>:
 8008644:	4603      	mov	r3, r0
 8008646:	4402      	add	r2, r0
 8008648:	4293      	cmp	r3, r2
 800864a:	d100      	bne.n	800864e <memset+0xa>
 800864c:	4770      	bx	lr
 800864e:	f803 1b01 	strb.w	r1, [r3], #1
 8008652:	e7f9      	b.n	8008648 <memset+0x4>

08008654 <_init>:
 8008654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008656:	bf00      	nop
 8008658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865a:	bc08      	pop	{r3}
 800865c:	469e      	mov	lr, r3
 800865e:	4770      	bx	lr

08008660 <_fini>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr
