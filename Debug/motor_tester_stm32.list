
motor_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004158  08007f10  08007f10  00017f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c068  0800c068  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800c068  0800c068  0001c068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c070  0800c070  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c070  0800c070  0001c070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c074  0800c074  0001c074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800c078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000054  0800c0cc  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  0800c0cc  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b54  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002750  00000000  00000000  00032bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00036458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ae  00000000  00000000  000374e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d06  00000000  00000000  0004f88e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa9a  00000000  00000000  00062594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f202e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  000f2080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000054 	.word	0x20000054
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ef4 	.word	0x08007ef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000058 	.word	0x20000058
 800014c:	08007ef4 	.word	0x08007ef4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b976 	b.w	8000e30 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	460d      	mov	r5, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	4688      	mov	r8, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14d      	bne.n	8000c08 <__udivmoddi4+0xac>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4694      	mov	ip, r2
 8000b70:	d968      	bls.n	8000c44 <__udivmoddi4+0xe8>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b152      	cbz	r2, 8000b8e <__udivmoddi4+0x32>
 8000b78:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7c:	f1c2 0120 	rsb	r1, r2, #32
 8000b80:	fa20 f101 	lsr.w	r1, r0, r1
 8000b84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b88:	ea41 0803 	orr.w	r8, r1, r3
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b92:	fbb8 f7f1 	udiv	r7, r8, r1
 8000b96:	fa1f fe8c 	uxth.w	lr, ip
 8000b9a:	fb01 8817 	mls	r8, r1, r7, r8
 8000b9e:	fb07 f00e 	mul.w	r0, r7, lr
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d90a      	bls.n	8000bc2 <__udivmoddi4+0x66>
 8000bac:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb0:	f107 35ff 	add.w	r5, r7, #4294967295
 8000bb4:	f080 811e 	bcs.w	8000df4 <__udivmoddi4+0x298>
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	f240 811b 	bls.w	8000df4 <__udivmoddi4+0x298>
 8000bbe:	3f02      	subs	r7, #2
 8000bc0:	4463      	add	r3, ip
 8000bc2:	1a1b      	subs	r3, r3, r0
 8000bc4:	fbb3 f0f1 	udiv	r0, r3, r1
 8000bc8:	fb01 3310 	mls	r3, r1, r0, r3
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	b2a4      	uxth	r4, r4
 8000bd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd6:	45a6      	cmp	lr, r4
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0404 	adds.w	r4, ip, r4
 8000bde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000be2:	f080 8109 	bcs.w	8000df8 <__udivmoddi4+0x29c>
 8000be6:	45a6      	cmp	lr, r4
 8000be8:	f240 8106 	bls.w	8000df8 <__udivmoddi4+0x29c>
 8000bec:	4464      	add	r4, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bfa:	b11e      	cbz	r6, 8000c04 <__udivmoddi4+0xa8>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	40d4      	lsrs	r4, r2
 8000c00:	e9c6 4300 	strd	r4, r3, [r6]
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0xc2>
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	f000 80ee 	beq.w	8000dee <__udivmoddi4+0x292>
 8000c12:	2100      	movs	r1, #0
 8000c14:	e9c6 0500 	strd	r0, r5, [r6]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f183 	clz	r1, r3
 8000c22:	2900      	cmp	r1, #0
 8000c24:	d14a      	bne.n	8000cbc <__udivmoddi4+0x160>
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd4>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80fc 	bhi.w	8000e28 <__udivmoddi4+0x2cc>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb65 0303 	sbc.w	r3, r5, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	4698      	mov	r8, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d0e2      	beq.n	8000c04 <__udivmoddi4+0xa8>
 8000c3e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c42:	e7df      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xec>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 8091 	bne.w	8000d74 <__udivmoddi4+0x218>
 8000c52:	eba1 000c 	sub.w	r0, r1, ip
 8000c56:	2101      	movs	r1, #1
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb0 f3f7 	udiv	r3, r0, r7
 8000c64:	fb07 0013 	mls	r0, r7, r3, r0
 8000c68:	0c25      	lsrs	r5, r4, #16
 8000c6a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c6e:	fb0e f003 	mul.w	r0, lr, r3
 8000c72:	42a8      	cmp	r0, r5
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x12c>
 8000c76:	eb1c 0505 	adds.w	r5, ip, r5
 8000c7a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x12a>
 8000c80:	42a8      	cmp	r0, r5
 8000c82:	f200 80ce 	bhi.w	8000e22 <__udivmoddi4+0x2c6>
 8000c86:	4643      	mov	r3, r8
 8000c88:	1a2d      	subs	r5, r5, r0
 8000c8a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c8e:	fb07 5510 	mls	r5, r7, r0, r5
 8000c92:	fb0e fe00 	mul.w	lr, lr, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0x156>
 8000ca0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x154>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f200 80b6 	bhi.w	8000e1c <__udivmoddi4+0x2c0>
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	eba4 040e 	sub.w	r4, r4, lr
 8000cb6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cba:	e79e      	b.n	8000bfa <__udivmoddi4+0x9e>
 8000cbc:	f1c1 0720 	rsb	r7, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cc6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cca:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd2:	fbba f8f9 	udiv	r8, sl, r9
 8000cd6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cda:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cde:	408d      	lsls	r5, r1
 8000ce0:	fa1f fe8c 	uxth.w	lr, ip
 8000ce4:	431d      	orrs	r5, r3
 8000ce6:	fa00 f301 	lsl.w	r3, r0, r1
 8000cea:	fb08 f00e 	mul.w	r0, r8, lr
 8000cee:	0c2c      	lsrs	r4, r5, #16
 8000cf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000cf4:	42a0      	cmp	r0, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0x1b8>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d04:	f080 8088 	bcs.w	8000e18 <__udivmoddi4+0x2bc>
 8000d08:	42a0      	cmp	r0, r4
 8000d0a:	f240 8085 	bls.w	8000e18 <__udivmoddi4+0x2bc>
 8000d0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d12:	4464      	add	r4, ip
 8000d14:	1a24      	subs	r4, r4, r0
 8000d16:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d1a:	fb09 4410 	mls	r4, r9, r0, r4
 8000d1e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x1e2>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d34:	d26c      	bcs.n	8000e10 <__udivmoddi4+0x2b4>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d96a      	bls.n	8000e10 <__udivmoddi4+0x2b4>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d42:	fba0 9502 	umull	r9, r5, r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	42ac      	cmp	r4, r5
 8000d4c:	46c8      	mov	r8, r9
 8000d4e:	46ae      	mov	lr, r5
 8000d50:	d356      	bcc.n	8000e00 <__udivmoddi4+0x2a4>
 8000d52:	d053      	beq.n	8000dfc <__udivmoddi4+0x2a0>
 8000d54:	2e00      	cmp	r6, #0
 8000d56:	d069      	beq.n	8000e2c <__udivmoddi4+0x2d0>
 8000d58:	ebb3 0208 	subs.w	r2, r3, r8
 8000d5c:	eb64 040e 	sbc.w	r4, r4, lr
 8000d60:	fa22 f301 	lsr.w	r3, r2, r1
 8000d64:	fa04 f707 	lsl.w	r7, r4, r7
 8000d68:	431f      	orrs	r7, r3
 8000d6a:	40cc      	lsrs	r4, r1
 8000d6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d70:	2100      	movs	r1, #0
 8000d72:	e747      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000d74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d78:	f1c2 0120 	rsb	r1, r2, #32
 8000d7c:	fa25 f301 	lsr.w	r3, r5, r1
 8000d80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d84:	fa20 f101 	lsr.w	r1, r0, r1
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	430d      	orrs	r5, r1
 8000d8c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d90:	fb07 3311 	mls	r3, r7, r1, r3
 8000d94:	fa1f fe8c 	uxth.w	lr, ip
 8000d98:	0c28      	lsrs	r0, r5, #16
 8000d9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9e:	fb01 f30e 	mul.w	r3, r1, lr
 8000da2:	4283      	cmp	r3, r0
 8000da4:	fa04 f402 	lsl.w	r4, r4, r2
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x260>
 8000daa:	eb1c 0000 	adds.w	r0, ip, r0
 8000dae:	f101 38ff 	add.w	r8, r1, #4294967295
 8000db2:	d22f      	bcs.n	8000e14 <__udivmoddi4+0x2b8>
 8000db4:	4283      	cmp	r3, r0
 8000db6:	d92d      	bls.n	8000e14 <__udivmoddi4+0x2b8>
 8000db8:	3902      	subs	r1, #2
 8000dba:	4460      	add	r0, ip
 8000dbc:	1ac0      	subs	r0, r0, r3
 8000dbe:	fbb0 f3f7 	udiv	r3, r0, r7
 8000dc2:	fb07 0013 	mls	r0, r7, r3, r0
 8000dc6:	b2ad      	uxth	r5, r5
 8000dc8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000dcc:	fb03 f00e 	mul.w	r0, r3, lr
 8000dd0:	42a8      	cmp	r0, r5
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x28a>
 8000dd4:	eb1c 0505 	adds.w	r5, ip, r5
 8000dd8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ddc:	d216      	bcs.n	8000e0c <__udivmoddi4+0x2b0>
 8000dde:	42a8      	cmp	r0, r5
 8000de0:	d914      	bls.n	8000e0c <__udivmoddi4+0x2b0>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	4465      	add	r5, ip
 8000de6:	1a28      	subs	r0, r5, r0
 8000de8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dec:	e738      	b.n	8000c60 <__udivmoddi4+0x104>
 8000dee:	4631      	mov	r1, r6
 8000df0:	4630      	mov	r0, r6
 8000df2:	e707      	b.n	8000c04 <__udivmoddi4+0xa8>
 8000df4:	462f      	mov	r7, r5
 8000df6:	e6e4      	b.n	8000bc2 <__udivmoddi4+0x66>
 8000df8:	4618      	mov	r0, r3
 8000dfa:	e6f9      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	d2a9      	bcs.n	8000d54 <__udivmoddi4+0x1f8>
 8000e00:	ebb9 0802 	subs.w	r8, r9, r2
 8000e04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e08:	3801      	subs	r0, #1
 8000e0a:	e7a3      	b.n	8000d54 <__udivmoddi4+0x1f8>
 8000e0c:	4643      	mov	r3, r8
 8000e0e:	e7ea      	b.n	8000de6 <__udivmoddi4+0x28a>
 8000e10:	4628      	mov	r0, r5
 8000e12:	e794      	b.n	8000d3e <__udivmoddi4+0x1e2>
 8000e14:	4641      	mov	r1, r8
 8000e16:	e7d1      	b.n	8000dbc <__udivmoddi4+0x260>
 8000e18:	46d0      	mov	r8, sl
 8000e1a:	e77b      	b.n	8000d14 <__udivmoddi4+0x1b8>
 8000e1c:	4464      	add	r4, ip
 8000e1e:	3802      	subs	r0, #2
 8000e20:	e747      	b.n	8000cb2 <__udivmoddi4+0x156>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	4465      	add	r5, ip
 8000e26:	e72f      	b.n	8000c88 <__udivmoddi4+0x12c>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e706      	b.n	8000c3a <__udivmoddi4+0xde>
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e6e9      	b.n	8000c04 <__udivmoddi4+0xa8>

08000e30 <__aeabi_idiv0>:
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop

08000e34 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uint32_t er = HAL_UART_GetError(huart);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f006 fbcc 	bl	80075da <HAL_UART_GetError>
 8000e42:	61f8      	str	r0, [r7, #28]
	switch (er) {
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	2b0f      	cmp	r3, #15
 8000e4a:	d863      	bhi.n	8000f14 <HAL_UART_ErrorCallback+0xe0>
 8000e4c:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_UART_ErrorCallback+0x20>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e95 	.word	0x08000e95
 8000e58:	08000eb3 	.word	0x08000eb3
 8000e5c:	08000f15 	.word	0x08000f15
 8000e60:	08000ed1 	.word	0x08000ed1
 8000e64:	08000f15 	.word	0x08000f15
 8000e68:	08000f15 	.word	0x08000f15
 8000e6c:	08000f15 	.word	0x08000f15
 8000e70:	08000eef 	.word	0x08000eef
 8000e74:	08000f15 	.word	0x08000f15
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f15 	.word	0x08000f15
 8000e80:	08000f15 	.word	0x08000f15
 8000e84:	08000f15 	.word	0x08000f15
 8000e88:	08000f15 	.word	0x08000f15
 8000e8c:	08000f15 	.word	0x08000f15
 8000e90:	08000f0d 	.word	0x08000f0d
		case HAL_UART_ERROR_PE: // ошибка четности
			__HAL_UART_CLEAR_PEFLAG(huart);
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000eb0:	e031      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_NE:  // шум на линии
			__HAL_UART_CLEAR_NEFLAG(huart);
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697b      	ldr	r3, [r7, #20]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000ece:	e022      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_FE:  // ошибка фрейма
			__HAL_UART_CLEAR_FEFLAG(huart);
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000eec:	e013      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_ORE:  // overrun error
			__HAL_UART_CLEAR_OREFLAG(huart);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000f0a:	e004      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		case HAL_UART_ERROR_DMA:  // ошибка DMA
			huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	645a      	str	r2, [r3, #68]	; 0x44
			break;
 8000f12:	e000      	b.n	8000f16 <HAL_UART_ErrorCallback+0xe2>
		default:
			break;
 8000f14:	bf00      	nop
		}
	if (huart->Instance == USART1) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_UART_ErrorCallback+0x114>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d10f      	bne.n	8000f40 <HAL_UART_ErrorCallback+0x10c>
		new_bms_data = 1;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_UART_ErrorCallback+0x118>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000f26:	2264      	movs	r2, #100	; 0x64
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <HAL_UART_ErrorCallback+0x11c>)
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <HAL_UART_ErrorCallback+0x120>)
 8000f2c:	f006 f84b 	bl	8006fc6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_UART_ErrorCallback+0x124>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_UART_ErrorCallback+0x124>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
	}
}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40013800 	.word	0x40013800
 8000f4c:	20000230 	.word	0x20000230
 8000f50:	200001cc 	.word	0x200001cc
 8000f54:	20000138 	.word	0x20000138
 8000f58:	20000180 	.word	0x20000180

08000f5c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d112      	bne.n	8000f98 <HAL_UARTEx_RxEventCallback+0x3c>
		new_bms_data = 1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UARTEx_RxEventCallback+0x48>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		data_size = Size;
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	8013      	strh	r3, [r2, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	490a      	ldr	r1, [pc, #40]	; (8000fac <HAL_UARTEx_RxEventCallback+0x50>)
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_UARTEx_RxEventCallback+0x54>)
 8000f84:	f006 f81f 	bl	8006fc6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_UARTEx_RxEventCallback+0x58>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0204 	bic.w	r2, r2, #4
 8000f96:	601a      	str	r2, [r3, #0]
	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40013800 	.word	0x40013800
 8000fa4:	20000230 	.word	0x20000230
 8000fa8:	20000232 	.word	0x20000232
 8000fac:	200001cc 	.word	0x200001cc
 8000fb0:	20000138 	.word	0x20000138
 8000fb4:	20000180 	.word	0x20000180

08000fb8 <CanMsgSend>:

	return 1;
}


uint8_t CanMsgSend(CanDataSendTypeDef *canDataSend) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

	TxHeader.StdId = canDataSend->canId;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <CanMsgSend+0x88>)
 8000fc6:	6013      	str	r3, [r2, #0]
	TxHeader.ExtId = canDataSend->canExtId;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <CanMsgSend+0x88>)
 8000fce:	6053      	str	r3, [r2, #4]
	TxHeader.RTR = canDataSend->canRTR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a1a      	ldr	r2, [pc, #104]	; (8001040 <CanMsgSend+0x88>)
 8000fd6:	60d3      	str	r3, [r2, #12]
	TxHeader.IDE = CAN_ID_EXT;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <CanMsgSend+0x88>)
 8000fda:	2204      	movs	r2, #4
 8000fdc:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <CanMsgSend+0x88>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <CanMsgSend+0x88>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	751a      	strb	r2, [r3, #20]
	//globData.can_mutex = 0;
	for (int i = 0; i < sizeof(TxData); i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e00c      	b.n	800100a <CanMsgSend+0x52>
		TxData[i] = canDataSend->canData[i];
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	7819      	ldrb	r1, [r3, #0]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <CanMsgSend+0x8c>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	460a      	mov	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(TxData); i++) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2b07      	cmp	r3, #7
 800100e:	d9ef      	bls.n	8000ff0 <CanMsgSend+0x38>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8001010:	bf00      	nop
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <CanMsgSend+0x90>)
 8001014:	f004 f8b5 	bl	8005182 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f9      	beq.n	8001012 <CanMsgSend+0x5a>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <CanMsgSend+0x94>)
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <CanMsgSend+0x8c>)
 8001022:	4907      	ldr	r1, [pc, #28]	; (8001040 <CanMsgSend+0x88>)
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <CanMsgSend+0x90>)
 8001026:	f003 ffdd 	bl	8004fe4 <HAL_CAN_AddTxMessage>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <CanMsgSend+0x7c>
		//HAL_UART_Transmit(&huart, (uint8_t*) "no_trans\r\n", 10, 100);
		return 0;
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <CanMsgSend+0x7e>
	}
	return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200002b4 	.word	0x200002b4
 8001044:	200002cc 	.word	0x200002cc
 8001048:	20000070 	.word	0x20000070
 800104c:	200002d4 	.word	0x200002d4

08001050 <Moving>:

void Moving() {
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0

	CanDataSendTypeDef canDataSend;

	static int move_axis_en = 0;
	static int lift_axis_en = 0;
	if (start_stop) {
 8001056:	4b63      	ldr	r3, [pc, #396]	; (80011e4 <Moving+0x194>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 808a 	beq.w	8001174 <Moving+0x124>
			canDataSend.canExtId = DRIVER_MOVE_ID + 0x06000000;
 8001060:	4b61      	ldr	r3, [pc, #388]	; (80011e8 <Moving+0x198>)
 8001062:	60bb      	str	r3, [r7, #8]
			canDataSend.canRTR = CAN_RTR_DATA;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
			if (!move_axis_en) {
 8001068:	4b60      	ldr	r3, [pc, #384]	; (80011ec <Moving+0x19c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d119      	bne.n	80010a4 <Moving+0x54>
				move_axis_en = 1;
 8001070:	4b5e      	ldr	r3, [pc, #376]	; (80011ec <Moving+0x19c>)
 8001072:	2201      	movs	r2, #1
 8001074:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 8001076:	2323      	movs	r3, #35	; 0x23
 8001078:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 800107a:	230d      	movs	r3, #13
 800107c:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 800107e:	2320      	movs	r3, #32
 8001080:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x01;
 8001082:	2301      	movs	r3, #1
 8001084:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 8001092:	2300      	movs	r3, #0
 8001094:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff8d 	bl	8000fb8 <CanMsgSend>
				HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f003 fd74 	bl	8004b8c <HAL_Delay>
			}
			if (!lift_axis_en) {
 80010a4:	4b52      	ldr	r3, [pc, #328]	; (80011f0 <Moving+0x1a0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d119      	bne.n	80010e0 <Moving+0x90>
				lift_axis_en = 1;
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <Moving+0x1a0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
				canDataSend.canData[0] = 0x23;
 80010b2:	2323      	movs	r3, #35	; 0x23
 80010b4:	743b      	strb	r3, [r7, #16]
				canDataSend.canData[1] = 0x0D;
 80010b6:	230d      	movs	r3, #13
 80010b8:	747b      	strb	r3, [r7, #17]
				canDataSend.canData[2] = 0x20;
 80010ba:	2320      	movs	r3, #32
 80010bc:	74bb      	strb	r3, [r7, #18]
				canDataSend.canData[3] = 0x02;
 80010be:	2302      	movs	r3, #2
 80010c0:	74fb      	strb	r3, [r7, #19]
				canDataSend.canData[4] = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	753b      	strb	r3, [r7, #20]
				canDataSend.canData[5] = 0x00;
 80010c6:	2300      	movs	r3, #0
 80010c8:	757b      	strb	r3, [r7, #21]
				canDataSend.canData[6] = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75bb      	strb	r3, [r7, #22]
				canDataSend.canData[7] = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
				CanMsgSend(&canDataSend);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff6f 	bl	8000fb8 <CanMsgSend>
				HAL_Delay(10);
 80010da:	200a      	movs	r0, #10
 80010dc:	f003 fd56 	bl	8004b8c <HAL_Delay>
			}
			static int32_t ch_velocity = 0;
			//if (motor1_speed) { //(l_current_move_comm == MOVE_FORW) {
			//HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)"can_send\r\n", 10, 100);
			canDataSend.canData[0] = 0x23;
 80010e0:	2323      	movs	r3, #35	; 0x23
 80010e2:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80010e8:	2320      	movs	r3, #32
 80010ea:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 80010ec:	2301      	movs	r3, #1
 80010ee:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 80010f0:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <Moving+0x1a4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a40      	ldr	r2, [pc, #256]	; (80011f8 <Moving+0x1a8>)
 80010f6:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 80010f8:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <Moving+0x1a8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	161b      	asrs	r3, r3, #24
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <Moving+0x1a8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	141b      	asrs	r3, r3, #16
 8001108:	b2db      	uxtb	r3, r3
 800110a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 800110c:	4b3a      	ldr	r3, [pc, #232]	; (80011f8 <Moving+0x1a8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	121b      	asrs	r3, r3, #8
 8001112:	b2db      	uxtb	r3, r3
 8001114:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <Moving+0x1a8>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff49 	bl	8000fb8 <CanMsgSend>
			HAL_Delay(2);
 8001126:	2002      	movs	r0, #2
 8001128:	f003 fd30 	bl	8004b8c <HAL_Delay>
			//}
			//else if (motor2_speed) {
			canDataSend.canData[0] = 0x23;
 800112c:	2323      	movs	r3, #35	; 0x23
 800112e:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 8001134:	2320      	movs	r3, #32
 8001136:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 8001138:	2302      	movs	r3, #2
 800113a:	74fb      	strb	r3, [r7, #19]
			ch_velocity = motor_speed;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <Moving+0x1a4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <Moving+0x1a8>)
 8001142:	6013      	str	r3, [r2, #0]
			canDataSend.canData[4] = ch_velocity >> 24;
 8001144:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <Moving+0x1a8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	161b      	asrs	r3, r3, #24
 800114a:	b2db      	uxtb	r3, r3
 800114c:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = ch_velocity >> 16;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <Moving+0x1a8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	141b      	asrs	r3, r3, #16
 8001154:	b2db      	uxtb	r3, r3
 8001156:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = ch_velocity >> 8;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <Moving+0x1a8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	121b      	asrs	r3, r3, #8
 800115e:	b2db      	uxtb	r3, r3
 8001160:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = ch_velocity;
 8001162:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <Moving+0x1a8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff23 	bl	8000fb8 <CanMsgSend>
 8001172:	e030      	b.n	80011d6 <Moving+0x186>
			//}
		}
		else
		{
			canDataSend.canData[0] = 0x23;
 8001174:	2323      	movs	r3, #35	; 0x23
 8001176:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 800117c:	2320      	movs	r3, #32
 800117e:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x01;
 8001180:	2301      	movs	r3, #1
 8001182:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 8001184:	2300      	movs	r3, #0
 8001186:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 8001188:	2300      	movs	r3, #0
 800118a:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff0e 	bl	8000fb8 <CanMsgSend>
			HAL_Delay(10);
 800119c:	200a      	movs	r0, #10
 800119e:	f003 fcf5 	bl	8004b8c <HAL_Delay>
			canDataSend.canData[0] = 0x23;
 80011a2:	2323      	movs	r3, #35	; 0x23
 80011a4:	743b      	strb	r3, [r7, #16]
			canDataSend.canData[1] = 0x00;
 80011a6:	2300      	movs	r3, #0
 80011a8:	747b      	strb	r3, [r7, #17]
			canDataSend.canData[2] = 0x20;
 80011aa:	2320      	movs	r3, #32
 80011ac:	74bb      	strb	r3, [r7, #18]
			canDataSend.canData[3] = 0x02;
 80011ae:	2302      	movs	r3, #2
 80011b0:	74fb      	strb	r3, [r7, #19]
			canDataSend.canData[4] = 0x00;
 80011b2:	2300      	movs	r3, #0
 80011b4:	753b      	strb	r3, [r7, #20]
			canDataSend.canData[5] = 0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	757b      	strb	r3, [r7, #21]
			canDataSend.canData[6] = 0x00;
 80011ba:	2300      	movs	r3, #0
 80011bc:	75bb      	strb	r3, [r7, #22]
			canDataSend.canData[7] = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	75fb      	strb	r3, [r7, #23]
			CanMsgSend(&canDataSend);
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fef7 	bl	8000fb8 <CanMsgSend>
			move_axis_en = 0;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <Moving+0x19c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
			lift_axis_en = 0;
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <Moving+0x1a0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(5);
 80011d6:	2005      	movs	r0, #5
 80011d8:	f003 fcd8 	bl	8004b8c <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200002ac 	.word	0x200002ac
 80011e8:	06000001 	.word	0x06000001
 80011ec:	2000035c 	.word	0x2000035c
 80011f0:	20000360 	.word	0x20000360
 80011f4:	200002b0 	.word	0x200002b0
 80011f8:	20000364 	.word	0x20000364

080011fc <read_bms_uart>:

void read_bms_uart() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if (new_bms_data)
 8001200:	4b49      	ldr	r3, [pc, #292]	; (8001328 <read_bms_uart+0x12c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <read_bms_uart+0x26>
	{
		new_bms_data = 0;
 8001208:	4b47      	ldr	r3, [pc, #284]	; (8001328 <read_bms_uart+0x12c>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
		rcGetBattery();
 800120e:	f000 f89b 	bl	8001348 <rcGetBattery>
		check_bms_i = 3;
 8001212:	4b46      	ldr	r3, [pc, #280]	; (800132c <read_bms_uart+0x130>)
 8001214:	2203      	movs	r2, #3
 8001216:	601a      	str	r2, [r3, #0]
		bms_req_time = HAL_GetTick();
 8001218:	f003 fcae 	bl	8004b78 <HAL_GetTick>
 800121c:	4603      	mov	r3, r0
 800121e:	4a44      	ldr	r2, [pc, #272]	; (8001330 <read_bms_uart+0x134>)
 8001220:	6013      	str	r3, [r2, #0]
	}
	if (check_bms_i == 0)
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <read_bms_uart+0x130>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d122      	bne.n	8001270 <read_bms_uart+0x74>
	{
		RE_DE_ON;
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001230:	4840      	ldr	r0, [pc, #256]	; (8001334 <read_bms_uart+0x138>)
 8001232:	f004 fd4a 	bl	8005cca <HAL_GPIO_WritePin>
 8001236:	2002      	movs	r0, #2
 8001238:	f003 fca8 	bl	8004b8c <HAL_Delay>
		HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg0, sizeof(bms_jbd_request_msg0), 100);
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	2207      	movs	r2, #7
 8001240:	493d      	ldr	r1, [pc, #244]	; (8001338 <read_bms_uart+0x13c>)
 8001242:	483e      	ldr	r0, [pc, #248]	; (800133c <read_bms_uart+0x140>)
 8001244:	f005 fe3c 	bl	8006ec0 <HAL_UART_Transmit>
		RE_DE_OFF;
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124e:	4839      	ldr	r0, [pc, #228]	; (8001334 <read_bms_uart+0x138>)
 8001250:	f004 fd3b 	bl	8005cca <HAL_GPIO_WritePin>
 8001254:	2001      	movs	r0, #1
 8001256:	f003 fc99 	bl	8004b8c <HAL_Delay>
		check_bms_i++;
 800125a:	4b34      	ldr	r3, [pc, #208]	; (800132c <read_bms_uart+0x130>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a32      	ldr	r2, [pc, #200]	; (800132c <read_bms_uart+0x130>)
 8001262:	6013      	str	r3, [r2, #0]
		bms_req_time = HAL_GetTick();
 8001264:	f003 fc88 	bl	8004b78 <HAL_GetTick>
 8001268:	4603      	mov	r3, r0
 800126a:	4a31      	ldr	r2, [pc, #196]	; (8001330 <read_bms_uart+0x134>)
 800126c:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - bms_req_time > 1000) {
			bms_req_time = HAL_GetTick();
			check_bms_i = 3;
		}
	}
}
 800126e:	e058      	b.n	8001322 <read_bms_uart+0x126>
	else if (check_bms_i == 1 && batteryMsg.bms_type == BMS_NONE)
 8001270:	4b2e      	ldr	r3, [pc, #184]	; (800132c <read_bms_uart+0x130>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d139      	bne.n	80012ec <read_bms_uart+0xf0>
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <read_bms_uart+0x144>)
 800127a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800127e:	2b00      	cmp	r3, #0
 8001280:	d134      	bne.n	80012ec <read_bms_uart+0xf0>
		if (HAL_GetTick() - bms_req_time > 500) {
 8001282:	f003 fc79 	bl	8004b78 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <read_bms_uart+0x134>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001292:	d946      	bls.n	8001322 <read_bms_uart+0x126>
			bms_smart_request_msg[2] = 0x90;
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <read_bms_uart+0x148>)
 8001296:	2290      	movs	r2, #144	; 0x90
 8001298:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[4] = 0x00;
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <read_bms_uart+0x148>)
 800129c:	2200      	movs	r2, #0
 800129e:	711a      	strb	r2, [r3, #4]
			bms_smart_request_msg[12] = 0x7D;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <read_bms_uart+0x148>)
 80012a2:	227d      	movs	r2, #125	; 0x7d
 80012a4:	731a      	strb	r2, [r3, #12]
			RE_DE_ON;
 80012a6:	2201      	movs	r2, #1
 80012a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ac:	4821      	ldr	r0, [pc, #132]	; (8001334 <read_bms_uart+0x138>)
 80012ae:	f004 fd0c 	bl	8005cca <HAL_GPIO_WritePin>
 80012b2:	2002      	movs	r0, #2
 80012b4:	f003 fc6a 	bl	8004b8c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	220d      	movs	r2, #13
 80012bc:	4921      	ldr	r1, [pc, #132]	; (8001344 <read_bms_uart+0x148>)
 80012be:	481f      	ldr	r0, [pc, #124]	; (800133c <read_bms_uart+0x140>)
 80012c0:	f005 fdfe 	bl	8006ec0 <HAL_UART_Transmit>
			RE_DE_OFF;
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	481a      	ldr	r0, [pc, #104]	; (8001334 <read_bms_uart+0x138>)
 80012cc:	f004 fcfd 	bl	8005cca <HAL_GPIO_WritePin>
 80012d0:	2001      	movs	r0, #1
 80012d2:	f003 fc5b 	bl	8004b8c <HAL_Delay>
			check_bms_i++;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <read_bms_uart+0x130>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <read_bms_uart+0x130>)
 80012de:	6013      	str	r3, [r2, #0]
			bms_req_time = HAL_GetTick();
 80012e0:	f003 fc4a 	bl	8004b78 <HAL_GetTick>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <read_bms_uart+0x134>)
 80012e8:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - bms_req_time > 500) {
 80012ea:	e01a      	b.n	8001322 <read_bms_uart+0x126>
	else if (check_bms_i == 2 && batteryMsg.bms_type == BMS_NONE)
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <read_bms_uart+0x130>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d116      	bne.n	8001322 <read_bms_uart+0x126>
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <read_bms_uart+0x144>)
 80012f6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <read_bms_uart+0x126>
		if (HAL_GetTick() - bms_req_time > 1000) {
 80012fe:	f003 fc3b 	bl	8004b78 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <read_bms_uart+0x134>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130e:	d908      	bls.n	8001322 <read_bms_uart+0x126>
			bms_req_time = HAL_GetTick();
 8001310:	f003 fc32 	bl	8004b78 <HAL_GetTick>
 8001314:	4603      	mov	r3, r0
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <read_bms_uart+0x134>)
 8001318:	6013      	str	r3, [r2, #0]
			check_bms_i = 3;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <read_bms_uart+0x130>)
 800131c:	2203      	movs	r2, #3
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	e7ff      	b.n	8001322 <read_bms_uart+0x126>
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000230 	.word	0x20000230
 800132c:	200002a4 	.word	0x200002a4
 8001330:	2000029c 	.word	0x2000029c
 8001334:	40011000 	.word	0x40011000
 8001338:	20000000 	.word	0x20000000
 800133c:	20000138 	.word	0x20000138
 8001340:	200002dc 	.word	0x200002dc
 8001344:	20000010 	.word	0x20000010

08001348 <rcGetBattery>:

void rcGetBattery() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
	if (batteryMsg.bms_type == BMS_NONE)
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <rcGetBattery+0x180>)
 8001350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d110      	bne.n	800137a <rcGetBattery+0x32>
	{
		if (bms_uart_buff[0] == 0xDD) batteryMsg.bms_type = BMS_JBD;
 8001358:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <rcGetBattery+0x184>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2bdd      	cmp	r3, #221	; 0xdd
 800135e:	d104      	bne.n	800136a <rcGetBattery+0x22>
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <rcGetBattery+0x180>)
 8001362:	2202      	movs	r2, #2
 8001364:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001368:	e007      	b.n	800137a <rcGetBattery+0x32>
		else if (bms_uart_buff[0] == 0xA5) batteryMsg.bms_type = BMS_SMART;
 800136a:	4b58      	ldr	r3, [pc, #352]	; (80014cc <rcGetBattery+0x184>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2ba5      	cmp	r3, #165	; 0xa5
 8001370:	d103      	bne.n	800137a <rcGetBattery+0x32>
 8001372:	4b55      	ldr	r3, [pc, #340]	; (80014c8 <rcGetBattery+0x180>)
 8001374:	2201      	movs	r2, #1
 8001376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
	if (batteryMsg.bms_type == BMS_SMART)
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <rcGetBattery+0x180>)
 800137c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001380:	2b01      	cmp	r3, #1
 8001382:	f040 81bb 	bne.w	80016fc <rcGetBattery+0x3b4>
	{
		uint8_t battery_comm = bms_uart_buff[2];
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <rcGetBattery+0x184>)
 8001388:	789b      	ldrb	r3, [r3, #2]
 800138a:	71bb      	strb	r3, [r7, #6]
		if (battery_comm == 0x90)
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	2b90      	cmp	r3, #144	; 0x90
 8001390:	d153      	bne.n	800143a <rcGetBattery+0xf2>
		{
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8001392:	4b4e      	ldr	r3, [pc, #312]	; (80014cc <rcGetBattery+0x184>)
 8001394:	791b      	ldrb	r3, [r3, #4]
 8001396:	b29b      	uxth	r3, r3
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <rcGetBattery+0x184>)
 800139e:	795b      	ldrb	r3, [r3, #5]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b48      	ldr	r3, [pc, #288]	; (80014c8 <rcGetBattery+0x180>)
 80013a8:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 80013aa:	4b48      	ldr	r3, [pc, #288]	; (80014cc <rcGetBattery+0x184>)
 80013ac:	7a1b      	ldrb	r3, [r3, #8]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <rcGetBattery+0x184>)
 80013b6:	7a5b      	ldrb	r3, [r3, #9]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <rcGetBattery+0x180>)
 80013c2:	80da      	strh	r2, [r3, #6]
			batteryMsg.capacity_percent = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 80013c4:	4b41      	ldr	r3, [pc, #260]	; (80014cc <rcGetBattery+0x184>)
 80013c6:	7a9b      	ldrb	r3, [r3, #10]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <rcGetBattery+0x184>)
 80013d0:	7adb      	ldrb	r3, [r3, #11]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <rcGetBattery+0x180>)
 80013da:	835a      	strh	r2, [r3, #26]
			battery_capacity = batteryMsg.capacity_percent/10;
 80013dc:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <rcGetBattery+0x180>)
 80013de:	8b5b      	ldrh	r3, [r3, #26]
 80013e0:	4a3b      	ldr	r2, [pc, #236]	; (80014d0 <rcGetBattery+0x188>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <rcGetBattery+0x18c>)
 80013ee:	601a      	str	r2, [r3, #0]
			bms_smart_request_msg[2] = 0x95;
 80013f0:	4b39      	ldr	r3, [pc, #228]	; (80014d8 <rcGetBattery+0x190>)
 80013f2:	2295      	movs	r2, #149	; 0x95
 80013f4:	709a      	strb	r2, [r3, #2]
			bms_smart_request_msg[12] = 0x82;
 80013f6:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <rcGetBattery+0x190>)
 80013f8:	2282      	movs	r2, #130	; 0x82
 80013fa:	731a      	strb	r2, [r3, #12]
			size_recv_buff = 0;
 80013fc:	4b37      	ldr	r3, [pc, #220]	; (80014dc <rcGetBattery+0x194>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
			HAL_Delay(50);
 8001402:	2032      	movs	r0, #50	; 0x32
 8001404:	f003 fbc2 	bl	8004b8c <HAL_Delay>
			RE_DE_ON;
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	4834      	ldr	r0, [pc, #208]	; (80014e0 <rcGetBattery+0x198>)
 8001410:	f004 fc5b 	bl	8005cca <HAL_GPIO_WritePin>
 8001414:	2002      	movs	r0, #2
 8001416:	f003 fbb9 	bl	8004b8c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_smart_request_msg, sizeof(bms_smart_request_msg), 100);
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	220d      	movs	r2, #13
 800141e:	492e      	ldr	r1, [pc, #184]	; (80014d8 <rcGetBattery+0x190>)
 8001420:	4830      	ldr	r0, [pc, #192]	; (80014e4 <rcGetBattery+0x19c>)
 8001422:	f005 fd4d 	bl	8006ec0 <HAL_UART_Transmit>
			RE_DE_OFF;
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <rcGetBattery+0x198>)
 800142e:	f004 fc4c 	bl	8005cca <HAL_GPIO_WritePin>
 8001432:	2001      	movs	r0, #1
 8001434:	f003 fbaa 	bl	8004b8c <HAL_Delay>
	}
	/*for (int i = 0; i < sizeof bms_uart_buff; i++)
	{
		bms_uart_buff[0] = 0;
	}*/
}
 8001438:	e2f7      	b.n	8001a2a <rcGetBattery+0x6e2>
		else if (battery_comm == 0x91)
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	2b91      	cmp	r3, #145	; 0x91
 800143e:	d118      	bne.n	8001472 <rcGetBattery+0x12a>
			batteryMsg.max_volt = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <rcGetBattery+0x184>)
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	b29b      	uxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b29a      	uxth	r2, r3
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <rcGetBattery+0x184>)
 800144c:	795b      	ldrb	r3, [r3, #5]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <rcGetBattery+0x180>)
 8001456:	851a      	strh	r2, [r3, #40]	; 0x28
			batteryMsg.min_volt = (bms_uart_buff[7] << 8) + bms_uart_buff[8];
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <rcGetBattery+0x184>)
 800145a:	79db      	ldrb	r3, [r3, #7]
 800145c:	b29b      	uxth	r3, r3
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <rcGetBattery+0x184>)
 8001464:	7a1b      	ldrb	r3, [r3, #8]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <rcGetBattery+0x180>)
 800146e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001470:	e2db      	b.n	8001a2a <rcGetBattery+0x6e2>
		else if (battery_comm == 0x92)
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	2b92      	cmp	r3, #146	; 0x92
 8001476:	f000 82d8 	beq.w	8001a2a <rcGetBattery+0x6e2>
		else if (battery_comm == 0x93)
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	2b93      	cmp	r3, #147	; 0x93
 800147e:	d111      	bne.n	80014a4 <rcGetBattery+0x15c>
			batteryMsg.remaining_capacity = (bms_uart_buff[8] << 24) +(bms_uart_buff[9] << 16) +(bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <rcGetBattery+0x184>)
 8001482:	7a1b      	ldrb	r3, [r3, #8]
 8001484:	061a      	lsls	r2, r3, #24
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <rcGetBattery+0x184>)
 8001488:	7a5b      	ldrb	r3, [r3, #9]
 800148a:	041b      	lsls	r3, r3, #16
 800148c:	441a      	add	r2, r3
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <rcGetBattery+0x184>)
 8001490:	7a9b      	ldrb	r3, [r3, #10]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4413      	add	r3, r2
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <rcGetBattery+0x184>)
 8001498:	7ad2      	ldrb	r2, [r2, #11]
 800149a:	4413      	add	r3, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <rcGetBattery+0x180>)
 80014a0:	609a      	str	r2, [r3, #8]
}
 80014a2:	e2c2      	b.n	8001a2a <rcGetBattery+0x6e2>
		else if (battery_comm == 0x94)
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b94      	cmp	r3, #148	; 0x94
 80014a8:	d108      	bne.n	80014bc <rcGetBattery+0x174>
			batteryMsg.num_of_battery = bms_uart_buff[4];
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <rcGetBattery+0x184>)
 80014ac:	791a      	ldrb	r2, [r3, #4]
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <rcGetBattery+0x180>)
 80014b0:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[5];
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <rcGetBattery+0x184>)
 80014b4:	795a      	ldrb	r2, [r3, #5]
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <rcGetBattery+0x180>)
 80014b8:	77da      	strb	r2, [r3, #31]
}
 80014ba:	e2b6      	b.n	8001a2a <rcGetBattery+0x6e2>
			int rc = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
			for (int i=size_recv_buff;i<(data_size+size_recv_buff);i++)
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <rcGetBattery+0x194>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	e01e      	b.n	8001506 <rcGetBattery+0x1be>
 80014c8:	200002dc 	.word	0x200002dc
 80014cc:	200001cc 	.word	0x200001cc
 80014d0:	cccccccd 	.word	0xcccccccd
 80014d4:	200002a0 	.word	0x200002a0
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000298 	.word	0x20000298
 80014e0:	40011000 	.word	0x40011000
 80014e4:	20000138 	.word	0x20000138
				smart_buff[i] = bms_uart_buff[rc];
 80014e8:	4a7f      	ldr	r2, [pc, #508]	; (80016e8 <rcGetBattery+0x3a0>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	4413      	add	r3, r2
 80014ee:	7819      	ldrb	r1, [r3, #0]
 80014f0:	4a7e      	ldr	r2, [pc, #504]	; (80016ec <rcGetBattery+0x3a4>)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	460a      	mov	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
				rc++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
			for (int i=size_recv_buff;i<(data_size+size_recv_buff);i++)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3301      	adds	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <rcGetBattery+0x3a8>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	4b79      	ldr	r3, [pc, #484]	; (80016f4 <rcGetBattery+0x3ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbe7      	blt.n	80014e8 <rcGetBattery+0x1a0>
			size_recv_buff += data_size;
 8001518:	4b75      	ldr	r3, [pc, #468]	; (80016f0 <rcGetBattery+0x3a8>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <rcGetBattery+0x3ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a73      	ldr	r2, [pc, #460]	; (80016f4 <rcGetBattery+0x3ac>)
 8001526:	6013      	str	r3, [r2, #0]
			if (size_recv_buff == 78)
 8001528:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <rcGetBattery+0x3ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b4e      	cmp	r3, #78	; 0x4e
 800152e:	f040 827c 	bne.w	8001a2a <rcGetBattery+0x6e2>
				batteryMsg.cell_0 = (bms_uart_buff[5] << 8) + bms_uart_buff[6];
 8001532:	4b6d      	ldr	r3, [pc, #436]	; (80016e8 <rcGetBattery+0x3a0>)
 8001534:	795b      	ldrb	r3, [r3, #5]
 8001536:	b29b      	uxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <rcGetBattery+0x3a0>)
 800153e:	799b      	ldrb	r3, [r3, #6]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b29a      	uxth	r2, r3
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <rcGetBattery+0x3b0>)
 8001548:	859a      	strh	r2, [r3, #44]	; 0x2c
				batteryMsg.cell_1 = (smart_buff[7] << 8) + smart_buff[8];
 800154a:	4b68      	ldr	r3, [pc, #416]	; (80016ec <rcGetBattery+0x3a4>)
 800154c:	79db      	ldrb	r3, [r3, #7]
 800154e:	b29b      	uxth	r3, r3
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b65      	ldr	r3, [pc, #404]	; (80016ec <rcGetBattery+0x3a4>)
 8001556:	7a1b      	ldrb	r3, [r3, #8]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4413      	add	r3, r2
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <rcGetBattery+0x3b0>)
 8001560:	85da      	strh	r2, [r3, #46]	; 0x2e
				batteryMsg.cell_2 = (smart_buff[9] << 8) + smart_buff[10];
 8001562:	4b62      	ldr	r3, [pc, #392]	; (80016ec <rcGetBattery+0x3a4>)
 8001564:	7a5b      	ldrb	r3, [r3, #9]
 8001566:	b29b      	uxth	r3, r3
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b5f      	ldr	r3, [pc, #380]	; (80016ec <rcGetBattery+0x3a4>)
 800156e:	7a9b      	ldrb	r3, [r3, #10]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <rcGetBattery+0x3b0>)
 8001578:	861a      	strh	r2, [r3, #48]	; 0x30
				batteryMsg.cell_3 = (smart_buff[5+13] << 8) + smart_buff[(6+13)];
 800157a:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <rcGetBattery+0x3a4>)
 800157c:	7c9b      	ldrb	r3, [r3, #18]
 800157e:	b29b      	uxth	r3, r3
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <rcGetBattery+0x3a4>)
 8001586:	7cdb      	ldrb	r3, [r3, #19]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <rcGetBattery+0x3b0>)
 8001590:	865a      	strh	r2, [r3, #50]	; 0x32
				batteryMsg.cell_4 = (smart_buff[(7+13)] << 8) + smart_buff[(8+13)];
 8001592:	4b56      	ldr	r3, [pc, #344]	; (80016ec <rcGetBattery+0x3a4>)
 8001594:	7d1b      	ldrb	r3, [r3, #20]
 8001596:	b29b      	uxth	r3, r3
 8001598:	021b      	lsls	r3, r3, #8
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b53      	ldr	r3, [pc, #332]	; (80016ec <rcGetBattery+0x3a4>)
 800159e:	7d5b      	ldrb	r3, [r3, #21]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <rcGetBattery+0x3b0>)
 80015a8:	869a      	strh	r2, [r3, #52]	; 0x34
				batteryMsg.cell_5 = (smart_buff[9+13] << 8) + smart_buff[10+13];
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <rcGetBattery+0x3a4>)
 80015ac:	7d9b      	ldrb	r3, [r3, #22]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b4d      	ldr	r3, [pc, #308]	; (80016ec <rcGetBattery+0x3a4>)
 80015b6:	7ddb      	ldrb	r3, [r3, #23]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	b29a      	uxth	r2, r3
 80015be:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <rcGetBattery+0x3b0>)
 80015c0:	86da      	strh	r2, [r3, #54]	; 0x36
				batteryMsg.cell_6 = (smart_buff[5+13*2] << 8) + smart_buff[6+13*2];
 80015c2:	4b4a      	ldr	r3, [pc, #296]	; (80016ec <rcGetBattery+0x3a4>)
 80015c4:	7fdb      	ldrb	r3, [r3, #31]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b47      	ldr	r3, [pc, #284]	; (80016ec <rcGetBattery+0x3a4>)
 80015ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <rcGetBattery+0x3b0>)
 80015da:	871a      	strh	r2, [r3, #56]	; 0x38
				batteryMsg.cell_7 = (smart_buff[7+13*2] << 8) + smart_buff[8+13*2];
 80015dc:	4b43      	ldr	r3, [pc, #268]	; (80016ec <rcGetBattery+0x3a4>)
 80015de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b40      	ldr	r3, [pc, #256]	; (80016ec <rcGetBattery+0x3a4>)
 80015ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <rcGetBattery+0x3b0>)
 80015f6:	875a      	strh	r2, [r3, #58]	; 0x3a
				batteryMsg.cell_8 = (smart_buff[9+13*2] << 8) + smart_buff[10+13*2];
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <rcGetBattery+0x3a4>)
 80015fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015fe:	b29b      	uxth	r3, r3
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b29a      	uxth	r2, r3
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <rcGetBattery+0x3a4>)
 8001606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800160a:	b29b      	uxth	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b39      	ldr	r3, [pc, #228]	; (80016f8 <rcGetBattery+0x3b0>)
 8001612:	879a      	strh	r2, [r3, #60]	; 0x3c
				batteryMsg.cell_9 = (smart_buff[5+13*3] << 8) + smart_buff[6+13*3];
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <rcGetBattery+0x3a4>)
 8001616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800161a:	b29b      	uxth	r3, r3
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <rcGetBattery+0x3a4>)
 8001622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001626:	b29b      	uxth	r3, r3
 8001628:	4413      	add	r3, r2
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <rcGetBattery+0x3b0>)
 800162e:	87da      	strh	r2, [r3, #62]	; 0x3e
				batteryMsg.cell_10 = (smart_buff[7+13*3] << 8) + smart_buff[8+13*3];
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <rcGetBattery+0x3a4>)
 8001632:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001636:	b29b      	uxth	r3, r3
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <rcGetBattery+0x3a4>)
 800163e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <rcGetBattery+0x3b0>)
 800164a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				batteryMsg.cell_11 = (smart_buff[9+13*3] << 8) + smart_buff[10+13*3];
 800164e:	4b27      	ldr	r3, [pc, #156]	; (80016ec <rcGetBattery+0x3a4>)
 8001650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001654:	b29b      	uxth	r3, r3
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b24      	ldr	r3, [pc, #144]	; (80016ec <rcGetBattery+0x3a4>)
 800165c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <rcGetBattery+0x3b0>)
 8001668:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
				batteryMsg.cell_12 = (smart_buff[5+13*4] << 8) + smart_buff[6+13*4];
 800166c:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <rcGetBattery+0x3a4>)
 800166e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001672:	b29b      	uxth	r3, r3
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <rcGetBattery+0x3a4>)
 800167a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800167e:	b29b      	uxth	r3, r3
 8001680:	4413      	add	r3, r2
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <rcGetBattery+0x3b0>)
 8001686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				batteryMsg.cell_13 = (smart_buff[7+13*4] << 8) + smart_buff[8+13*4];
 800168a:	4b18      	ldr	r3, [pc, #96]	; (80016ec <rcGetBattery+0x3a4>)
 800168c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001690:	b29b      	uxth	r3, r3
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <rcGetBattery+0x3a4>)
 8001698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800169c:	b29b      	uxth	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <rcGetBattery+0x3b0>)
 80016a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				batteryMsg.cell_14 = (smart_buff[9+13*4] << 8) + smart_buff[10+13*4];
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <rcGetBattery+0x3a4>)
 80016aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <rcGetBattery+0x3a4>)
 80016b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4413      	add	r3, r2
 80016be:	b29a      	uxth	r2, r3
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <rcGetBattery+0x3b0>)
 80016c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				batteryMsg.cell_15 = (smart_buff[5+13*5] << 8) + smart_buff[6+13*5];
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <rcGetBattery+0x3a4>)
 80016c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <rcGetBattery+0x3a4>)
 80016d4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <rcGetBattery+0x3b0>)
 80016e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 80016e4:	e1a1      	b.n	8001a2a <rcGetBattery+0x6e2>
 80016e6:	bf00      	nop
 80016e8:	200001cc 	.word	0x200001cc
 80016ec:	20000234 	.word	0x20000234
 80016f0:	20000232 	.word	0x20000232
 80016f4:	20000298 	.word	0x20000298
 80016f8:	200002dc 	.word	0x200002dc
	else if (batteryMsg.bms_type == BMS_JBD)
 80016fc:	4b5b      	ldr	r3, [pc, #364]	; (800186c <rcGetBattery+0x524>)
 80016fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001702:	2b02      	cmp	r3, #2
 8001704:	f040 8191 	bne.w	8001a2a <rcGetBattery+0x6e2>
		uint8_t battery_comm = bms_uart_buff[1];
 8001708:	4b59      	ldr	r3, [pc, #356]	; (8001870 <rcGetBattery+0x528>)
 800170a:	785b      	ldrb	r3, [r3, #1]
 800170c:	71fb      	strb	r3, [r7, #7]
		if (battery_comm == 0x03)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b03      	cmp	r3, #3
 8001712:	f040 80b7 	bne.w	8001884 <rcGetBattery+0x53c>
			batteryMsg.voltage = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <rcGetBattery+0x528>)
 8001718:	791b      	ldrb	r3, [r3, #4]
 800171a:	b29b      	uxth	r3, r3
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b53      	ldr	r3, [pc, #332]	; (8001870 <rcGetBattery+0x528>)
 8001722:	795b      	ldrb	r3, [r3, #5]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <rcGetBattery+0x524>)
 800172c:	809a      	strh	r2, [r3, #4]
			batteryMsg.current = 0;//(bms_uart_buff[6] << 8) + bms_uart_buff[7];
 800172e:	4b4f      	ldr	r3, [pc, #316]	; (800186c <rcGetBattery+0x524>)
 8001730:	2200      	movs	r2, #0
 8001732:	80da      	strh	r2, [r3, #6]
			batteryMsg.remaining_capacity = (uint32_t)((bms_uart_buff[8] << 8) + bms_uart_buff[9]);
 8001734:	4b4e      	ldr	r3, [pc, #312]	; (8001870 <rcGetBattery+0x528>)
 8001736:	7a1b      	ldrb	r3, [r3, #8]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <rcGetBattery+0x528>)
 800173c:	7a52      	ldrb	r2, [r2, #9]
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <rcGetBattery+0x524>)
 8001744:	609a      	str	r2, [r3, #8]
			batteryMsg.nominal_capacity = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 8001746:	4b4a      	ldr	r3, [pc, #296]	; (8001870 <rcGetBattery+0x528>)
 8001748:	7a9b      	ldrb	r3, [r3, #10]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <rcGetBattery+0x528>)
 8001752:	7adb      	ldrb	r3, [r3, #11]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <rcGetBattery+0x524>)
 800175c:	819a      	strh	r2, [r3, #12]
			batteryMsg.cycles = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <rcGetBattery+0x528>)
 8001760:	7b1b      	ldrb	r3, [r3, #12]
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b41      	ldr	r3, [pc, #260]	; (8001870 <rcGetBattery+0x528>)
 800176a:	7b5b      	ldrb	r3, [r3, #13]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b3e      	ldr	r3, [pc, #248]	; (800186c <rcGetBattery+0x524>)
 8001774:	821a      	strh	r2, [r3, #16]
			batteryMsg.date = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <rcGetBattery+0x528>)
 8001778:	7b9b      	ldrb	r3, [r3, #14]
 800177a:	b29b      	uxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <rcGetBattery+0x528>)
 8001782:	7bdb      	ldrb	r3, [r3, #15]
 8001784:	b29b      	uxth	r3, r3
 8001786:	4413      	add	r3, r2
 8001788:	b29a      	uxth	r2, r3
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <rcGetBattery+0x524>)
 800178c:	825a      	strh	r2, [r3, #18]
			batteryMsg.balance_low = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <rcGetBattery+0x528>)
 8001790:	7c1b      	ldrb	r3, [r3, #16]
 8001792:	b29b      	uxth	r3, r3
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b29a      	uxth	r2, r3
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <rcGetBattery+0x528>)
 800179a:	7c5b      	ldrb	r3, [r3, #17]
 800179c:	b29b      	uxth	r3, r3
 800179e:	4413      	add	r3, r2
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b32      	ldr	r3, [pc, #200]	; (800186c <rcGetBattery+0x524>)
 80017a4:	829a      	strh	r2, [r3, #20]
			batteryMsg.balance_high = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <rcGetBattery+0x528>)
 80017a8:	7c9b      	ldrb	r3, [r3, #18]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <rcGetBattery+0x528>)
 80017b2:	7cdb      	ldrb	r3, [r3, #19]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <rcGetBattery+0x524>)
 80017bc:	82da      	strh	r2, [r3, #22]
			batteryMsg.protection = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 80017be:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <rcGetBattery+0x528>)
 80017c0:	7d1b      	ldrb	r3, [r3, #20]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <rcGetBattery+0x528>)
 80017ca:	7d5b      	ldrb	r3, [r3, #21]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <rcGetBattery+0x524>)
 80017d4:	831a      	strh	r2, [r3, #24]
			batteryMsg.version = bms_uart_buff[22];
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <rcGetBattery+0x528>)
 80017d8:	7d9a      	ldrb	r2, [r3, #22]
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <rcGetBattery+0x524>)
 80017dc:	771a      	strb	r2, [r3, #28]
			batteryMsg.capacity_percent = (uint16_t)bms_uart_buff[23];
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <rcGetBattery+0x528>)
 80017e0:	7ddb      	ldrb	r3, [r3, #23]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <rcGetBattery+0x524>)
 80017e6:	835a      	strh	r2, [r3, #26]
			batteryMsg.MOS_state = bms_uart_buff[24];
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <rcGetBattery+0x528>)
 80017ea:	7e1a      	ldrb	r2, [r3, #24]
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <rcGetBattery+0x524>)
 80017ee:	775a      	strb	r2, [r3, #29]
			batteryMsg.num_of_battery = bms_uart_buff[25];
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <rcGetBattery+0x528>)
 80017f2:	7e5a      	ldrb	r2, [r3, #25]
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <rcGetBattery+0x524>)
 80017f6:	779a      	strb	r2, [r3, #30]
			batteryMsg.num_of_NTC = bms_uart_buff[26];
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <rcGetBattery+0x528>)
 80017fa:	7e9a      	ldrb	r2, [r3, #26]
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <rcGetBattery+0x524>)
 80017fe:	77da      	strb	r2, [r3, #31]
			batteryMsg.temp1 = ((bms_uart_buff[27] << 8) + bms_uart_buff[28]);
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <rcGetBattery+0x528>)
 8001802:	7edb      	ldrb	r3, [r3, #27]
 8001804:	b29b      	uxth	r3, r3
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	b29a      	uxth	r2, r3
 800180a:	4b19      	ldr	r3, [pc, #100]	; (8001870 <rcGetBattery+0x528>)
 800180c:	7f1b      	ldrb	r3, [r3, #28]
 800180e:	b29b      	uxth	r3, r3
 8001810:	4413      	add	r3, r2
 8001812:	b29a      	uxth	r2, r3
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <rcGetBattery+0x524>)
 8001816:	841a      	strh	r2, [r3, #32]
			batteryMsg.temp2 = ((bms_uart_buff[29] << 8) + bms_uart_buff[30]);
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <rcGetBattery+0x528>)
 800181a:	7f5b      	ldrb	r3, [r3, #29]
 800181c:	b29b      	uxth	r3, r3
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <rcGetBattery+0x528>)
 8001824:	7f9b      	ldrb	r3, [r3, #30]
 8001826:	b29b      	uxth	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <rcGetBattery+0x524>)
 800182e:	845a      	strh	r2, [r3, #34]	; 0x22
			battery_capacity = batteryMsg.capacity_percent;
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <rcGetBattery+0x524>)
 8001832:	8b5b      	ldrh	r3, [r3, #26]
 8001834:	461a      	mov	r2, r3
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <rcGetBattery+0x52c>)
 8001838:	601a      	str	r2, [r3, #0]
			RE_DE_ON;
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <rcGetBattery+0x530>)
 8001842:	f004 fa42 	bl	8005cca <HAL_GPIO_WritePin>
 8001846:	2002      	movs	r0, #2
 8001848:	f003 f9a0 	bl	8004b8c <HAL_Delay>
			HAL_UART_Transmit(&huart1, (uint8_t*)bms_jbd_request_msg1, sizeof(bms_jbd_request_msg1), 100);
 800184c:	2364      	movs	r3, #100	; 0x64
 800184e:	2207      	movs	r2, #7
 8001850:	490a      	ldr	r1, [pc, #40]	; (800187c <rcGetBattery+0x534>)
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <rcGetBattery+0x538>)
 8001854:	f005 fb34 	bl	8006ec0 <HAL_UART_Transmit>
			RE_DE_OFF;
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <rcGetBattery+0x530>)
 8001860:	f004 fa33 	bl	8005cca <HAL_GPIO_WritePin>
 8001864:	2001      	movs	r0, #1
 8001866:	f003 f991 	bl	8004b8c <HAL_Delay>
}
 800186a:	e0de      	b.n	8001a2a <rcGetBattery+0x6e2>
 800186c:	200002dc 	.word	0x200002dc
 8001870:	200001cc 	.word	0x200001cc
 8001874:	200002a0 	.word	0x200002a0
 8001878:	40011000 	.word	0x40011000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000138 	.word	0x20000138
		else if (battery_comm == 0x04)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2b04      	cmp	r3, #4
 8001888:	f040 80cf 	bne.w	8001a2a <rcGetBattery+0x6e2>
			batteryMsg.battery_pack = bms_uart_buff[3];
 800188c:	4b69      	ldr	r3, [pc, #420]	; (8001a34 <rcGetBattery+0x6ec>)
 800188e:	78da      	ldrb	r2, [r3, #3]
 8001890:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <rcGetBattery+0x6f0>)
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			batteryMsg.cell_0 = (bms_uart_buff[4] << 8) + bms_uart_buff[5];
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <rcGetBattery+0x6ec>)
 8001898:	791b      	ldrb	r3, [r3, #4]
 800189a:	b29b      	uxth	r3, r3
 800189c:	021b      	lsls	r3, r3, #8
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b64      	ldr	r3, [pc, #400]	; (8001a34 <rcGetBattery+0x6ec>)
 80018a2:	795b      	ldrb	r3, [r3, #5]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <rcGetBattery+0x6f0>)
 80018ac:	859a      	strh	r2, [r3, #44]	; 0x2c
			batteryMsg.cell_1 = (bms_uart_buff[6] << 8) + bms_uart_buff[7];
 80018ae:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <rcGetBattery+0x6ec>)
 80018b0:	799b      	ldrb	r3, [r3, #6]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	021b      	lsls	r3, r3, #8
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <rcGetBattery+0x6ec>)
 80018ba:	79db      	ldrb	r3, [r3, #7]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4413      	add	r3, r2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <rcGetBattery+0x6f0>)
 80018c4:	85da      	strh	r2, [r3, #46]	; 0x2e
			batteryMsg.cell_2 = (bms_uart_buff[8] << 8) + bms_uart_buff[9];
 80018c6:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <rcGetBattery+0x6ec>)
 80018c8:	7a1b      	ldrb	r3, [r3, #8]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	4b58      	ldr	r3, [pc, #352]	; (8001a34 <rcGetBattery+0x6ec>)
 80018d2:	7a5b      	ldrb	r3, [r3, #9]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <rcGetBattery+0x6f0>)
 80018dc:	861a      	strh	r2, [r3, #48]	; 0x30
			batteryMsg.cell_3 = (bms_uart_buff[10] << 8) + bms_uart_buff[11];
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <rcGetBattery+0x6ec>)
 80018e0:	7a9b      	ldrb	r3, [r3, #10]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <rcGetBattery+0x6ec>)
 80018ea:	7adb      	ldrb	r3, [r3, #11]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <rcGetBattery+0x6f0>)
 80018f4:	865a      	strh	r2, [r3, #50]	; 0x32
			batteryMsg.cell_4 = (bms_uart_buff[12] << 8) + bms_uart_buff[13];
 80018f6:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <rcGetBattery+0x6ec>)
 80018f8:	7b1b      	ldrb	r3, [r3, #12]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <rcGetBattery+0x6ec>)
 8001902:	7b5b      	ldrb	r3, [r3, #13]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4413      	add	r3, r2
 8001908:	b29a      	uxth	r2, r3
 800190a:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <rcGetBattery+0x6f0>)
 800190c:	869a      	strh	r2, [r3, #52]	; 0x34
			batteryMsg.cell_5 = (bms_uart_buff[14] << 8) + bms_uart_buff[15];
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <rcGetBattery+0x6ec>)
 8001910:	7b9b      	ldrb	r3, [r3, #14]
 8001912:	b29b      	uxth	r3, r3
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <rcGetBattery+0x6ec>)
 800191a:	7bdb      	ldrb	r3, [r3, #15]
 800191c:	b29b      	uxth	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b29a      	uxth	r2, r3
 8001922:	4b45      	ldr	r3, [pc, #276]	; (8001a38 <rcGetBattery+0x6f0>)
 8001924:	86da      	strh	r2, [r3, #54]	; 0x36
			batteryMsg.cell_6 = (bms_uart_buff[16] << 8) + bms_uart_buff[17];
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <rcGetBattery+0x6ec>)
 8001928:	7c1b      	ldrb	r3, [r3, #16]
 800192a:	b29b      	uxth	r3, r3
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <rcGetBattery+0x6ec>)
 8001932:	7c5b      	ldrb	r3, [r3, #17]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <rcGetBattery+0x6f0>)
 800193c:	871a      	strh	r2, [r3, #56]	; 0x38
			batteryMsg.cell_7 = (bms_uart_buff[18] << 8) + bms_uart_buff[19];
 800193e:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <rcGetBattery+0x6ec>)
 8001940:	7c9b      	ldrb	r3, [r3, #18]
 8001942:	b29b      	uxth	r3, r3
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b29a      	uxth	r2, r3
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <rcGetBattery+0x6ec>)
 800194a:	7cdb      	ldrb	r3, [r3, #19]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <rcGetBattery+0x6f0>)
 8001954:	875a      	strh	r2, [r3, #58]	; 0x3a
			batteryMsg.cell_8 = (bms_uart_buff[20] << 8) + bms_uart_buff[21];
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <rcGetBattery+0x6ec>)
 8001958:	7d1b      	ldrb	r3, [r3, #20]
 800195a:	b29b      	uxth	r3, r3
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <rcGetBattery+0x6ec>)
 8001962:	7d5b      	ldrb	r3, [r3, #21]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <rcGetBattery+0x6f0>)
 800196c:	879a      	strh	r2, [r3, #60]	; 0x3c
			batteryMsg.cell_9 = (bms_uart_buff[22] << 8) + bms_uart_buff[23];
 800196e:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <rcGetBattery+0x6ec>)
 8001970:	7d9b      	ldrb	r3, [r3, #22]
 8001972:	b29b      	uxth	r3, r3
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	b29a      	uxth	r2, r3
 8001978:	4b2e      	ldr	r3, [pc, #184]	; (8001a34 <rcGetBattery+0x6ec>)
 800197a:	7ddb      	ldrb	r3, [r3, #23]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <rcGetBattery+0x6f0>)
 8001984:	87da      	strh	r2, [r3, #62]	; 0x3e
			batteryMsg.cell_10 = (bms_uart_buff[24] << 8) + bms_uart_buff[25];
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <rcGetBattery+0x6ec>)
 8001988:	7e1b      	ldrb	r3, [r3, #24]
 800198a:	b29b      	uxth	r3, r3
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b29a      	uxth	r2, r3
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <rcGetBattery+0x6ec>)
 8001992:	7e5b      	ldrb	r3, [r3, #25]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b29a      	uxth	r2, r3
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <rcGetBattery+0x6f0>)
 800199c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			batteryMsg.cell_11 = (bms_uart_buff[26] << 8) + bms_uart_buff[27];
 80019a0:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <rcGetBattery+0x6ec>)
 80019a2:	7e9b      	ldrb	r3, [r3, #26]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b22      	ldr	r3, [pc, #136]	; (8001a34 <rcGetBattery+0x6ec>)
 80019ac:	7edb      	ldrb	r3, [r3, #27]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <rcGetBattery+0x6f0>)
 80019b6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			batteryMsg.cell_12 = (bms_uart_buff[28] << 8) + bms_uart_buff[29];
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <rcGetBattery+0x6ec>)
 80019bc:	7f1b      	ldrb	r3, [r3, #28]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <rcGetBattery+0x6ec>)
 80019c6:	7f5b      	ldrb	r3, [r3, #29]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <rcGetBattery+0x6f0>)
 80019d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			batteryMsg.cell_13 = (bms_uart_buff[30] << 8) + bms_uart_buff[31];
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <rcGetBattery+0x6ec>)
 80019d6:	7f9b      	ldrb	r3, [r3, #30]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <rcGetBattery+0x6ec>)
 80019e0:	7fdb      	ldrb	r3, [r3, #31]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <rcGetBattery+0x6f0>)
 80019ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			batteryMsg.cell_14 = (bms_uart_buff[32] << 8) + bms_uart_buff[33];
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <rcGetBattery+0x6ec>)
 80019f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <rcGetBattery+0x6ec>)
 80019fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4413      	add	r3, r2
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <rcGetBattery+0x6f0>)
 8001a08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			batteryMsg.cell_15 = (bms_uart_buff[34] << 8) + bms_uart_buff[35];
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <rcGetBattery+0x6ec>)
 8001a0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <rcGetBattery+0x6ec>)
 8001a1a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <rcGetBattery+0x6f0>)
 8001a26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001cc 	.word	0x200001cc
 8001a38:	200002dc 	.word	0x200002dc

08001a3c <unwrap_encoder>:

int32_t unwrap_encoder(uint16_t in, int32_t *prev)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	80fb      	strh	r3, [r7, #6]
    int32_t c32 = (int32_t)in - ENC_HALF_PERIOD;
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001a4e:	613b      	str	r3, [r7, #16]
    int32_t dif = (c32-*prev);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	60fb      	str	r3, [r7, #12]

    int32_t mod_dif = ((dif + ENC_HALF_PERIOD) % ENC_ONE_PERIOD) - ENC_HALF_PERIOD;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a60:	425a      	negs	r2, r3
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	b292      	uxth	r2, r2
 8001a66:	bf58      	it	pl
 8001a68:	4253      	negpl	r3, r2
 8001a6a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001a6e:	617b      	str	r3, [r7, #20]
    if(dif < -ENC_HALF_PERIOD) {
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001a76:	da03      	bge.n	8001a80 <unwrap_encoder+0x44>
        mod_dif += ENC_ONE_PERIOD;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001a7e:	617b      	str	r3, [r7, #20]
    }
    int32_t unwrapped = *prev + mod_dif;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4413      	add	r3, r2
 8001a88:	60bb      	str	r3, [r7, #8]
    *prev = unwrapped;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	601a      	str	r2, [r3, #0]

    return unwrapped + ENC_HALF_PERIOD;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <getEncoder>:

void getEncoder()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
	int currCounter = __HAL_TIM_GET_COUNTER(&htim4);
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <getEncoder+0x28>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	607b      	str	r3, [r7, #4]
	enc_idle_tick = unwrap_encoder(currCounter, &enc_prev);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4906      	ldr	r1, [pc, #24]	; (8001acc <getEncoder+0x2c>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ffc1 	bl	8001a3c <unwrap_encoder>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <getEncoder+0x30>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000f0 	.word	0x200000f0
 8001acc:	200001c4 	.word	0x200001c4
 8001ad0:	200001c8 	.word	0x200001c8

08001ad4 <buttons_Init>:

void buttons_Init()
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	stButtons[0].button_port = BUTTON1_GPIO_Port;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <buttons_Init+0x44>)
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <buttons_Init+0x48>)
 8001adc:	601a      	str	r2, [r3, #0]
	stButtons[0].button_pin = BUTTON1_Pin;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <buttons_Init+0x44>)
 8001ae0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ae4:	809a      	strh	r2, [r3, #4]
	stButtons[1].button_port = BUTTON2_GPIO_Port;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <buttons_Init+0x44>)
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <buttons_Init+0x48>)
 8001aea:	60da      	str	r2, [r3, #12]
	stButtons[1].button_pin = BUTTON2_Pin;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <buttons_Init+0x44>)
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	821a      	strh	r2, [r3, #16]
	stButtons[2].button_port = BUTTON3_GPIO_Port;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <buttons_Init+0x44>)
 8001af6:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <buttons_Init+0x48>)
 8001af8:	619a      	str	r2, [r3, #24]
	stButtons[2].button_pin = BUTTON3_Pin;
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <buttons_Init+0x44>)
 8001afc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b00:	839a      	strh	r2, [r3, #28]
	stButtons[3].button_port = BUTTON4_GPIO_Port;
 8001b02:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <buttons_Init+0x44>)
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <buttons_Init+0x48>)
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
	stButtons[3].button_pin = BUTTON4_Pin;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <buttons_Init+0x44>)
 8001b0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	2000032c 	.word	0x2000032c
 8001b1c:	40010c00 	.word	0x40010c00

08001b20 <getButton>:
uint8_t short_state = 0;
uint8_t long_state = 0;
uint32_t time_key1 = 0;

void getButton()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
	for (int i=0; i<4; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e171      	b.n	8001e10 <getButton+0x2f0>
	{
		uint32_t ms = HAL_GetTick();
 8001b2c:	f003 f824 	bl	8004b78 <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
		uint8_t key_state = HAL_GPIO_ReadPin(stButtons[i].button_port, stButtons[i].button_pin);
 8001b32:	4997      	ldr	r1, [pc, #604]	; (8001d90 <getButton+0x270>)
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	6818      	ldr	r0, [r3, #0]
 8001b42:	4993      	ldr	r1, [pc, #588]	; (8001d90 <getButton+0x270>)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	3304      	adds	r3, #4
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f004 f8a1 	bl	8005c9c <HAL_GPIO_ReadPin>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
		if(key_state == 0 && !stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d136      	bne.n	8001bd2 <getButton+0xb2>
 8001b64:	498a      	ldr	r1, [pc, #552]	; (8001d90 <getButton+0x270>)
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3306      	adds	r3, #6
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d12b      	bne.n	8001bd2 <getButton+0xb2>
 8001b7a:	4985      	ldr	r1, [pc, #532]	; (8001d90 <getButton+0x270>)
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3308      	adds	r3, #8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b32      	cmp	r3, #50	; 0x32
 8001b92:	d91e      	bls.n	8001bd2 <getButton+0xb2>
		{
			stButtons[i].short_state = 1;
 8001b94:	497e      	ldr	r1, [pc, #504]	; (8001d90 <getButton+0x270>)
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
			stButtons[i].long_state = 0;
 8001ba8:	4979      	ldr	r1, [pc, #484]	; (8001d90 <getButton+0x270>)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3307      	adds	r3, #7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8001bbc:	4974      	ldr	r1, [pc, #464]	; (8001d90 <getButton+0x270>)
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	3308      	adds	r3, #8
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e11b      	b.n	8001e0a <getButton+0x2ea>
		}
		else if(key_state == 0 && !stButtons[i].long_state && (ms - stButtons[i].time_key) > 1000)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d141      	bne.n	8001c5c <getButton+0x13c>
 8001bd8:	496d      	ldr	r1, [pc, #436]	; (8001d90 <getButton+0x270>)
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3307      	adds	r3, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d136      	bne.n	8001c5c <getButton+0x13c>
 8001bee:	4968      	ldr	r1, [pc, #416]	; (8001d90 <getButton+0x270>)
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3308      	adds	r3, #8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c08:	d928      	bls.n	8001c5c <getButton+0x13c>
		{
			stButtons[i].long_state = 1;
 8001c0a:	4961      	ldr	r1, [pc, #388]	; (8001d90 <getButton+0x270>)
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	3307      	adds	r3, #7
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	701a      	strb	r2, [r3, #0]
			//long press
			if (i==0)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80f2 	bne.w	8001e0a <getButton+0x2ea>
			{
				curr_menu++;
 8001c26:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <getButton+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	4a59      	ldr	r2, [pc, #356]	; (8001d94 <getButton+0x274>)
 8001c2e:	6013      	str	r3, [r2, #0]
				if (curr_menu>=MENU_MAX)
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <getButton+0x274>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	dd02      	ble.n	8001c3e <getButton+0x11e>
				{
					curr_menu = 0;
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <getButton+0x274>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
				}
				if (start_stop)
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <getButton+0x278>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <getButton+0x12c>
				{
					start_stop = 0;
 8001c46:	4b54      	ldr	r3, [pc, #336]	; (8001d98 <getButton+0x278>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
				}
				check_bms_i = 0;
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <getButton+0x27c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
				batteryMsg.bms_type = BMS_NONE;
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <getButton+0x280>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			if (i==0)
 8001c5a:	e0d6      	b.n	8001e0a <getButton+0x2ea>
			}
		}
		else if(key_state == 1 && stButtons[i].short_state && (ms - stButtons[i].time_key) > 50)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	f040 80d3 	bne.w	8001e0a <getButton+0x2ea>
 8001c64:	494a      	ldr	r1, [pc, #296]	; (8001d90 <getButton+0x270>)
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3306      	adds	r3, #6
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80c7 	beq.w	8001e0a <getButton+0x2ea>
 8001c7c:	4944      	ldr	r1, [pc, #272]	; (8001d90 <getButton+0x270>)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b32      	cmp	r3, #50	; 0x32
 8001c94:	f240 80b9 	bls.w	8001e0a <getButton+0x2ea>
		{
			stButtons[i].short_state = 0;
 8001c98:	493d      	ldr	r1, [pc, #244]	; (8001d90 <getButton+0x270>)
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3306      	adds	r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
			stButtons[i].time_key = ms;
 8001cac:	4938      	ldr	r1, [pc, #224]	; (8001d90 <getButton+0x270>)
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3308      	adds	r3, #8
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	601a      	str	r2, [r3, #0]

		  if(!stButtons[i].long_state)
 8001cc0:	4933      	ldr	r1, [pc, #204]	; (8001d90 <getButton+0x270>)
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3307      	adds	r3, #7
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f040 8099 	bne.w	8001e0a <getButton+0x2ea>
		  {
			//short press
			  if (curr_menu == MENU_BMS)
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <getButton+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d13e      	bne.n	8001d5e <getButton+0x23e>
			  {
				  if (i == 0)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d11b      	bne.n	8001d1e <getButton+0x1fe>
				  {
					  check_bms_i = 0;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <getButton+0x27c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
					  batteryMsg.bms_type = BMS_NONE;
 8001cec:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <getButton+0x280>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					  screen_bms = 0;
 8001cf4:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <getButton+0x284>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
					  uint16_t* p_cell = &batteryMsg.cell_0;
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <getButton+0x288>)
 8001cfc:	613b      	str	r3, [r7, #16]
					  for (int i=0; i<16; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	e008      	b.n	8001d16 <getButton+0x1f6>
					  {
						  *p_cell = 0;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2200      	movs	r2, #0
 8001d08:	801a      	strh	r2, [r3, #0]
						  p_cell++;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
					  for (int i=0; i<16; i++)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	ddf3      	ble.n	8001d04 <getButton+0x1e4>
 8001d1c:	e075      	b.n	8001e0a <getButton+0x2ea>
					  }
				  }
				  else if (i == 1)
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10c      	bne.n	8001d3e <getButton+0x21e>
				  {
					  screen_bms--;
 8001d24:	4b1f      	ldr	r3, [pc, #124]	; (8001da4 <getButton+0x284>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <getButton+0x284>)
 8001d2c:	6013      	str	r3, [r2, #0]
					  if (screen_bms < 0)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <getButton+0x284>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da69      	bge.n	8001e0a <getButton+0x2ea>
					  {
					  	  screen_bms = 3;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <getButton+0x284>)
 8001d38:	2203      	movs	r2, #3
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e065      	b.n	8001e0a <getButton+0x2ea>
					  }

				  }
				  else if (i == 2)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d162      	bne.n	8001e0a <getButton+0x2ea>
				  {
					  screen_bms++;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <getButton+0x284>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <getButton+0x284>)
 8001d4c:	6013      	str	r3, [r2, #0]
					  if (screen_bms > 3)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <getButton+0x284>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	dd59      	ble.n	8001e0a <getButton+0x2ea>
					  {
						  screen_bms = 0;
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <getButton+0x284>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e055      	b.n	8001e0a <getButton+0x2ea>
					  }
				  }
			  }
			  else if (curr_menu == MENU_DRIVER)
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <getButton+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d151      	bne.n	8001e0a <getButton+0x2ea>
			  {
				  if (i == 0)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d121      	bne.n	8001db0 <getButton+0x290>
				  {
					  start_stop = !start_stop;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <getButton+0x278>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <getButton+0x278>)
 8001d7e:	601a      	str	r2, [r3, #0]
					  if (!start_stop)
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <getButton+0x278>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d140      	bne.n	8001e0a <getButton+0x2ea>
					  {
						  motor_speed = 0;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <getButton+0x28c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e03c      	b.n	8001e0a <getButton+0x2ea>
 8001d90:	2000032c 	.word	0x2000032c
 8001d94:	200002d8 	.word	0x200002d8
 8001d98:	200002ac 	.word	0x200002ac
 8001d9c:	200002a4 	.word	0x200002a4
 8001da0:	200002dc 	.word	0x200002dc
 8001da4:	200002a8 	.word	0x200002a8
 8001da8:	20000308 	.word	0x20000308
 8001dac:	200002b0 	.word	0x200002b0
					  }
				  }
				  else if (i == 1 && start_stop)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d114      	bne.n	8001de0 <getButton+0x2c0>
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <getButton+0x304>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <getButton+0x2c0>
				  {
					  motor_speed += 1000;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <getButton+0x308>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <getButton+0x308>)
 8001dc8:	6013      	str	r3, [r2, #0]
					  if (motor_speed>10000) motor_speed = 10000;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <getButton+0x308>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	dd19      	ble.n	8001e0a <getButton+0x2ea>
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <getButton+0x308>)
 8001dd8:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e014      	b.n	8001e0a <getButton+0x2ea>
				  }
				  else if (i == 2 && start_stop)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d111      	bne.n	8001e0a <getButton+0x2ea>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <getButton+0x304>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <getButton+0x2ea>
				  {
					  motor_speed -= 1000;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <getButton+0x308>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <getButton+0x308>)
 8001df8:	6013      	str	r3, [r2, #0]
				  	  if (motor_speed<-10000) motor_speed = -10000;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <getButton+0x308>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <getButton+0x30c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	da02      	bge.n	8001e0a <getButton+0x2ea>
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <getButton+0x308>)
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <getButton+0x30c>)
 8001e08:	601a      	str	r2, [r3, #0]
	for (int i=0; i<4; i++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	f77f ae8a 	ble.w	8001b2c <getButton+0xc>
				  }
			  }
		  }
		}
	}
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200002ac 	.word	0x200002ac
 8001e28:	200002b0 	.word	0x200002b0
 8001e2c:	ffffd8f0 	.word	0xffffd8f0

08001e30 <menu_update>:

void menu_update()
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b09f      	sub	sp, #124	; 0x7c
 8001e34:	af02      	add	r7, sp, #8
	SSD1306_COLOR color1 = White;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	SSD1306_COLOR color2 = White;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	SSD1306_COLOR color3 = White;
 8001e42:	2301      	movs	r3, #1
 8001e44:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	if (curr_menu == MENU_ENC)
 8001e48:	4ba4      	ldr	r3, [pc, #656]	; (80020dc <menu_update+0x2ac>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d132      	bne.n	8001eb6 <menu_update+0x86>
	{
		char str [12];
		snprintf(str, sizeof str, "%d", (int)enc_idle_tick);
 8001e50:	4ba3      	ldr	r3, [pc, #652]	; (80020e0 <menu_update+0x2b0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e58:	4aa2      	ldr	r2, [pc, #648]	; (80020e4 <menu_update+0x2b4>)
 8001e5a:	210c      	movs	r1, #12
 8001e5c:	f002 fb7c 	bl	8004558 <snprintf_>
		ssd1306_Fill(Black);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f002 fc67 	bl	8004734 <ssd1306_Fill>
		color1 = Black;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		ssd1306_SetCursor(2, 18);
 8001e6c:	2112      	movs	r1, #18
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f002 fdba 	bl	80049e8 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_16x26, White);
 8001e74:	4a9c      	ldr	r2, [pc, #624]	; (80020e8 <menu_update+0x2b8>)
 8001e76:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	ca06      	ldmia	r2, {r1, r2}
 8001e7e:	f002 fd8d 	bl	800499c <ssd1306_WriteString>
		if (enc_idle_tick == 0)
 8001e82:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <menu_update+0x2b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 826b 	bne.w	8002362 <menu_update+0x532>
		{
			ssd1306_SetCursor(2, 42);
 8001e8c:	212a      	movs	r1, #42	; 0x2a
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f002 fdaa 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Long press OK", Font_7x10, White);
 8001e94:	4a95      	ldr	r2, [pc, #596]	; (80020ec <menu_update+0x2bc>)
 8001e96:	2301      	movs	r3, #1
 8001e98:	ca06      	ldmia	r2, {r1, r2}
 8001e9a:	4895      	ldr	r0, [pc, #596]	; (80020f0 <menu_update+0x2c0>)
 8001e9c:	f002 fd7e 	bl	800499c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 8001ea0:	2135      	movs	r1, #53	; 0x35
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f002 fda0 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("to select", Font_7x10, White);
 8001ea8:	4a90      	ldr	r2, [pc, #576]	; (80020ec <menu_update+0x2bc>)
 8001eaa:	2301      	movs	r3, #1
 8001eac:	ca06      	ldmia	r2, {r1, r2}
 8001eae:	4891      	ldr	r0, [pc, #580]	; (80020f4 <menu_update+0x2c4>)
 8001eb0:	f002 fd74 	bl	800499c <ssd1306_WriteString>
 8001eb4:	e255      	b.n	8002362 <menu_update+0x532>
			ssd1306_SetCursor(2, 18);
			ssd1306_WriteString(xx, Font_16x26, Black);
		}
		*/
	}
	else if (curr_menu == MENU_BMS) {
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <menu_update+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	f040 81d7 	bne.w	800226e <menu_update+0x43e>
		ssd1306_Fill(Black);
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f002 fc37 	bl	8004734 <ssd1306_Fill>
		color2 = Black;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		if (batteryMsg.bms_type != BMS_NONE) {
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <menu_update+0x2c8>)
 8001ece:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 818e 	beq.w	80021f4 <menu_update+0x3c4>
			char volt[12];
			int x_coord = 2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
			int y_coord = 16;
 8001edc:	2310      	movs	r3, #16
 8001ede:	667b      	str	r3, [r7, #100]	; 0x64
			uint16_t* p_cell = &batteryMsg.cell_0;
 8001ee0:	4b86      	ldr	r3, [pc, #536]	; (80020fc <menu_update+0x2cc>)
 8001ee2:	663b      	str	r3, [r7, #96]	; 0x60
			float f_volt = 0;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (screen_bms == 0)
 8001eea:	4b85      	ldr	r3, [pc, #532]	; (8002100 <menu_update+0x2d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d16b      	bne.n	8001fca <menu_update+0x19a>
			{
				char str[6];
				snprintf(str, sizeof str, "%d", (int) battery_capacity);
 8001ef2:	4b84      	ldr	r3, [pc, #528]	; (8002104 <menu_update+0x2d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001efa:	4a7a      	ldr	r2, [pc, #488]	; (80020e4 <menu_update+0x2b4>)
 8001efc:	2106      	movs	r1, #6
 8001efe:	f002 fb2b 	bl	8004558 <snprintf_>
				ssd1306_SetCursor(2, 18);
 8001f02:	2112      	movs	r1, #18
 8001f04:	2002      	movs	r0, #2
 8001f06:	f002 fd6f 	bl	80049e8 <ssd1306_SetCursor>
				ssd1306_WriteString(str, Font_16x26, White);
 8001f0a:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <menu_update+0x2b8>)
 8001f0c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f10:	2301      	movs	r3, #1
 8001f12:	ca06      	ldmia	r2, {r1, r2}
 8001f14:	f002 fd42 	bl	800499c <ssd1306_WriteString>
				ssd1306_SetCursor(2, 45);
 8001f18:	212d      	movs	r1, #45	; 0x2d
 8001f1a:	2002      	movs	r0, #2
 8001f1c:	f002 fd64 	bl	80049e8 <ssd1306_SetCursor>
				if (batteryMsg.bms_type == BMS_SMART) {
 8001f20:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <menu_update+0x2c8>)
 8001f22:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <menu_update+0x108>
					ssd1306_WriteString("SMART", Font_11x18, White);
 8001f2a:	4a77      	ldr	r2, [pc, #476]	; (8002108 <menu_update+0x2d8>)
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	ca06      	ldmia	r2, {r1, r2}
 8001f30:	4876      	ldr	r0, [pc, #472]	; (800210c <menu_update+0x2dc>)
 8001f32:	f002 fd33 	bl	800499c <ssd1306_WriteString>
 8001f36:	e005      	b.n	8001f44 <menu_update+0x114>
				} else {
					ssd1306_WriteString("JBD", Font_11x18, White);
 8001f38:	4a73      	ldr	r2, [pc, #460]	; (8002108 <menu_update+0x2d8>)
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	ca06      	ldmia	r2, {r1, r2}
 8001f3e:	4874      	ldr	r0, [pc, #464]	; (8002110 <menu_update+0x2e0>)
 8001f40:	f002 fd2c 	bl	800499c <ssd1306_WriteString>
				}
				char str_volt[12];
				//snprintf(str_volt, sizeof str_volt, "%+6.*f", 2, batteryMsg.voltage);
				if (batteryMsg.bms_type == BMS_JBD)
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <menu_update+0x2c8>)
 8001f46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d112      	bne.n	8001f74 <menu_update+0x144>
				{
					f_volt = batteryMsg.voltage/100.0;
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <menu_update+0x2c8>)
 8001f50:	889b      	ldrh	r3, [r3, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fa4e 	bl	80003f4 <__aeabi_i2d>
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <menu_update+0x2e4>)
 8001f5e:	f7fe fbdd 	bl	800071c <__aeabi_ddiv>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fd8f 	bl	8000a8c <__aeabi_d2f>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f72:	e011      	b.n	8001f98 <menu_update+0x168>
				}
				else
				{
					f_volt = batteryMsg.voltage/10.0;
 8001f74:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <menu_update+0x2c8>)
 8001f76:	889b      	ldrh	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fa3b 	bl	80003f4 <__aeabi_i2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b65      	ldr	r3, [pc, #404]	; (8002118 <menu_update+0x2e8>)
 8001f84:	f7fe fbca 	bl	800071c <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	f7fe fd7c 	bl	8000a8c <__aeabi_d2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				snprintf(str_volt, sizeof str_volt, "%2.2fV", f_volt);
 8001f98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f9a:	f7fe fa3d 	bl	8000418 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	f107 0018 	add.w	r0, r7, #24
 8001fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <menu_update+0x2ec>)
 8001fac:	210c      	movs	r1, #12
 8001fae:	f002 fad3 	bl	8004558 <snprintf_>
				//sprintf(str_volt, "%.2f V", (float)batteryMsg.voltage/100.0);
				ssd1306_SetCursor(63, 45);
 8001fb2:	212d      	movs	r1, #45	; 0x2d
 8001fb4:	203f      	movs	r0, #63	; 0x3f
 8001fb6:	f002 fd17 	bl	80049e8 <ssd1306_SetCursor>
				ssd1306_WriteString(str_volt, Font_11x18, White);
 8001fba:	4a53      	ldr	r2, [pc, #332]	; (8002108 <menu_update+0x2d8>)
 8001fbc:	f107 0018 	add.w	r0, r7, #24
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	ca06      	ldmia	r2, {r1, r2}
 8001fc4:	f002 fcea 	bl	800499c <ssd1306_WriteString>
 8001fc8:	e1cb      	b.n	8002362 <menu_update+0x532>
			}
			else if (screen_bms < 3)
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <menu_update+0x2d0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	dc76      	bgt.n	80020c0 <menu_update+0x290>
			{
				int cell_num = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	65bb      	str	r3, [r7, #88]	; 0x58
				if (screen_bms == 2)
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <menu_update+0x2d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d103      	bne.n	8001fe6 <menu_update+0x1b6>
				{
					p_cell = &batteryMsg.cell_8;
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <menu_update+0x2f0>)
 8001fe0:	663b      	str	r3, [r7, #96]	; 0x60
					cell_num = 8;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	65bb      	str	r3, [r7, #88]	; 0x58
				}
				for (int i=0; i<8; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	657b      	str	r3, [r7, #84]	; 0x54
 8001fea:	e065      	b.n	80020b8 <menu_update+0x288>
				{
					if (i==4)
 8001fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d101      	bne.n	8001ff6 <menu_update+0x1c6>
					{
						x_coord = 65;
 8001ff2:	2341      	movs	r3, #65	; 0x41
 8001ff4:	66bb      	str	r3, [r7, #104]	; 0x68

					}
					if (i < 4)
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	dc07      	bgt.n	800200c <menu_update+0x1dc>
					{
						y_coord = 16+12*i;
 8001ffc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	3310      	adds	r3, #16
 8002008:	667b      	str	r3, [r7, #100]	; 0x64
 800200a:	e007      	b.n	800201c <menu_update+0x1ec>
					}
					else
					{
						y_coord = 16+12*(i-4);
 800200c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200e:	1f1a      	subs	r2, r3, #4
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	3310      	adds	r3, #16
 800201a:	667b      	str	r3, [r7, #100]	; 0x64
					}
					ssd1306_SetCursor(x_coord, y_coord);
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	b2db      	uxtb	r3, r3
 8002020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f002 fcde 	bl	80049e8 <ssd1306_SetCursor>
					if (i > 0 && cell_num > 0)
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	2b00      	cmp	r3, #0
 8002030:	dd1c      	ble.n	800206c <menu_update+0x23c>
 8002032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002034:	2b00      	cmp	r3, #0
 8002036:	dd19      	ble.n	800206c <menu_update+0x23c>
					{
						snprintf(volt, sizeof volt, "%d %.3f", (i+1+cell_num), *p_cell/1000.0);
 8002038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800203e:	18d4      	adds	r4, r2, r3
 8002040:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe f9d5 	bl	80003f4 <__aeabi_i2d>
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b35      	ldr	r3, [pc, #212]	; (8002124 <menu_update+0x2f4>)
 8002050:	f7fe fb64 	bl	800071c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800205c:	e9cd 2300 	strd	r2, r3, [sp]
 8002060:	4623      	mov	r3, r4
 8002062:	4a31      	ldr	r2, [pc, #196]	; (8002128 <menu_update+0x2f8>)
 8002064:	210c      	movs	r1, #12
 8002066:	f002 fa77 	bl	8004558 <snprintf_>
 800206a:	e018      	b.n	800209e <menu_update+0x26e>
					}
					else
					{

						snprintf(volt, sizeof volt, "%d  %.3f", (i+1+cell_num), *p_cell/1000.0);
 800206c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002072:	18d4      	adds	r4, r2, r3
 8002074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f9bb 	bl	80003f4 <__aeabi_i2d>
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <menu_update+0x2f4>)
 8002084:	f7fe fb4a 	bl	800071c <__aeabi_ddiv>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002090:	e9cd 2300 	strd	r2, r3, [sp]
 8002094:	4623      	mov	r3, r4
 8002096:	4a25      	ldr	r2, [pc, #148]	; (800212c <menu_update+0x2fc>)
 8002098:	210c      	movs	r1, #12
 800209a:	f002 fa5d 	bl	8004558 <snprintf_>
					}
					ssd1306_WriteString(volt, Font_6x8, White);
 800209e:	4a24      	ldr	r2, [pc, #144]	; (8002130 <menu_update+0x300>)
 80020a0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80020a4:	2301      	movs	r3, #1
 80020a6:	ca06      	ldmia	r2, {r1, r2}
 80020a8:	f002 fc78 	bl	800499c <ssd1306_WriteString>
					p_cell++;
 80020ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ae:	3302      	adds	r3, #2
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
				for (int i=0; i<8; i++)
 80020b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b4:	3301      	adds	r3, #1
 80020b6:	657b      	str	r3, [r7, #84]	; 0x54
 80020b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	dd96      	ble.n	8001fec <menu_update+0x1bc>
 80020be:	e150      	b.n	8002362 <menu_update+0x532>
				}
			}
			else
			{
				p_cell = &batteryMsg.cell_0;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <menu_update+0x2cc>)
 80020c2:	663b      	str	r3, [r7, #96]	; 0x60
				uint16_t min_volt = *p_cell;
 80020c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				uint16_t max_volt = *p_cell;
 80020cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				for (int i=1; i<16;i++)
 80020d4:	2301      	movs	r3, #1
 80020d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d8:	e04a      	b.n	8002170 <menu_update+0x340>
 80020da:	bf00      	nop
 80020dc:	200002d8 	.word	0x200002d8
 80020e0:	200001c8 	.word	0x200001c8
 80020e4:	08007f10 	.word	0x08007f10
 80020e8:	2000003c 	.word	0x2000003c
 80020ec:	2000002c 	.word	0x2000002c
 80020f0:	08007f14 	.word	0x08007f14
 80020f4:	08007f24 	.word	0x08007f24
 80020f8:	200002dc 	.word	0x200002dc
 80020fc:	20000308 	.word	0x20000308
 8002100:	200002a8 	.word	0x200002a8
 8002104:	200002a0 	.word	0x200002a0
 8002108:	20000034 	.word	0x20000034
 800210c:	08007f30 	.word	0x08007f30
 8002110:	08007f38 	.word	0x08007f38
 8002114:	40590000 	.word	0x40590000
 8002118:	40240000 	.word	0x40240000
 800211c:	08007f3c 	.word	0x08007f3c
 8002120:	20000318 	.word	0x20000318
 8002124:	408f4000 	.word	0x408f4000
 8002128:	08007f44 	.word	0x08007f44
 800212c:	08007f4c 	.word	0x08007f4c
 8002130:	20000024 	.word	0x20000024
				{
					uint16_t t_cell = *p_cell;
 8002134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
					if (t_cell < min_volt)
 800213c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002140:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002144:	429a      	cmp	r2, r3
 8002146:	d203      	bcs.n	8002150 <menu_update+0x320>
					{
						min_volt = t_cell;
 8002148:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800214c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
					}
					if (max_volt < t_cell)
 8002150:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002158:	429a      	cmp	r2, r3
 800215a:	d203      	bcs.n	8002164 <menu_update+0x334>
					{
						max_volt = t_cell;
 800215c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002160:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
					}
					p_cell++;
 8002164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002166:	3302      	adds	r3, #2
 8002168:	663b      	str	r3, [r7, #96]	; 0x60
				for (int i=1; i<16;i++)
 800216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216c:	3301      	adds	r3, #1
 800216e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002172:	2b0f      	cmp	r3, #15
 8002174:	ddde      	ble.n	8002134 <menu_update+0x304>
				}
				ssd1306_SetCursor(2, 20);
 8002176:	2114      	movs	r1, #20
 8002178:	2002      	movs	r0, #2
 800217a:	f002 fc35 	bl	80049e8 <ssd1306_SetCursor>
				snprintf(volt, sizeof volt, "Min: %.3f", min_volt/1000.0);
 800217e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f936 	bl	80003f4 <__aeabi_i2d>
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <menu_update+0x580>)
 800218e:	f7fe fac5 	bl	800071c <__aeabi_ddiv>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800219a:	e9cd 2300 	strd	r2, r3, [sp]
 800219e:	4a85      	ldr	r2, [pc, #532]	; (80023b4 <menu_update+0x584>)
 80021a0:	210c      	movs	r1, #12
 80021a2:	f002 f9d9 	bl	8004558 <snprintf_>
				ssd1306_WriteString(volt, Font_11x18, White);
 80021a6:	4a84      	ldr	r2, [pc, #528]	; (80023b8 <menu_update+0x588>)
 80021a8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80021ac:	2301      	movs	r3, #1
 80021ae:	ca06      	ldmia	r2, {r1, r2}
 80021b0:	f002 fbf4 	bl	800499c <ssd1306_WriteString>
				ssd1306_SetCursor(2, 40);
 80021b4:	2128      	movs	r1, #40	; 0x28
 80021b6:	2002      	movs	r0, #2
 80021b8:	f002 fc16 	bl	80049e8 <ssd1306_SetCursor>
				snprintf(volt, sizeof volt, "Max: %.3f", max_volt/1000.0);
 80021bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f917 	bl	80003f4 <__aeabi_i2d>
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <menu_update+0x580>)
 80021cc:	f7fe faa6 	bl	800071c <__aeabi_ddiv>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80021d8:	e9cd 2300 	strd	r2, r3, [sp]
 80021dc:	4a77      	ldr	r2, [pc, #476]	; (80023bc <menu_update+0x58c>)
 80021de:	210c      	movs	r1, #12
 80021e0:	f002 f9ba 	bl	8004558 <snprintf_>
				ssd1306_WriteString(volt, Font_11x18, White);
 80021e4:	4a74      	ldr	r2, [pc, #464]	; (80023b8 <menu_update+0x588>)
 80021e6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80021ea:	2301      	movs	r3, #1
 80021ec:	ca06      	ldmia	r2, {r1, r2}
 80021ee:	f002 fbd5 	bl	800499c <ssd1306_WriteString>
 80021f2:	e0b6      	b.n	8002362 <menu_update+0x532>
			}
		}
		else if (check_bms_i == 0) {
 80021f4:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <menu_update+0x590>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <menu_update+0x3e2>
			ssd1306_SetCursor(2, 53);
 80021fc:	2135      	movs	r1, #53	; 0x35
 80021fe:	2002      	movs	r0, #2
 8002200:	f002 fbf2 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Test", Font_7x10, White);
 8002204:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <menu_update+0x594>)
 8002206:	2301      	movs	r3, #1
 8002208:	ca06      	ldmia	r2, {r1, r2}
 800220a:	486f      	ldr	r0, [pc, #444]	; (80023c8 <menu_update+0x598>)
 800220c:	f002 fbc6 	bl	800499c <ssd1306_WriteString>
 8002210:	e0a7      	b.n	8002362 <menu_update+0x532>
		}
		else if (check_bms_i == 1) {
 8002212:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <menu_update+0x590>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10a      	bne.n	8002230 <menu_update+0x400>
			ssd1306_SetCursor(2, 53);
 800221a:	2135      	movs	r1, #53	; 0x35
 800221c:	2002      	movs	r0, #2
 800221e:	f002 fbe3 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Test JBD", Font_7x10, White);
 8002222:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <menu_update+0x594>)
 8002224:	2301      	movs	r3, #1
 8002226:	ca06      	ldmia	r2, {r1, r2}
 8002228:	4868      	ldr	r0, [pc, #416]	; (80023cc <menu_update+0x59c>)
 800222a:	f002 fbb7 	bl	800499c <ssd1306_WriteString>
 800222e:	e098      	b.n	8002362 <menu_update+0x532>
		}
		else if (check_bms_i == 2) {
 8002230:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <menu_update+0x590>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d10a      	bne.n	800224e <menu_update+0x41e>
			ssd1306_SetCursor(2, 53);
 8002238:	2135      	movs	r1, #53	; 0x35
 800223a:	2002      	movs	r0, #2
 800223c:	f002 fbd4 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("Test SMART", Font_7x10, White);
 8002240:	4a60      	ldr	r2, [pc, #384]	; (80023c4 <menu_update+0x594>)
 8002242:	2301      	movs	r3, #1
 8002244:	ca06      	ldmia	r2, {r1, r2}
 8002246:	4862      	ldr	r0, [pc, #392]	; (80023d0 <menu_update+0x5a0>)
 8002248:	f002 fba8 	bl	800499c <ssd1306_WriteString>
 800224c:	e089      	b.n	8002362 <menu_update+0x532>
		}
		else if (check_bms_i > 2) {
 800224e:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <menu_update+0x590>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b02      	cmp	r3, #2
 8002254:	f340 8085 	ble.w	8002362 <menu_update+0x532>
			ssd1306_SetCursor(2, 53);
 8002258:	2135      	movs	r1, #53	; 0x35
 800225a:	2002      	movs	r0, #2
 800225c:	f002 fbc4 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("ERROR", Font_7x10, White);
 8002260:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <menu_update+0x594>)
 8002262:	2301      	movs	r3, #1
 8002264:	ca06      	ldmia	r2, {r1, r2}
 8002266:	485b      	ldr	r0, [pc, #364]	; (80023d4 <menu_update+0x5a4>)
 8002268:	f002 fb98 	bl	800499c <ssd1306_WriteString>
 800226c:	e079      	b.n	8002362 <menu_update+0x532>
		}
	}
	else if (curr_menu == MENU_DRIVER)
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <menu_update+0x5a8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d175      	bne.n	8002362 <menu_update+0x532>
	{
		static uint8_t a = 0;
		ssd1306_Fill(Black);
 8002276:	2000      	movs	r0, #0
 8002278:	f002 fa5c 	bl	8004734 <ssd1306_Fill>
		if (a)
 800227c:	4b57      	ldr	r3, [pc, #348]	; (80023dc <menu_update+0x5ac>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <menu_update+0x45c>
		{
			color3 = White;
 8002284:	2301      	movs	r3, #1
 8002286:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800228a:	e002      	b.n	8002292 <menu_update+0x462>
		}
		else
		{
			color3 = Black;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		}
		if (!start_stop)
 8002292:	4b53      	ldr	r3, [pc, #332]	; (80023e0 <menu_update+0x5b0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d117      	bne.n	80022ca <menu_update+0x49a>
		{
			ssd1306_SetCursor(2, 42);
 800229a:	212a      	movs	r1, #42	; 0x2a
 800229c:	2002      	movs	r0, #2
 800229e:	f002 fba3 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("OK - start/stop", Font_7x10, White);
 80022a2:	4a48      	ldr	r2, [pc, #288]	; (80023c4 <menu_update+0x594>)
 80022a4:	2301      	movs	r3, #1
 80022a6:	ca06      	ldmia	r2, {r1, r2}
 80022a8:	484e      	ldr	r0, [pc, #312]	; (80023e4 <menu_update+0x5b4>)
 80022aa:	f002 fb77 	bl	800499c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 53);
 80022ae:	2135      	movs	r1, #53	; 0x35
 80022b0:	2002      	movs	r0, #2
 80022b2:	f002 fb99 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString("up/down - speed", Font_7x10, White);
 80022b6:	4a43      	ldr	r2, [pc, #268]	; (80023c4 <menu_update+0x594>)
 80022b8:	2301      	movs	r3, #1
 80022ba:	ca06      	ldmia	r2, {r1, r2}
 80022bc:	484a      	ldr	r0, [pc, #296]	; (80023e8 <menu_update+0x5b8>)
 80022be:	f002 fb6d 	bl	800499c <ssd1306_WriteString>
			a = 0;
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <menu_update+0x5ac>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e04b      	b.n	8002362 <menu_update+0x532>
		}
		else
		{
			static uint32_t blink_t = 0;
			char str_act[10] = "Activated!";
 80022ca:	4a48      	ldr	r2, [pc, #288]	; (80023ec <menu_update+0x5bc>)
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80022d2:	c303      	stmia	r3!, {r0, r1}
 80022d4:	801a      	strh	r2, [r3, #0]
			uint32_t ms = HAL_GetTick();
 80022d6:	f002 fc4f 	bl	8004b78 <HAL_GetTick>
 80022da:	64b8      	str	r0, [r7, #72]	; 0x48
			char str [12];
			snprintf(str, sizeof str, "%d", (int)motor_speed/20);
 80022dc:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <menu_update+0x5c0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a44      	ldr	r2, [pc, #272]	; (80023f4 <menu_update+0x5c4>)
 80022e2:	fb82 1203 	smull	r1, r2, r2, r3
 80022e6:	10d2      	asrs	r2, r2, #3
 80022e8:	17db      	asrs	r3, r3, #31
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4638      	mov	r0, r7
 80022ee:	4a42      	ldr	r2, [pc, #264]	; (80023f8 <menu_update+0x5c8>)
 80022f0:	210c      	movs	r1, #12
 80022f2:	f002 f931 	bl	8004558 <snprintf_>
			ssd1306_SetCursor(2, 18);
 80022f6:	2112      	movs	r1, #18
 80022f8:	2002      	movs	r0, #2
 80022fa:	f002 fb75 	bl	80049e8 <ssd1306_SetCursor>
			ssd1306_WriteString(str, Font_16x26, White);
 80022fe:	4a3f      	ldr	r2, [pc, #252]	; (80023fc <menu_update+0x5cc>)
 8002300:	4638      	mov	r0, r7
 8002302:	2301      	movs	r3, #1
 8002304:	ca06      	ldmia	r2, {r1, r2}
 8002306:	f002 fb49 	bl	800499c <ssd1306_WriteString>
			ssd1306_SetCursor(2, 45);
 800230a:	212d      	movs	r1, #45	; 0x2d
 800230c:	2002      	movs	r0, #2
 800230e:	f002 fb6b 	bl	80049e8 <ssd1306_SetCursor>
			if (a)
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <menu_update+0x5ac>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <menu_update+0x4fa>
			{
				ssd1306_WriteString(str_act, Font_11x18, White);
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <menu_update+0x588>)
 800231c:	f107 000c 	add.w	r0, r7, #12
 8002320:	2301      	movs	r3, #1
 8002322:	ca06      	ldmia	r2, {r1, r2}
 8002324:	f002 fb3a 	bl	800499c <ssd1306_WriteString>
 8002328:	e006      	b.n	8002338 <menu_update+0x508>
			}
			else
			{
				ssd1306_WriteString(str_act, Font_11x18, Black);
 800232a:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <menu_update+0x588>)
 800232c:	f107 000c 	add.w	r0, r7, #12
 8002330:	2300      	movs	r3, #0
 8002332:	ca06      	ldmia	r2, {r1, r2}
 8002334:	f002 fb32 	bl	800499c <ssd1306_WriteString>
			}
			if (ms - blink_t > 100)
 8002338:	4b31      	ldr	r3, [pc, #196]	; (8002400 <menu_update+0x5d0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d90e      	bls.n	8002362 <menu_update+0x532>
			{
				a = !a;
 8002344:	4b25      	ldr	r3, [pc, #148]	; (80023dc <menu_update+0x5ac>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <menu_update+0x5ac>)
 8002356:	701a      	strb	r2, [r3, #0]
				blink_t = HAL_GetTick();
 8002358:	f002 fc0e 	bl	8004b78 <HAL_GetTick>
 800235c:	4603      	mov	r3, r0
 800235e:	4a28      	ldr	r2, [pc, #160]	; (8002400 <menu_update+0x5d0>)
 8002360:	6013      	str	r3, [r2, #0]
			}
		}
	}
	ssd1306_SetCursor(2, 1);
 8002362:	2101      	movs	r1, #1
 8002364:	2002      	movs	r0, #2
 8002366:	f002 fb3f 	bl	80049e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Encoder", Font_7x10, color1);
 800236a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800236e:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <menu_update+0x594>)
 8002370:	ca06      	ldmia	r2, {r1, r2}
 8002372:	4824      	ldr	r0, [pc, #144]	; (8002404 <menu_update+0x5d4>)
 8002374:	f002 fb12 	bl	800499c <ssd1306_WriteString>
	ssd1306_SetCursor(55, 1);
 8002378:	2101      	movs	r1, #1
 800237a:	2037      	movs	r0, #55	; 0x37
 800237c:	f002 fb34 	bl	80049e8 <ssd1306_SetCursor>
	ssd1306_WriteString("BMS", Font_7x10, color2);
 8002380:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002384:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <menu_update+0x594>)
 8002386:	ca06      	ldmia	r2, {r1, r2}
 8002388:	481f      	ldr	r0, [pc, #124]	; (8002408 <menu_update+0x5d8>)
 800238a:	f002 fb07 	bl	800499c <ssd1306_WriteString>
	ssd1306_SetCursor(80, 1);
 800238e:	2101      	movs	r1, #1
 8002390:	2050      	movs	r0, #80	; 0x50
 8002392:	f002 fb29 	bl	80049e8 <ssd1306_SetCursor>
	ssd1306_WriteString("Driver", Font_7x10, color3);
 8002396:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <menu_update+0x594>)
 800239c:	ca06      	ldmia	r2, {r1, r2}
 800239e:	481b      	ldr	r0, [pc, #108]	; (800240c <menu_update+0x5dc>)
 80023a0:	f002 fafc 	bl	800499c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80023a4:	f002 f9e8 	bl	8004778 <ssd1306_UpdateScreen>
}
 80023a8:	bf00      	nop
 80023aa:	3774      	adds	r7, #116	; 0x74
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	408f4000 	.word	0x408f4000
 80023b4:	08007f58 	.word	0x08007f58
 80023b8:	20000034 	.word	0x20000034
 80023bc:	08007f64 	.word	0x08007f64
 80023c0:	200002a4 	.word	0x200002a4
 80023c4:	2000002c 	.word	0x2000002c
 80023c8:	08007f70 	.word	0x08007f70
 80023cc:	08007f78 	.word	0x08007f78
 80023d0:	08007f84 	.word	0x08007f84
 80023d4:	08007f90 	.word	0x08007f90
 80023d8:	200002d8 	.word	0x200002d8
 80023dc:	20000368 	.word	0x20000368
 80023e0:	200002ac 	.word	0x200002ac
 80023e4:	08007f98 	.word	0x08007f98
 80023e8:	08007fa8 	.word	0x08007fa8
 80023ec:	08007fcc 	.word	0x08007fcc
 80023f0:	200002b0 	.word	0x200002b0
 80023f4:	66666667 	.word	0x66666667
 80023f8:	08007f10 	.word	0x08007f10
 80023fc:	2000003c 	.word	0x2000003c
 8002400:	2000036c 	.word	0x2000036c
 8002404:	08007fb8 	.word	0x08007fb8
 8002408:	08007fc0 	.word	0x08007fc0
 800240c:	08007fc4 	.word	0x08007fc4

08002410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002414:	f002 fb58 	bl	8004ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002418:	f000 f878 	bl	800250c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800241c:	f000 f9f8 	bl	8002810 <MX_GPIO_Init>
  MX_DMA_Init();
 8002420:	f000 f9d8 	bl	80027d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002424:	f000 f9ac 	bl	8002780 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8002428:	f000 f956 	bl	80026d8 <MX_TIM4_Init>
  MX_SPI1_Init();
 800242c:	f000 f91c 	bl	8002668 <MX_SPI1_Init>
  MX_CAN_Init();
 8002430:	f000 f8b2 	bl	8002598 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, bms_uart_buff, sizeof(bms_uart_buff));
 8002434:	2264      	movs	r2, #100	; 0x64
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <main+0xd0>)
 8002438:	482a      	ldr	r0, [pc, #168]	; (80024e4 <main+0xd4>)
 800243a:	f004 fdc4 	bl	8006fc6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <main+0xd8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <main+0xd8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0204 	bic.w	r2, r2, #4
 800244c:	601a      	str	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800244e:	213c      	movs	r1, #60	; 0x3c
 8002450:	4826      	ldr	r0, [pc, #152]	; (80024ec <main+0xdc>)
 8002452:	f004 fb73 	bl	8006b3c <HAL_TIM_Encoder_Start>
  ssd1306_Init();
 8002456:	f002 f903 	bl	8004660 <ssd1306_Init>
  buttons_Init();
 800245a:	f7ff fb3b 	bl	8001ad4 <buttons_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_SetCursor(18, 2);
 800245e:	2102      	movs	r1, #2
 8002460:	2012      	movs	r0, #18
 8002462:	f002 fac1 	bl	80049e8 <ssd1306_SetCursor>
  ssd1306_Fill(White);
 8002466:	2001      	movs	r0, #1
 8002468:	f002 f964 	bl	8004734 <ssd1306_Fill>
  ssd1306_WriteString("Universal", Font_11x18, Black);
 800246c:	4a20      	ldr	r2, [pc, #128]	; (80024f0 <main+0xe0>)
 800246e:	2300      	movs	r3, #0
 8002470:	ca06      	ldmia	r2, {r1, r2}
 8002472:	4820      	ldr	r0, [pc, #128]	; (80024f4 <main+0xe4>)
 8002474:	f002 fa92 	bl	800499c <ssd1306_WriteString>
  ssd1306_SetCursor(18, 25);
 8002478:	2119      	movs	r1, #25
 800247a:	2012      	movs	r0, #18
 800247c:	f002 fab4 	bl	80049e8 <ssd1306_SetCursor>
  ssd1306_WriteString("Tester", Font_16x24, Black);
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <main+0xe8>)
 8002482:	2300      	movs	r3, #0
 8002484:	ca06      	ldmia	r2, {r1, r2}
 8002486:	481d      	ldr	r0, [pc, #116]	; (80024fc <main+0xec>)
 8002488:	f002 fa88 	bl	800499c <ssd1306_WriteString>
  ssd1306_SetCursor(16, 56);
 800248c:	2138      	movs	r1, #56	; 0x38
 800248e:	2010      	movs	r0, #16
 8002490:	f002 faaa 	bl	80049e8 <ssd1306_SetCursor>
  ssd1306_WriteString("@Skynet 2024 v.1.0", Font_6x8, Black);
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <main+0xf0>)
 8002496:	2300      	movs	r3, #0
 8002498:	ca06      	ldmia	r2, {r1, r2}
 800249a:	481a      	ldr	r0, [pc, #104]	; (8002504 <main+0xf4>)
 800249c:	f002 fa7e 	bl	800499c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80024a0:	f002 f96a 	bl	8004778 <ssd1306_UpdateScreen>
  HAL_Delay(500);
 80024a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024a8:	f002 fb70 	bl	8004b8c <HAL_Delay>
  while (1)
  {
	  getButton();
 80024ac:	f7ff fb38 	bl	8001b20 <getButton>
	  if(curr_menu == MENU_ENC)
 80024b0:	4b15      	ldr	r3, [pc, #84]	; (8002508 <main+0xf8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d102      	bne.n	80024be <main+0xae>
	  {
		  getEncoder();
 80024b8:	f7ff faf2 	bl	8001aa0 <getEncoder>
 80024bc:	e00c      	b.n	80024d8 <main+0xc8>
	  }
	  else if (curr_menu == MENU_BMS)
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <main+0xf8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d102      	bne.n	80024cc <main+0xbc>
	  {
		  read_bms_uart();
 80024c6:	f7fe fe99 	bl	80011fc <read_bms_uart>
 80024ca:	e005      	b.n	80024d8 <main+0xc8>
	  }
	  else if (curr_menu == MENU_DRIVER)
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <main+0xf8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d101      	bne.n	80024d8 <main+0xc8>
	  {
		  Moving();
 80024d4:	f7fe fdbc 	bl	8001050 <Moving>
	  }
	  menu_update();
 80024d8:	f7ff fcaa 	bl	8001e30 <menu_update>
	  getButton();
 80024dc:	e7e6      	b.n	80024ac <main+0x9c>
 80024de:	bf00      	nop
 80024e0:	200001cc 	.word	0x200001cc
 80024e4:	20000138 	.word	0x20000138
 80024e8:	20000180 	.word	0x20000180
 80024ec:	200000f0 	.word	0x200000f0
 80024f0:	20000034 	.word	0x20000034
 80024f4:	08007fd8 	.word	0x08007fd8
 80024f8:	20000044 	.word	0x20000044
 80024fc:	08007fe4 	.word	0x08007fe4
 8002500:	20000024 	.word	0x20000024
 8002504:	08007fec 	.word	0x08007fec
 8002508:	200002d8 	.word	0x200002d8

0800250c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b090      	sub	sp, #64	; 0x40
 8002510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002512:	f107 0318 	add.w	r3, r7, #24
 8002516:	2228      	movs	r2, #40	; 0x28
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f005 fce2 	bl	8007ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800252e:	2301      	movs	r3, #1
 8002530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002540:	2302      	movs	r3, #2
 8002542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800254a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fbd1 	bl	8005cfc <HAL_RCC_OscConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002560:	f000 f9e4 	bl	800292c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002564:	230f      	movs	r3, #15
 8002566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002568:	2302      	movs	r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002576:	2300      	movs	r3, #0
 8002578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f003 fe3e 	bl	8006200 <HAL_RCC_ClockConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800258a:	f000 f9cf 	bl	800292c <Error_Handler>
  }
}
 800258e:	bf00      	nop
 8002590:	3740      	adds	r7, #64	; 0x40
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <MX_CAN_Init+0xc8>)
 80025a0:	4a30      	ldr	r2, [pc, #192]	; (8002664 <MX_CAN_Init+0xcc>)
 80025a2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80025a4:	4b2e      	ldr	r3, [pc, #184]	; (8002660 <MX_CAN_Init+0xc8>)
 80025a6:	2204      	movs	r2, #4
 80025a8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <MX_CAN_Init+0xc8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <MX_CAN_Init+0xc8>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80025b6:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <MX_CAN_Init+0xc8>)
 80025b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80025bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <MX_CAN_Init+0xc8>)
 80025c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <MX_CAN_Init+0xc8>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80025cc:	4b24      	ldr	r3, [pc, #144]	; (8002660 <MX_CAN_Init+0xc8>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <MX_CAN_Init+0xc8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80025d8:	4b21      	ldr	r3, [pc, #132]	; (8002660 <MX_CAN_Init+0xc8>)
 80025da:	2200      	movs	r2, #0
 80025dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <MX_CAN_Init+0xc8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <MX_CAN_Init+0xc8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80025ea:	481d      	ldr	r0, [pc, #116]	; (8002660 <MX_CAN_Init+0xc8>)
 80025ec:	f002 faf2 	bl	8004bd4 <HAL_CAN_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80025f6:	f000 f999 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  sFilterConfig.FilterBank = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
      sFilterConfig.FilterIdHigh = 0x0000;
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
      sFilterConfig.FilterMaskIdHigh = 0x0000;
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
      sFilterConfig.FilterActivation = ENABLE;
 800261a:	2301      	movs	r3, #1
 800261c:	623b      	str	r3, [r7, #32]
      //sFilterConfig.SlaveStartFilterBank = 14;

      if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	4619      	mov	r1, r3
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <MX_CAN_Init+0xc8>)
 8002624:	f002 fbd1 	bl	8004dca <HAL_CAN_ConfigFilter>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_CAN_Init+0x9a>
      {
      	Error_Handler();
 800262e:	f000 f97d 	bl	800292c <Error_Handler>
      }
      if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8002632:	480b      	ldr	r0, [pc, #44]	; (8002660 <MX_CAN_Init+0xc8>)
 8002634:	f002 fc92 	bl	8004f5c <HAL_CAN_Start>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_CAN_Init+0xaa>
    	Error_Handler();
 800263e:	f000 f975 	bl	800292c <Error_Handler>
      }
      if (HAL_CAN_ActivateNotification(&hcan,
 8002642:	f648 4102 	movw	r1, #35842	; 0x8c02
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_CAN_Init+0xc8>)
 8002648:	f002 fdcf 	bl	80051ea <HAL_CAN_ActivateNotification>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_CAN_Init+0xbe>
    		  CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR | CAN_IT_BUSOFF
			  	  | CAN_IT_LAST_ERROR_CODE) != HAL_OK) {
    	Error_Handler();
 8002652:	f000 f96b 	bl	800292c <Error_Handler>
      }
  /* USER CODE END CAN_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3728      	adds	r7, #40	; 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000070 	.word	0x20000070
 8002664:	40006400 	.word	0x40006400

08002668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_SPI1_Init+0x68>)
 800266e:	4a19      	ldr	r2, [pc, #100]	; (80026d4 <MX_SPI1_Init+0x6c>)
 8002670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_SPI1_Init+0x68>)
 8002674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_SPI1_Init+0x68>)
 800267c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002680:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <MX_SPI1_Init+0x68>)
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_SPI1_Init+0x68>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <MX_SPI1_Init+0x68>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_SPI1_Init+0x68>)
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <MX_SPI1_Init+0x68>)
 800269e:	2230      	movs	r2, #48	; 0x30
 80026a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <MX_SPI1_Init+0x68>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <MX_SPI1_Init+0x68>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <MX_SPI1_Init+0x68>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <MX_SPI1_Init+0x68>)
 80026b6:	220a      	movs	r2, #10
 80026b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_SPI1_Init+0x68>)
 80026bc:	f003 ff2e 	bl	800651c <HAL_SPI_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80026c6:	f000 f931 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000098 	.word	0x20000098
 80026d4:	40013000 	.word	0x40013000

080026d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026de:	f107 030c 	add.w	r3, r7, #12
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f005 fbfc 	bl	8007ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <MX_TIM4_Init+0xa0>)
 80026f6:	4a21      	ldr	r2, [pc, #132]	; (800277c <MX_TIM4_Init+0xa4>)
 80026f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_TIM4_Init+0xa0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002716:	2200      	movs	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800271a:	2301      	movs	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002722:	2301      	movs	r3, #1
 8002724:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002732:	2301      	movs	r3, #1
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	4619      	mov	r1, r3
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002746:	f004 f957 	bl	80069f8 <HAL_TIM_Encoder_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002750:	f000 f8ec 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_TIM4_Init+0xa0>)
 8002762:	f004 faff 	bl	8006d64 <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800276c:	f000 f8de 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200000f0 	.word	0x200000f0
 800277c:	40000800 	.word	0x40000800

08002780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <MX_USART1_UART_Init+0x50>)
 8002788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 800278c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 80027a6:	220c      	movs	r2, #12
 80027a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027b6:	4805      	ldr	r0, [pc, #20]	; (80027cc <MX_USART1_UART_Init+0x4c>)
 80027b8:	f004 fb32 	bl	8006e20 <HAL_UART_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027c2:	f000 f8b3 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000138 	.word	0x20000138
 80027d0:	40013800 	.word	0x40013800

080027d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_DMA_Init+0x38>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4a0b      	ldr	r2, [pc, #44]	; (800280c <MX_DMA_Init+0x38>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6153      	str	r3, [r2, #20]
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_DMA_Init+0x38>)
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	200f      	movs	r0, #15
 80027f8:	f002 fdf3 	bl	80053e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80027fc:	200f      	movs	r0, #15
 80027fe:	f002 fe0c 	bl	800541a <HAL_NVIC_EnableIRQ>

}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000

08002810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002824:	4b3d      	ldr	r3, [pc, #244]	; (800291c <MX_GPIO_Init+0x10c>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a3c      	ldr	r2, [pc, #240]	; (800291c <MX_GPIO_Init+0x10c>)
 800282a:	f043 0310 	orr.w	r3, r3, #16
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b3a      	ldr	r3, [pc, #232]	; (800291c <MX_GPIO_Init+0x10c>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800283c:	4b37      	ldr	r3, [pc, #220]	; (800291c <MX_GPIO_Init+0x10c>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	4a36      	ldr	r2, [pc, #216]	; (800291c <MX_GPIO_Init+0x10c>)
 8002842:	f043 0320 	orr.w	r3, r3, #32
 8002846:	6193      	str	r3, [r2, #24]
 8002848:	4b34      	ldr	r3, [pc, #208]	; (800291c <MX_GPIO_Init+0x10c>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002854:	4b31      	ldr	r3, [pc, #196]	; (800291c <MX_GPIO_Init+0x10c>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	4a30      	ldr	r2, [pc, #192]	; (800291c <MX_GPIO_Init+0x10c>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6193      	str	r3, [r2, #24]
 8002860:	4b2e      	ldr	r3, [pc, #184]	; (800291c <MX_GPIO_Init+0x10c>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <MX_GPIO_Init+0x10c>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a2a      	ldr	r2, [pc, #168]	; (800291c <MX_GPIO_Init+0x10c>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b28      	ldr	r3, [pc, #160]	; (800291c <MX_GPIO_Init+0x10c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RE_DE_GPIO_Port, RE_DE_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800288a:	4825      	ldr	r0, [pc, #148]	; (8002920 <MX_GPIO_Init+0x110>)
 800288c:	f003 fa1d 	bl	8005cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, GPIO_PIN_RESET);
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	4823      	ldr	r0, [pc, #140]	; (8002924 <MX_GPIO_Init+0x114>)
 8002896:	f003 fa18 	bl	8005cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_Res_Pin|OLED_CS_Pin, GPIO_PIN_RESET);
 800289a:	2200      	movs	r2, #0
 800289c:	2103      	movs	r1, #3
 800289e:	4822      	ldr	r0, [pc, #136]	; (8002928 <MX_GPIO_Init+0x118>)
 80028a0:	f003 fa13 	bl	8005cca <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RE_DE_Pin */
  GPIO_InitStruct.Pin = RE_DE_Pin;
 80028a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4619      	mov	r1, r3
 80028bc:	4818      	ldr	r0, [pc, #96]	; (8002920 <MX_GPIO_Init+0x110>)
 80028be:	f003 f869 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin;
 80028c2:	2340      	movs	r3, #64	; 0x40
 80028c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_DC_GPIO_Port, &GPIO_InitStruct);
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	4812      	ldr	r0, [pc, #72]	; (8002924 <MX_GPIO_Init+0x114>)
 80028da:	f003 f85b 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_Res_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_Res_Pin|OLED_CS_Pin;
 80028de:	2303      	movs	r3, #3
 80028e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	; (8002928 <MX_GPIO_Init+0x118>)
 80028f6:	f003 f84d 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 80028fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80028fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	4619      	mov	r1, r3
 800290e:	4806      	ldr	r0, [pc, #24]	; (8002928 <MX_GPIO_Init+0x118>)
 8002910:	f003 f840 	bl	8005994 <HAL_GPIO_Init>

}
 8002914:	bf00      	nop
 8002916:	3720      	adds	r7, #32
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	40011000 	.word	0x40011000
 8002924:	40010800 	.word	0x40010800
 8002928:	40010c00 	.word	0x40010c00

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_MspInit+0x5c>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_MspInit+0x5c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6193      	str	r3, [r2, #24]
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_MspInit+0x5c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_MspInit+0x5c>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_MspInit+0x60>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_MspInit+0x60>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40021000 	.word	0x40021000
 8002998:	40010000 	.word	0x40010000

0800299c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <HAL_CAN_MspInit+0xb0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d143      	bne.n	8002a44 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c6:	61d3      	str	r3, [r2, #28]
 80029c8:	4b21      	ldr	r3, [pc, #132]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_CAN_MspInit+0xb4>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	4814      	ldr	r0, [pc, #80]	; (8002a54 <HAL_CAN_MspInit+0xb8>)
 8002a02:	f002 ffc7 	bl	8005994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480e      	ldr	r0, [pc, #56]	; (8002a54 <HAL_CAN_MspInit+0xb8>)
 8002a1c:	f002 ffba 	bl	8005994 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <HAL_CAN_MspInit+0xbc>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_CAN_MspInit+0xbc>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	; 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40006400 	.word	0x40006400
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010c00 	.word	0x40010c00
 8002a58:	40010000 	.word	0x40010000

08002a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a15      	ldr	r2, [pc, #84]	; (8002acc <HAL_SPI_MspInit+0x70>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d123      	bne.n	8002ac4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a86:	6193      	str	r3, [r2, #24]
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_SPI_MspInit+0x74>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aac:	23a0      	movs	r3, #160	; 0xa0
 8002aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	4619      	mov	r1, r3
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <HAL_SPI_MspInit+0x78>)
 8002ac0:	f002 ff68 	bl	8005994 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013000 	.word	0x40013000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010800 	.word	0x40010800

08002ad8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0310 	add.w	r3, r7, #16
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_TIM_Encoder_MspInit+0x70>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d123      	bne.n	8002b40 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	4a13      	ldr	r2, [pc, #76]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002afe:	f043 0304 	orr.w	r3, r3, #4
 8002b02:	61d3      	str	r3, [r2, #28]
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_TIM_Encoder_MspInit+0x74>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b28:	23c0      	movs	r3, #192	; 0xc0
 8002b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4805      	ldr	r0, [pc, #20]	; (8002b50 <HAL_TIM_Encoder_MspInit+0x78>)
 8002b3c:	f002 ff2a 	bl	8005994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b40:	bf00      	nop
 8002b42:	3720      	adds	r7, #32
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010c00 	.word	0x40010c00

08002b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <HAL_UART_MspInit+0xe8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d15f      	bne.n	8002c34 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b92:	f043 0304 	orr.w	r3, r3, #4
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_UART_MspInit+0xec>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb2:	f107 0310 	add.w	r3, r7, #16
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4822      	ldr	r0, [pc, #136]	; (8002c44 <HAL_UART_MspInit+0xf0>)
 8002bba:	f002 feeb 	bl	8005994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	481c      	ldr	r0, [pc, #112]	; (8002c44 <HAL_UART_MspInit+0xf0>)
 8002bd4:	f002 fede 	bl	8005994 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <HAL_UART_MspInit+0xf8>)
 8002bdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c08:	480f      	ldr	r0, [pc, #60]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002c0a:	f002 fc21 	bl	8005450 <HAL_DMA_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002c14:	f7ff fe8a 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <HAL_UART_MspInit+0xf4>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2100      	movs	r1, #0
 8002c28:	2025      	movs	r0, #37	; 0x25
 8002c2a:	f002 fbda 	bl	80053e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c2e:	2025      	movs	r0, #37	; 0x25
 8002c30:	f002 fbf3 	bl	800541a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c34:	bf00      	nop
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010800 	.word	0x40010800
 8002c48:	20000180 	.word	0x20000180
 8002c4c:	40020058 	.word	0x40020058

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <NMI_Handler+0x4>

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <MemManage_Handler+0x4>

08002c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c96:	f001 ff5d 	bl	8004b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ca4:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <DMA1_Channel5_IRQHandler+0x10>)
 8002ca6:	f002 fd41 	bl	800572c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000180 	.word	0x20000180

08002cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <USART1_IRQHandler+0x10>)
 8002cba:	f004 f9e1 	bl	8007080 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000138 	.word	0x20000138

08002cc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d204      	bcs.n	8002cf6 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7bfa      	ldrb	r2, [r7, #15]
 8002cf4:	701a      	strb	r2, [r3, #0]
  }
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e002      	b.n	8002d30 <_strnlen_s+0x16>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <_strnlen_s+0x28>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	603a      	str	r2, [r7, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f3      	bne.n	8002d2a <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1ad3      	subs	r3, r2, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d60:	d904      	bls.n	8002d6c <_is_digit+0x1a>
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	2b39      	cmp	r3, #57	; 0x39
 8002d66:	d801      	bhi.n	8002d6c <_is_digit+0x1a>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <_is_digit+0x1c>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002d8a:	e00e      	b.n	8002daa <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4618      	mov	r0, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1c59      	adds	r1, r3, #1
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6011      	str	r1, [r2, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	4403      	add	r3, r0
 8002da6:	3b30      	subs	r3, #48	; 0x30
 8002da8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ffce 	bl	8002d52 <_is_digit>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e7      	bne.n	8002d8c <_atoi+0xe>
  }
  return i;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002dc6:	b590      	push	{r4, r7, lr}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d125      	bne.n	8002e2e <_out_rev+0x68>
 8002de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d120      	bne.n	8002e2e <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	1c53      	adds	r3, r2, #1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	68fc      	ldr	r4, [r7, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	2020      	movs	r0, #32
 8002e00:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3f0      	bcc.n	8002df2 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8002e10:	e00d      	b.n	8002e2e <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	3b01      	subs	r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	4413      	add	r3, r2
 8002e1e:	7818      	ldrb	r0, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	1c53      	adds	r3, r2, #1
 8002e24:	607b      	str	r3, [r7, #4]
 8002e26:	68fc      	ldr	r4, [r7, #12]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	47a0      	blx	r4
  while (len) {
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ee      	bne.n	8002e12 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00e      	beq.n	8002e5c <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002e3e:	e007      	b.n	8002e50 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	1c53      	adds	r3, r2, #1
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	68fc      	ldr	r4, [r7, #12]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	2020      	movs	r0, #32
 8002e4e:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f1      	bhi.n	8002e40 <_out_rev+0x7a>
    }
  }

  return idx;
 8002e5c:	687b      	ldr	r3, [r7, #4]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd90      	pop	{r4, r7, pc}

08002e66 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b088      	sub	sp, #32
 8002e6a:	af04      	add	r7, sp, #16
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d136      	bne.n	8002eec <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <_ntoa_format+0x50>
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d013      	beq.n	8002eb6 <_ntoa_format+0x50>
 8002e8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <_ntoa_format+0x3a>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00a      	beq.n	8002eb6 <_ntoa_format+0x50>
      width--;
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ea6:	e006      	b.n	8002eb6 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	61fa      	str	r2, [r7, #28]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2230      	movs	r2, #48	; 0x30
 8002eb4:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d20a      	bcs.n	8002ed4 <_ntoa_format+0x6e>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	2b1f      	cmp	r3, #31
 8002ec2:	d9f1      	bls.n	8002ea8 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ec4:	e006      	b.n	8002ed4 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	61fa      	str	r2, [r7, #28]
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4413      	add	r3, r2
 8002ed0:	2230      	movs	r2, #48	; 0x30
 8002ed2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <_ntoa_format+0x86>
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d202      	bcs.n	8002eec <_ntoa_format+0x86>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2b1f      	cmp	r3, #31
 8002eea:	d9ec      	bls.n	8002ec6 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d058      	beq.n	8002fa8 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <_ntoa_format+0xc8>
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <_ntoa_format+0xc8>
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d003      	beq.n	8002f16 <_ntoa_format+0xb0>
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d10b      	bne.n	8002f2e <_ntoa_format+0xc8>
      len--;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <_ntoa_format+0xc8>
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d102      	bne.n	8002f2e <_ntoa_format+0xc8>
        len--;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d10f      	bne.n	8002f54 <_ntoa_format+0xee>
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <_ntoa_format+0xee>
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	2b1f      	cmp	r3, #31
 8002f42:	d807      	bhi.n	8002f54 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	61fa      	str	r2, [r7, #28]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	2278      	movs	r2, #120	; 0x78
 8002f50:	701a      	strb	r2, [r3, #0]
 8002f52:	e01f      	b.n	8002f94 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d10f      	bne.n	8002f7a <_ntoa_format+0x114>
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <_ntoa_format+0x114>
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b1f      	cmp	r3, #31
 8002f68:	d807      	bhi.n	8002f7a <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	61fa      	str	r2, [r7, #28]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4413      	add	r3, r2
 8002f74:	2258      	movs	r2, #88	; 0x58
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e00c      	b.n	8002f94 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d109      	bne.n	8002f94 <_ntoa_format+0x12e>
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	2b1f      	cmp	r3, #31
 8002f84:	d806      	bhi.n	8002f94 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	61fa      	str	r2, [r7, #28]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4413      	add	r3, r2
 8002f90:	2262      	movs	r2, #98	; 0x62
 8002f92:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b1f      	cmp	r3, #31
 8002f98:	d806      	bhi.n	8002fa8 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	61fa      	str	r2, [r7, #28]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2230      	movs	r2, #48	; 0x30
 8002fa6:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b1f      	cmp	r3, #31
 8002fac:	d824      	bhi.n	8002ff8 <_ntoa_format+0x192>
    if (negative) {
 8002fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	222d      	movs	r2, #45	; 0x2d
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e018      	b.n	8002ff8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	222b      	movs	r2, #43	; 0x2b
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e00b      	b.n	8002ff8 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	9302      	str	r3, [sp, #8]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fed9 	bl	8002dc6 <_out_rev>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b096      	sub	sp, #88	; 0x58
 8003022:	af08      	add	r7, sp, #32
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8003036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003038:	f023 0310 	bic.w	r3, r3, #16
 800303c:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <_ntoa_long+0x30>
 8003048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d032      	beq.n	80030b4 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 800304e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	fbb3 f2f2 	udiv	r2, r3, r2
 8003056:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003058:	fb01 f202 	mul.w	r2, r1, r2
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003066:	2b09      	cmp	r3, #9
 8003068:	d804      	bhi.n	8003074 <_ntoa_long+0x56>
 800306a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800306e:	3330      	adds	r3, #48	; 0x30
 8003070:	b2da      	uxtb	r2, r3
 8003072:	e00d      	b.n	8003090 <_ntoa_long+0x72>
 8003074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <_ntoa_long+0x64>
 800307e:	2241      	movs	r2, #65	; 0x41
 8003080:	e000      	b.n	8003084 <_ntoa_long+0x66>
 8003082:	2261      	movs	r2, #97	; 0x61
 8003084:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003088:	4413      	add	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	3b0a      	subs	r3, #10
 800308e:	b2da      	uxtb	r2, r3
 8003090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	6379      	str	r1, [r7, #52]	; 0x34
 8003096:	3338      	adds	r3, #56	; 0x38
 8003098:	443b      	add	r3, r7
 800309a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800309e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80030a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <_ntoa_long+0x96>
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	2b1f      	cmp	r3, #31
 80030b2:	d9cc      	bls.n	800304e <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80030b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b6:	9306      	str	r3, [sp, #24]
 80030b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ba:	9305      	str	r3, [sp, #20]
 80030bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030be:	9304      	str	r3, [sp, #16]
 80030c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c2:	9303      	str	r3, [sp, #12]
 80030c4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80030c8:	9302      	str	r3, [sp, #8]
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	9301      	str	r3, [sp, #4]
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff fec3 	bl	8002e66 <_ntoa_format>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3738      	adds	r7, #56	; 0x38
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b096      	sub	sp, #88	; 0x58
 80030ee:	af08      	add	r7, sp, #32
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80030fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003100:	4313      	orrs	r3, r2
 8003102:	d103      	bne.n	800310c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800310c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <_ntoa_long_long+0x34>
 8003116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800311a:	4313      	orrs	r3, r2
 800311c:	d037      	beq.n	800318e <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800311e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003122:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003126:	f7fd fd01 	bl	8000b2c <__aeabi_uldivmod>
 800312a:	4613      	mov	r3, r2
 800312c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003130:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003134:	2b09      	cmp	r3, #9
 8003136:	d804      	bhi.n	8003142 <_ntoa_long_long+0x58>
 8003138:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800313c:	3330      	adds	r3, #48	; 0x30
 800313e:	b2da      	uxtb	r2, r3
 8003140:	e00d      	b.n	800315e <_ntoa_long_long+0x74>
 8003142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <_ntoa_long_long+0x66>
 800314c:	2241      	movs	r2, #65	; 0x41
 800314e:	e000      	b.n	8003152 <_ntoa_long_long+0x68>
 8003150:	2261      	movs	r2, #97	; 0x61
 8003152:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003156:	4413      	add	r3, r2
 8003158:	b2db      	uxtb	r3, r3
 800315a:	3b0a      	subs	r3, #10
 800315c:	b2da      	uxtb	r2, r3
 800315e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003160:	1c59      	adds	r1, r3, #1
 8003162:	6379      	str	r1, [r7, #52]	; 0x34
 8003164:	3338      	adds	r3, #56	; 0x38
 8003166:	443b      	add	r3, r7
 8003168:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800316c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003170:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003174:	f7fd fcda 	bl	8000b2c <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003180:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003184:	4313      	orrs	r3, r2
 8003186:	d002      	beq.n	800318e <_ntoa_long_long+0xa4>
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	2b1f      	cmp	r3, #31
 800318c:	d9c7      	bls.n	800311e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003190:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003192:	9206      	str	r2, [sp, #24]
 8003194:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003196:	9205      	str	r2, [sp, #20]
 8003198:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800319a:	9204      	str	r2, [sp, #16]
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe56 	bl	8002e66 <_ntoa_format>
 80031ba:	4603      	mov	r3, r0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3738      	adds	r7, #56	; 0x38
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	0000      	movs	r0, r0
	...

080031c8 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b09d      	sub	sp, #116	; 0x74
 80031cc:	af06      	add	r7, sp, #24
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80031e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80031ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031ee:	f7fd fbd3 	bl	8000998 <__aeabi_dcmpeq>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80031f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031fa:	9303      	str	r3, [sp, #12]
 80031fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fe:	9302      	str	r3, [sp, #8]
 8003200:	2303      	movs	r3, #3
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	4b82      	ldr	r3, [pc, #520]	; (8003410 <_ftoa+0x248>)
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff fdd9 	bl	8002dc6 <_out_rev>
 8003214:	4603      	mov	r3, r0
 8003216:	e224      	b.n	8003662 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003220:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003224:	f7fd fbc2 	bl	80009ac <__aeabi_dcmplt>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800322e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003230:	9303      	str	r3, [sp, #12]
 8003232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003234:	9302      	str	r3, [sp, #8]
 8003236:	2304      	movs	r3, #4
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <_ftoa+0x24c>)
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff fdbe 	bl	8002dc6 <_out_rev>
 800324a:	4603      	mov	r3, r0
 800324c:	e209      	b.n	8003662 <_ftoa+0x49a>
  if (value > DBL_MAX)
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	4b71      	ldr	r3, [pc, #452]	; (8003418 <_ftoa+0x250>)
 8003254:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003258:	f7fd fbc6 	bl	80009e8 <__aeabi_dcmpgt>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <_ftoa+0xd6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <_ftoa+0xa8>
 800326c:	4b6b      	ldr	r3, [pc, #428]	; (800341c <_ftoa+0x254>)
 800326e:	e000      	b.n	8003272 <_ftoa+0xaa>
 8003270:	4b6b      	ldr	r3, [pc, #428]	; (8003420 <_ftoa+0x258>)
 8003272:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003274:	f002 0204 	and.w	r2, r2, #4
 8003278:	2a00      	cmp	r2, #0
 800327a:	d001      	beq.n	8003280 <_ftoa+0xb8>
 800327c:	2204      	movs	r2, #4
 800327e:	e000      	b.n	8003282 <_ftoa+0xba>
 8003280:	2203      	movs	r2, #3
 8003282:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003284:	9103      	str	r1, [sp, #12]
 8003286:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003288:	9102      	str	r1, [sp, #8]
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff fd96 	bl	8002dc6 <_out_rev>
 800329a:	4603      	mov	r3, r0
 800329c:	e1e1      	b.n	8003662 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800329e:	a358      	add	r3, pc, #352	; (adr r3, 8003400 <_ftoa+0x238>)
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032a8:	f7fd fb9e 	bl	80009e8 <__aeabi_dcmpgt>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <_ftoa+0xfe>
 80032b2:	a355      	add	r3, pc, #340	; (adr r3, 8003408 <_ftoa+0x240>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032bc:	f7fd fb76 	bl	80009ac <__aeabi_dcmplt>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d011      	beq.n	80032ea <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80032c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c8:	9304      	str	r3, [sp, #16]
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	9303      	str	r3, [sp, #12]
 80032ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d0:	9302      	str	r3, [sp, #8]
 80032d2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80032d6:	e9cd 2300 	strd	r2, r3, [sp]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f9c9 	bl	8003678 <_etoa>
 80032e6:	4603      	mov	r3, r0
 80032e8:	e1bb      	b.n	8003662 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 80032ea:	2300      	movs	r3, #0
 80032ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  if (value < 0) {
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032fc:	f7fd fb56 	bl	80009ac <__aeabi_dcmplt>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00e      	beq.n	8003324 <_ftoa+0x15c>
    negative = true;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    value = 0 - value;
 800330c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f7fc ff1e 	bl	8000158 <__aeabi_dsub>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800332e:	2306      	movs	r3, #6
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003332:	e00a      	b.n	800334a <_ftoa+0x182>
    buf[len++] = '0';
 8003334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	657a      	str	r2, [r7, #84]	; 0x54
 800333a:	3358      	adds	r3, #88	; 0x58
 800333c:	443b      	add	r3, r7
 800333e:	2230      	movs	r2, #48	; 0x30
 8003340:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003346:	3b01      	subs	r3, #1
 8003348:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800334a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334c:	2b1f      	cmp	r3, #31
 800334e:	d802      	bhi.n	8003356 <_ftoa+0x18e>
 8003350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003352:	2b09      	cmp	r3, #9
 8003354:	d8ee      	bhi.n	8003334 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800335a:	f7fd fb4f 	bl	80009fc <__aeabi_d2iz>
 800335e:	4603      	mov	r3, r0
 8003360:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003362:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003364:	f7fd f846 	bl	80003f4 <__aeabi_i2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003370:	f7fc fef2 	bl	8000158 <__aeabi_dsub>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	4a29      	ldr	r2, [pc, #164]	; (8003424 <_ftoa+0x25c>)
 800337e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	f7fd f89e 	bl	80004c8 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  unsigned long frac = (unsigned long)tmp;
 8003394:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003398:	f7fd fb58 	bl	8000a4c <__aeabi_d2uiz>
 800339c:	4603      	mov	r3, r0
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 80033a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80033a2:	f7fd f817 	bl	80003d4 <__aeabi_ui2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033ae:	f7fc fed3 	bl	8000158 <__aeabi_dsub>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

  if (diff > 0.5) {
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b1a      	ldr	r3, [pc, #104]	; (8003428 <_ftoa+0x260>)
 80033c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033c4:	f7fd fb10 	bl	80009e8 <__aeabi_dcmpgt>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02e      	beq.n	800342c <_ftoa+0x264>
    ++frac;
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d0:	3301      	adds	r3, #1
 80033d2:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80033d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80033d6:	f7fc fffd 	bl	80003d4 <__aeabi_ui2d>
 80033da:	4a12      	ldr	r2, [pc, #72]	; (8003424 <_ftoa+0x25c>)
 80033dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd faf5 	bl	80009d4 <__aeabi_dcmpge>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d032      	beq.n	8003456 <_ftoa+0x28e>
      frac = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80033f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f6:	3301      	adds	r3, #1
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033fa:	e02c      	b.n	8003456 <_ftoa+0x28e>
 80033fc:	f3af 8000 	nop.w
 8003400:	00000000 	.word	0x00000000
 8003404:	41cdcd65 	.word	0x41cdcd65
 8003408:	00000000 	.word	0x00000000
 800340c:	c1cdcd65 	.word	0xc1cdcd65
 8003410:	08008000 	.word	0x08008000
 8003414:	08008004 	.word	0x08008004
 8003418:	7fefffff 	.word	0x7fefffff
 800341c:	0800800c 	.word	0x0800800c
 8003420:	08008014 	.word	0x08008014
 8003424:	08008030 	.word	0x08008030
 8003428:	3fe00000 	.word	0x3fe00000
    }
  }
  else if (diff < 0.5) {
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	4b8e      	ldr	r3, [pc, #568]	; (800366c <_ftoa+0x4a4>)
 8003432:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003436:	f7fd fab9 	bl	80009ac <__aeabi_dcmplt>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <_ftoa+0x28e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <_ftoa+0x288>
 8003446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d002      	beq.n	8003456 <_ftoa+0x28e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003452:	3301      	adds	r3, #1
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 8003456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003458:	2b00      	cmp	r3, #0
 800345a:	d133      	bne.n	80034c4 <_ftoa+0x2fc>
    diff = value - (double)whole;
 800345c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800345e:	f7fc ffc9 	bl	80003f4 <__aeabi_i2d>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800346a:	f7fc fe75 	bl	8000158 <__aeabi_dsub>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003476:	2301      	movs	r3, #1
 8003478:	461c      	mov	r4, r3
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b7b      	ldr	r3, [pc, #492]	; (800366c <_ftoa+0x4a4>)
 8003480:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003484:	f7fd fa92 	bl	80009ac <__aeabi_dcmplt>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <_ftoa+0x2ca>
 800348e:	2300      	movs	r3, #0
 8003490:	461c      	mov	r4, r3
 8003492:	b2e3      	uxtb	r3, r4
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <_ftoa+0x2ea>
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	4b72      	ldr	r3, [pc, #456]	; (800366c <_ftoa+0x4a4>)
 80034a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80034a8:	f7fd fa9e 	bl	80009e8 <__aeabi_dcmpgt>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04c      	beq.n	800354c <_ftoa+0x384>
 80034b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d069      	beq.n	8003590 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 80034bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034be:	3301      	adds	r3, #1
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c2:	e065      	b.n	8003590 <_ftoa+0x3c8>
    }
  }
  else {
    unsigned int count = prec;
 80034c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c6:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034c8:	e01f      	b.n	800350a <_ftoa+0x342>
      --count;
 80034ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034cc:	3b01      	subs	r3, #1
 80034ce:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 80034d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <_ftoa+0x4a8>)
 80034d4:	fba3 2301 	umull	r2, r3, r3, r1
 80034d8:	08da      	lsrs	r2, r3, #3
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	1aca      	subs	r2, r1, r3
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e8:	1c59      	adds	r1, r3, #1
 80034ea:	6579      	str	r1, [r7, #84]	; 0x54
 80034ec:	3230      	adds	r2, #48	; 0x30
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	3358      	adds	r3, #88	; 0x58
 80034f2:	443b      	add	r3, r7
 80034f4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80034f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <_ftoa+0x4a8>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	08db      	lsrs	r3, r3, #3
 8003502:	64bb      	str	r3, [r7, #72]	; 0x48
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	2b1f      	cmp	r3, #31
 800350e:	d9dc      	bls.n	80034ca <_ftoa+0x302>
 8003510:	e009      	b.n	8003526 <_ftoa+0x35e>
        break;
 8003512:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003514:	e007      	b.n	8003526 <_ftoa+0x35e>
      buf[len++] = '0';
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	657a      	str	r2, [r7, #84]	; 0x54
 800351c:	3358      	adds	r3, #88	; 0x58
 800351e:	443b      	add	r3, r7
 8003520:	2230      	movs	r2, #48	; 0x30
 8003522:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	2b1f      	cmp	r3, #31
 800352a:	d804      	bhi.n	8003536 <_ftoa+0x36e>
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	1e5a      	subs	r2, r3, #1
 8003530:	647a      	str	r2, [r7, #68]	; 0x44
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ef      	bne.n	8003516 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003538:	2b1f      	cmp	r3, #31
 800353a:	d829      	bhi.n	8003590 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 800353c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	657a      	str	r2, [r7, #84]	; 0x54
 8003542:	3358      	adds	r3, #88	; 0x58
 8003544:	443b      	add	r3, r7
 8003546:	222e      	movs	r2, #46	; 0x2e
 8003548:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800354c:	e020      	b.n	8003590 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800354e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003550:	4b48      	ldr	r3, [pc, #288]	; (8003674 <_ftoa+0x4ac>)
 8003552:	fb83 1302 	smull	r1, r3, r3, r2
 8003556:	1099      	asrs	r1, r3, #2
 8003558:	17d3      	asrs	r3, r2, #31
 800355a:	1ac9      	subs	r1, r1, r3
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	1ad1      	subs	r1, r2, r3
 8003566:	b2ca      	uxtb	r2, r1
 8003568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356a:	1c59      	adds	r1, r3, #1
 800356c:	6579      	str	r1, [r7, #84]	; 0x54
 800356e:	3230      	adds	r2, #48	; 0x30
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	3358      	adds	r3, #88	; 0x58
 8003574:	443b      	add	r3, r7
 8003576:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <_ftoa+0x4ac>)
 800357e:	fb82 1203 	smull	r1, r2, r2, r3
 8003582:	1092      	asrs	r2, r2, #2
 8003584:	17db      	asrs	r3, r3, #31
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003592:	2b1f      	cmp	r3, #31
 8003594:	d9db      	bls.n	800354e <_ftoa+0x386>
 8003596:	e000      	b.n	800359a <_ftoa+0x3d2>
      break;
 8003598:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800359a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d123      	bne.n	80035ec <_ftoa+0x424>
 80035a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d01e      	beq.n	80035ec <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80035ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d014      	beq.n	80035de <_ftoa+0x416>
 80035b4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <_ftoa+0x3fe>
 80035bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <_ftoa+0x416>
      width--;
 80035c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035c8:	3b01      	subs	r3, #1
 80035ca:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035cc:	e007      	b.n	80035de <_ftoa+0x416>
      buf[len++] = '0';
 80035ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	657a      	str	r2, [r7, #84]	; 0x54
 80035d4:	3358      	adds	r3, #88	; 0x58
 80035d6:	443b      	add	r3, r7
 80035d8:	2230      	movs	r2, #48	; 0x30
 80035da:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80035e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d202      	bcs.n	80035ec <_ftoa+0x424>
 80035e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e8:	2b1f      	cmp	r3, #31
 80035ea:	d9f0      	bls.n	80035ce <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	2b1f      	cmp	r3, #31
 80035f0:	d827      	bhi.n	8003642 <_ftoa+0x47a>
    if (negative) {
 80035f2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <_ftoa+0x444>
      buf[len++] = '-';
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	657a      	str	r2, [r7, #84]	; 0x54
 8003600:	3358      	adds	r3, #88	; 0x58
 8003602:	443b      	add	r3, r7
 8003604:	222d      	movs	r2, #45	; 0x2d
 8003606:	f803 2c48 	strb.w	r2, [r3, #-72]
 800360a:	e01a      	b.n	8003642 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 800360c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	657a      	str	r2, [r7, #84]	; 0x54
 800361c:	3358      	adds	r3, #88	; 0x58
 800361e:	443b      	add	r3, r7
 8003620:	222b      	movs	r2, #43	; 0x2b
 8003622:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003626:	e00c      	b.n	8003642 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <_ftoa+0x47a>
      buf[len++] = ' ';
 8003632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	657a      	str	r2, [r7, #84]	; 0x54
 8003638:	3358      	adds	r3, #88	; 0x58
 800363a:	443b      	add	r3, r7
 800363c:	2220      	movs	r2, #32
 800363e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003644:	9303      	str	r3, [sp, #12]
 8003646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003648:	9302      	str	r3, [sp, #8]
 800364a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f7ff fbb3 	bl	8002dc6 <_out_rev>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	375c      	adds	r7, #92	; 0x5c
 8003666:	46bd      	mov	sp, r7
 8003668:	bd90      	pop	{r4, r7, pc}
 800366a:	bf00      	nop
 800366c:	3fe00000 	.word	0x3fe00000
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	66666667 	.word	0x66666667

08003678 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800367c:	b09d      	sub	sp, #116	; 0x74
 800367e:	af06      	add	r7, sp, #24
 8003680:	61f8      	str	r0, [r7, #28]
 8003682:	61b9      	str	r1, [r7, #24]
 8003684:	617a      	str	r2, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003688:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800368c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003690:	f7fd f982 	bl	8000998 <__aeabi_dcmpeq>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d014      	beq.n	80036c4 <_etoa+0x4c>
 800369a:	f04f 32ff 	mov.w	r2, #4294967295
 800369e:	4bc4      	ldr	r3, [pc, #784]	; (80039b0 <_etoa+0x338>)
 80036a0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036a4:	f7fd f9a0 	bl	80009e8 <__aeabi_dcmpgt>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <_etoa+0x4c>
 80036ae:	f04f 32ff 	mov.w	r2, #4294967295
 80036b2:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80036b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036ba:	f7fd f977 	bl	80009ac <__aeabi_dcmplt>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d014      	beq.n	80036ee <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80036c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ce:	9303      	str	r3, [sp, #12]
 80036d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80036da:	e9cd 2300 	strd	r2, r3, [sp]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	69b9      	ldr	r1, [r7, #24]
 80036e4:	69f8      	ldr	r0, [r7, #28]
 80036e6:	f7ff fd6f 	bl	80031c8 <_ftoa>
 80036ea:	4603      	mov	r3, r0
 80036ec:	e247      	b.n	8003b7e <_etoa+0x506>
  }

  // determine the sign
  const bool negative = value < 0;
 80036ee:	2301      	movs	r3, #1
 80036f0:	461e      	mov	r6, r3
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036fe:	f7fd f955 	bl	80009ac <__aeabi_dcmplt>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <_etoa+0x94>
 8003708:	2300      	movs	r3, #0
 800370a:	461e      	mov	r6, r3
 800370c:	f887 604b 	strb.w	r6, [r7, #75]	; 0x4b
  if (negative) {
 8003710:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <_etoa+0xb8>
    value = -value;
 8003718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003722:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003726:	607b      	str	r3, [r7, #4]
 8003728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800372c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <_etoa+0xca>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800373c:	2306      	movs	r3, #6
 800373e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003742:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003746:	e9c7 2308 	strd	r2, r3, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800374a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	0d0a      	lsrs	r2, r1, #20
 8003758:	2300      	movs	r3, #0
 800375a:	4613      	mov	r3, r2
 800375c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003760:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003764:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800376a:	4690      	mov	r8, r2
 800376c:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003770:	4644      	mov	r4, r8
 8003772:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003776:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800377a:	e9c7 4508 	strd	r4, r5, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800377e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003780:	f7fc fe38 	bl	80003f4 <__aeabi_i2d>
 8003784:	a37e      	add	r3, pc, #504	; (adr r3, 8003980 <_etoa+0x308>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc fe9d 	bl	80004c8 <__aeabi_dmul>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	a37c      	add	r3, pc, #496	; (adr r3, 8003988 <_etoa+0x310>)
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f7fc fcde 	bl	800015c <__adddf3>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	461d      	mov	r5, r3
 80037a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	4b80      	ldr	r3, [pc, #512]	; (80039b4 <_etoa+0x33c>)
 80037b2:	f7fc fcd1 	bl	8000158 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	a374      	add	r3, pc, #464	; (adr r3, 8003990 <_etoa+0x318>)
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f7fc fe80 	bl	80004c8 <__aeabi_dmul>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4620      	mov	r0, r4
 80037ce:	4629      	mov	r1, r5
 80037d0:	f7fc fcc4 	bl	800015c <__adddf3>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fd f90e 	bl	80009fc <__aeabi_d2iz>
 80037e0:	4603      	mov	r3, r0
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80037e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80037e6:	f7fc fe05 	bl	80003f4 <__aeabi_i2d>
 80037ea:	a36b      	add	r3, pc, #428	; (adr r3, 8003998 <_etoa+0x320>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f7fc fe6a 	bl	80004c8 <__aeabi_dmul>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <_etoa+0x340>)
 8003802:	f7fc fcab 	bl	800015c <__adddf3>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	f7fd f8f5 	bl	80009fc <__aeabi_d2iz>
 8003812:	4603      	mov	r3, r0
 8003814:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003816:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003818:	f7fc fdec 	bl	80003f4 <__aeabi_i2d>
 800381c:	a360      	add	r3, pc, #384	; (adr r3, 80039a0 <_etoa+0x328>)
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f7fc fe51 	bl	80004c8 <__aeabi_dmul>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4614      	mov	r4, r2
 800382c:	461d      	mov	r5, r3
 800382e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003830:	f7fc fde0 	bl	80003f4 <__aeabi_i2d>
 8003834:	a35c      	add	r3, pc, #368	; (adr r3, 80039a8 <_etoa+0x330>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc fe45 	bl	80004c8 <__aeabi_dmul>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4620      	mov	r0, r4
 8003844:	4629      	mov	r1, r5
 8003846:	f7fc fc87 	bl	8000158 <__aeabi_dsub>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  const double z2 = z * z;
 8003852:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003856:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800385a:	f7fc fe35 	bl	80004c8 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003868:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800386c:	17da      	asrs	r2, r3, #31
 800386e:	469a      	mov	sl, r3
 8003870:	4693      	mov	fp, r2
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800387e:	2200      	movs	r2, #0
 8003880:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003884:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003888:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	f7fc fc64 	bl	800015c <__adddf3>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4690      	mov	r8, r2
 800389a:	4699      	mov	r9, r3
 800389c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038a0:	f04f 0000 	mov.w	r0, #0
 80038a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80038a8:	f7fc fc56 	bl	8000158 <__aeabi_dsub>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4692      	mov	sl, r2
 80038b2:	469b      	mov	fp, r3
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	4b40      	ldr	r3, [pc, #256]	; (80039bc <_etoa+0x344>)
 80038ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038be:	f7fc ff2d 	bl	800071c <__aeabi_ddiv>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <_etoa+0x348>)
 80038d0:	f7fc fc44 	bl	800015c <__adddf3>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038dc:	f7fc ff1e 	bl	800071c <__aeabi_ddiv>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4610      	mov	r0, r2
 80038e6:	4619      	mov	r1, r3
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	4b35      	ldr	r3, [pc, #212]	; (80039c4 <_etoa+0x34c>)
 80038ee:	f7fc fc35 	bl	800015c <__adddf3>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038fa:	f7fc ff0f 	bl	800071c <__aeabi_ddiv>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4650      	mov	r0, sl
 8003904:	4659      	mov	r1, fp
 8003906:	f7fc fc29 	bl	800015c <__adddf3>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4640      	mov	r0, r8
 8003910:	4649      	mov	r1, r9
 8003912:	f7fc ff03 	bl	800071c <__aeabi_ddiv>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4610      	mov	r0, r2
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	4b29      	ldr	r3, [pc, #164]	; (80039c8 <_etoa+0x350>)
 8003924:	f7fc fc1a 	bl	800015c <__adddf3>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4620      	mov	r0, r4
 800392e:	4629      	mov	r1, r5
 8003930:	f7fc fdca 	bl	80004c8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	e9c7 2308 	strd	r2, r3, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800393c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003940:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003944:	f7fd f832 	bl	80009ac <__aeabi_dcmplt>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <_etoa+0x2f2>
    expval--;
 800394e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003950:	3b01      	subs	r3, #1
 8003952:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8003954:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <_etoa+0x348>)
 800395e:	f7fc fedd 	bl	800071c <__aeabi_ddiv>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800396a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800396c:	2b63      	cmp	r3, #99	; 0x63
 800396e:	dc2d      	bgt.n	80039cc <_etoa+0x354>
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003976:	db29      	blt.n	80039cc <_etoa+0x354>
 8003978:	2304      	movs	r3, #4
 800397a:	e028      	b.n	80039ce <_etoa+0x356>
 800397c:	f3af 8000 	nop.w
 8003980:	509f79fb 	.word	0x509f79fb
 8003984:	3fd34413 	.word	0x3fd34413
 8003988:	8b60c8b3 	.word	0x8b60c8b3
 800398c:	3fc68a28 	.word	0x3fc68a28
 8003990:	636f4361 	.word	0x636f4361
 8003994:	3fd287a7 	.word	0x3fd287a7
 8003998:	0979a371 	.word	0x0979a371
 800399c:	400a934f 	.word	0x400a934f
 80039a0:	bbb55516 	.word	0xbbb55516
 80039a4:	40026bb1 	.word	0x40026bb1
 80039a8:	fefa39ef 	.word	0xfefa39ef
 80039ac:	3fe62e42 	.word	0x3fe62e42
 80039b0:	7fefffff 	.word	0x7fefffff
 80039b4:	3ff80000 	.word	0x3ff80000
 80039b8:	3fe00000 	.word	0x3fe00000
 80039bc:	402c0000 	.word	0x402c0000
 80039c0:	40240000 	.word	0x40240000
 80039c4:	40180000 	.word	0x40180000
 80039c8:	3ff00000 	.word	0x3ff00000
 80039cc:	2305      	movs	r3, #5
 80039ce:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80039d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d03d      	beq.n	8003a58 <_etoa+0x3e0>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80039dc:	a36a      	add	r3, pc, #424	; (adr r3, 8003b88 <_etoa+0x510>)
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039e6:	f7fc fff5 	bl	80009d4 <__aeabi_dcmpge>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d024      	beq.n	8003a3a <_etoa+0x3c2>
 80039f0:	a367      	add	r3, pc, #412	; (adr r3, 8003b90 <_etoa+0x518>)
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039fa:	f7fc ffd7 	bl	80009ac <__aeabi_dcmplt>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <_etoa+0x3c2>
      if ((int)prec > expval) {
 8003a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	da07      	bge.n	8003a1e <_etoa+0x3a6>
        prec = (unsigned)((int)prec - expval - 1);
 8003a0e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a1c:	e002      	b.n	8003a24 <_etoa+0x3ac>
      }
      else {
        prec = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	657b      	str	r3, [r7, #84]	; 0x54
 8003a38:	e00e      	b.n	8003a58 <_etoa+0x3e0>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <_etoa+0x3e0>
 8003a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <_etoa+0x3e0>
        --prec;
 8003a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a52:	3b01      	subs	r3, #1
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8003a5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d904      	bls.n	8003a72 <_etoa+0x3fa>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	e001      	b.n	8003a76 <_etoa+0x3fe>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003a76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <_etoa+0x414>
 8003a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <_etoa+0x414>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8003a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <_etoa+0x42e>
    value /= conv.F;
 8003a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a9a:	f7fc fe3f 	bl	800071c <__aeabi_ddiv>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  }

  // output the floating part
  const size_t start_idx = idx;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8003aaa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <_etoa+0x44c>
 8003ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003abc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e003      	b.n	8003acc <_etoa+0x454>
 8003ac4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003ac8:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8003acc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad4:	9304      	str	r3, [sp, #16]
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ad8:	9303      	str	r3, [sp, #12]
 8003ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003ae4:	e9cd 3400 	strd	r3, r4, [sp]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69f8      	ldr	r0, [r7, #28]
 8003af0:	f7ff fb6a 	bl	80031c8 <_ftoa>
 8003af4:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 8003af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d03f      	beq.n	8003b7c <_etoa+0x504>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <_etoa+0x494>
 8003b08:	2045      	movs	r0, #69	; 0x45
 8003b0a:	e000      	b.n	8003b0e <_etoa+0x496>
 8003b0c:	2065      	movs	r0, #101	; 0x65
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	1c53      	adds	r3, r2, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	69fc      	ldr	r4, [r7, #28]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfb8      	it	lt
 8003b22:	425b      	neglt	r3, r3
 8003b24:	4618      	mov	r0, r3
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	0fdb      	lsrs	r3, r3, #31
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	2105      	movs	r1, #5
 8003b32:	9105      	str	r1, [sp, #20]
 8003b34:	9204      	str	r2, [sp, #16]
 8003b36:	2200      	movs	r2, #0
 8003b38:	9203      	str	r2, [sp, #12]
 8003b3a:	220a      	movs	r2, #10
 8003b3c:	9202      	str	r2, [sp, #8]
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	9000      	str	r0, [sp, #0]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	69b9      	ldr	r1, [r7, #24]
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f7ff fa68 	bl	800301e <_ntoa_long>
 8003b4e:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <_etoa+0x504>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003b5c:	e007      	b.n	8003b6e <_etoa+0x4f6>
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	1c53      	adds	r3, r2, #1
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	69fc      	ldr	r4, [r7, #28]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	2020      	movs	r0, #32
 8003b6c:	47a0      	blx	r4
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d8f0      	bhi.n	8003b5e <_etoa+0x4e6>
    }
  }
  return idx;
 8003b7c:	697b      	ldr	r3, [r7, #20]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	375c      	adds	r7, #92	; 0x5c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b88:	eb1c432d 	.word	0xeb1c432d
 8003b8c:	3f1a36e2 	.word	0x3f1a36e2
 8003b90:	00000000 	.word	0x00000000
 8003b94:	412e8480 	.word	0x412e8480

08003b98 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	b0a3      	sub	sp, #140	; 0x8c
 8003b9e:	af0a      	add	r7, sp, #40	; 0x28
 8003ba0:	6178      	str	r0, [r7, #20]
 8003ba2:	6139      	str	r1, [r7, #16]
 8003ba4:	60fa      	str	r2, [r7, #12]
 8003ba6:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f040 84ba 	bne.w	8004528 <_vsnprintf+0x990>
    // use null output function
    out = _out_null;
 8003bb4:	4ba3      	ldr	r3, [pc, #652]	; (8003e44 <_vsnprintf+0x2ac>)
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003bb8:	f000 bcb6 	b.w	8004528 <_vsnprintf+0x990>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b25      	cmp	r3, #37	; 0x25
 8003bc2:	d00d      	beq.n	8003be0 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	7818      	ldrb	r0, [r3, #0]
 8003bc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bca:	1c53      	adds	r3, r2, #1
 8003bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bce:	697c      	ldr	r4, [r7, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6939      	ldr	r1, [r7, #16]
 8003bd4:	47a0      	blx	r4
      format++;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60bb      	str	r3, [r7, #8]
      continue;
 8003bdc:	f000 bca4 	b.w	8004528 <_vsnprintf+0x990>
    }
    else {
      // yes, evaluate it
      format++;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	3301      	adds	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3b20      	subs	r3, #32
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d857      	bhi.n	8003ca4 <_vsnprintf+0x10c>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <_vsnprintf+0x64>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c7d 	.word	0x08003c7d
 8003c00:	08003ca5 	.word	0x08003ca5
 8003c04:	08003ca5 	.word	0x08003ca5
 8003c08:	08003c91 	.word	0x08003c91
 8003c0c:	08003ca5 	.word	0x08003ca5
 8003c10:	08003ca5 	.word	0x08003ca5
 8003c14:	08003ca5 	.word	0x08003ca5
 8003c18:	08003ca5 	.word	0x08003ca5
 8003c1c:	08003ca5 	.word	0x08003ca5
 8003c20:	08003ca5 	.word	0x08003ca5
 8003c24:	08003ca5 	.word	0x08003ca5
 8003c28:	08003c69 	.word	0x08003c69
 8003c2c:	08003ca5 	.word	0x08003ca5
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003ca5 	.word	0x08003ca5
 8003c38:	08003ca5 	.word	0x08003ca5
 8003c3c:	08003c41 	.word	0x08003c41
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	2301      	movs	r3, #1
 8003c50:	653b      	str	r3, [r7, #80]	; 0x50
 8003c52:	e02a      	b.n	8003caa <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c56:	f043 0302 	orr.w	r3, r3, #2
 8003c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	2301      	movs	r3, #1
 8003c64:	653b      	str	r3, [r7, #80]	; 0x50
 8003c66:	e020      	b.n	8003caa <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c6a:	f043 0304 	orr.w	r3, r3, #4
 8003c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	2301      	movs	r3, #1
 8003c78:	653b      	str	r3, [r7, #80]	; 0x50
 8003c7a:	e016      	b.n	8003caa <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7e:	f043 0308 	orr.w	r3, r3, #8
 8003c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8e:	e00c      	b.n	8003caa <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c92:	f043 0310 	orr.w	r3, r3, #16
 8003c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca2:	e002      	b.n	8003caa <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca8:	bf00      	nop
      }
    } while (n);
 8003caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d19c      	bne.n	8003bea <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff f84a 	bl	8002d52 <_is_digit>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8003cc4:	f107 0308 	add.w	r3, r7, #8
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff f858 	bl	8002d7e <_atoi>
 8003cce:	65b8      	str	r0, [r7, #88]	; 0x58
 8003cd0:	e01a      	b.n	8003d08 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd8:	d116      	bne.n	8003d08 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003cda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	da07      	bge.n	8003cfe <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8003cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf8:	425b      	negs	r3, r3
 8003cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cfc:	e001      	b.n	8003d02 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b2e      	cmp	r3, #46	; 0x2e
 8003d12:	d127      	bne.n	8003d64 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8003d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff f813 	bl	8002d52 <_is_digit>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d006      	beq.n	8003d40 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f821 	bl	8002d7e <_atoi>
 8003d3c:	6578      	str	r0, [r7, #84]	; 0x54
 8003d3e:	e011      	b.n	8003d64 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b2a      	cmp	r3, #42	; 0x2a
 8003d46:	d10d      	bne.n	8003d64 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d4c:	1d1a      	adds	r2, r3, #4
 8003d4e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003d5c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	3b68      	subs	r3, #104	; 0x68
 8003d6a:	2b12      	cmp	r3, #18
 8003d6c:	d866      	bhi.n	8003e3c <_vsnprintf+0x2a4>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <_vsnprintf+0x1dc>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003de7 	.word	0x08003de7
 8003d78:	08003e3d 	.word	0x08003e3d
 8003d7c:	08003e1d 	.word	0x08003e1d
 8003d80:	08003e3d 	.word	0x08003e3d
 8003d84:	08003dc1 	.word	0x08003dc1
 8003d88:	08003e3d 	.word	0x08003e3d
 8003d8c:	08003e3d 	.word	0x08003e3d
 8003d90:	08003e3d 	.word	0x08003e3d
 8003d94:	08003e3d 	.word	0x08003e3d
 8003d98:	08003e3d 	.word	0x08003e3d
 8003d9c:	08003e3d 	.word	0x08003e3d
 8003da0:	08003e3d 	.word	0x08003e3d
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003e3d 	.word	0x08003e3d
 8003dac:	08003e3d 	.word	0x08003e3d
 8003db0:	08003e3d 	.word	0x08003e3d
 8003db4:	08003e3d 	.word	0x08003e3d
 8003db8:	08003e3d 	.word	0x08003e3d
 8003dbc:	08003e2d 	.word	0x08003e2d
      case 'l' :
        flags |= FLAGS_LONG;
 8003dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b6c      	cmp	r3, #108	; 0x6c
 8003dd4:	d134      	bne.n	8003e40 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	3301      	adds	r3, #1
 8003de2:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003de4:	e02c      	b.n	8003e40 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b68      	cmp	r3, #104	; 0x68
 8003dfa:	d125      	bne.n	8003e48 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e02:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60bb      	str	r3, [r7, #8]
        }
        break;
 8003e0a:	e01d      	b.n	8003e48 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
        break;
 8003e1a:	e016      	b.n	8003e4a <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
        break;
 8003e2a:	e00e      	b.n	8003e4a <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e32:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
        break;
 8003e3a:	e006      	b.n	8003e4a <_vsnprintf+0x2b2>
      default :
        break;
 8003e3c:	bf00      	nop
 8003e3e:	e004      	b.n	8003e4a <_vsnprintf+0x2b2>
        break;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <_vsnprintf+0x2b2>
 8003e44:	08002d01 	.word	0x08002d01
        break;
 8003e48:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	3b25      	subs	r3, #37	; 0x25
 8003e50:	2b53      	cmp	r3, #83	; 0x53
 8003e52:	f200 835c 	bhi.w	800450e <_vsnprintf+0x976>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <_vsnprintf+0x2c4>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	080044f7 	.word	0x080044f7
 8003e60:	0800450f 	.word	0x0800450f
 8003e64:	0800450f 	.word	0x0800450f
 8003e68:	0800450f 	.word	0x0800450f
 8003e6c:	0800450f 	.word	0x0800450f
 8003e70:	0800450f 	.word	0x0800450f
 8003e74:	0800450f 	.word	0x0800450f
 8003e78:	0800450f 	.word	0x0800450f
 8003e7c:	0800450f 	.word	0x0800450f
 8003e80:	0800450f 	.word	0x0800450f
 8003e84:	0800450f 	.word	0x0800450f
 8003e88:	0800450f 	.word	0x0800450f
 8003e8c:	0800450f 	.word	0x0800450f
 8003e90:	0800450f 	.word	0x0800450f
 8003e94:	0800450f 	.word	0x0800450f
 8003e98:	0800450f 	.word	0x0800450f
 8003e9c:	0800450f 	.word	0x0800450f
 8003ea0:	0800450f 	.word	0x0800450f
 8003ea4:	0800450f 	.word	0x0800450f
 8003ea8:	0800450f 	.word	0x0800450f
 8003eac:	0800450f 	.word	0x0800450f
 8003eb0:	0800450f 	.word	0x0800450f
 8003eb4:	0800450f 	.word	0x0800450f
 8003eb8:	0800450f 	.word	0x0800450f
 8003ebc:	0800450f 	.word	0x0800450f
 8003ec0:	0800450f 	.word	0x0800450f
 8003ec4:	0800450f 	.word	0x0800450f
 8003ec8:	0800450f 	.word	0x0800450f
 8003ecc:	0800450f 	.word	0x0800450f
 8003ed0:	0800450f 	.word	0x0800450f
 8003ed4:	0800450f 	.word	0x0800450f
 8003ed8:	0800450f 	.word	0x0800450f
 8003edc:	080042af 	.word	0x080042af
 8003ee0:	08004263 	.word	0x08004263
 8003ee4:	080042af 	.word	0x080042af
 8003ee8:	0800450f 	.word	0x0800450f
 8003eec:	0800450f 	.word	0x0800450f
 8003ef0:	0800450f 	.word	0x0800450f
 8003ef4:	0800450f 	.word	0x0800450f
 8003ef8:	0800450f 	.word	0x0800450f
 8003efc:	0800450f 	.word	0x0800450f
 8003f00:	0800450f 	.word	0x0800450f
 8003f04:	0800450f 	.word	0x0800450f
 8003f08:	0800450f 	.word	0x0800450f
 8003f0c:	0800450f 	.word	0x0800450f
 8003f10:	0800450f 	.word	0x0800450f
 8003f14:	0800450f 	.word	0x0800450f
 8003f18:	0800450f 	.word	0x0800450f
 8003f1c:	0800450f 	.word	0x0800450f
 8003f20:	0800450f 	.word	0x0800450f
 8003f24:	0800450f 	.word	0x0800450f
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	0800450f 	.word	0x0800450f
 8003f30:	0800450f 	.word	0x0800450f
 8003f34:	0800450f 	.word	0x0800450f
 8003f38:	0800450f 	.word	0x0800450f
 8003f3c:	0800450f 	.word	0x0800450f
 8003f40:	0800450f 	.word	0x0800450f
 8003f44:	0800450f 	.word	0x0800450f
 8003f48:	0800450f 	.word	0x0800450f
 8003f4c:	0800450f 	.word	0x0800450f
 8003f50:	08003fad 	.word	0x08003fad
 8003f54:	0800431b 	.word	0x0800431b
 8003f58:	08003fad 	.word	0x08003fad
 8003f5c:	080042af 	.word	0x080042af
 8003f60:	08004263 	.word	0x08004263
 8003f64:	080042af 	.word	0x080042af
 8003f68:	0800450f 	.word	0x0800450f
 8003f6c:	08003fad 	.word	0x08003fad
 8003f70:	0800450f 	.word	0x0800450f
 8003f74:	0800450f 	.word	0x0800450f
 8003f78:	0800450f 	.word	0x0800450f
 8003f7c:	0800450f 	.word	0x0800450f
 8003f80:	0800450f 	.word	0x0800450f
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	0800445b 	.word	0x0800445b
 8003f8c:	0800450f 	.word	0x0800450f
 8003f90:	0800450f 	.word	0x0800450f
 8003f94:	08004393 	.word	0x08004393
 8003f98:	0800450f 	.word	0x0800450f
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	0800450f 	.word	0x0800450f
 8003fa4:	0800450f 	.word	0x0800450f
 8003fa8:	08003fad 	.word	0x08003fad
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b78      	cmp	r3, #120	; 0x78
 8003fb2:	d003      	beq.n	8003fbc <_vsnprintf+0x424>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b58      	cmp	r3, #88	; 0x58
 8003fba:	d102      	bne.n	8003fc2 <_vsnprintf+0x42a>
          base = 16U;
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc0:	e013      	b.n	8003fea <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b6f      	cmp	r3, #111	; 0x6f
 8003fc8:	d102      	bne.n	8003fd0 <_vsnprintf+0x438>
          base =  8U;
 8003fca:	2308      	movs	r3, #8
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fce:	e00c      	b.n	8003fea <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b62      	cmp	r3, #98	; 0x62
 8003fd6:	d102      	bne.n	8003fde <_vsnprintf+0x446>
          base =  2U;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fdc:	e005      	b.n	8003fea <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003fde:	230a      	movs	r3, #10
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe4:	f023 0310 	bic.w	r3, r3, #16
 8003fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b58      	cmp	r3, #88	; 0x58
 8003ff0:	d103      	bne.n	8003ffa <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 8003ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff4:	f043 0320 	orr.w	r3, r3, #32
 8003ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b69      	cmp	r3, #105	; 0x69
 8004000:	d007      	beq.n	8004012 <_vsnprintf+0x47a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d003      	beq.n	8004012 <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800400a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400c:	f023 030c 	bic.w	r3, r3, #12
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8004012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b69      	cmp	r3, #105	; 0x69
 800402a:	d004      	beq.n	8004036 <_vsnprintf+0x49e>
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b64      	cmp	r3, #100	; 0x64
 8004032:	f040 8098 	bne.w	8004166 <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403c:	2b00      	cmp	r3, #0
 800403e:	d031      	beq.n	80040a4 <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8004040:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004044:	3307      	adds	r3, #7
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	f103 0208 	add.w	r2, r3, #8
 800404e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800405a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	da06      	bge.n	8004070 <_vsnprintf+0x4d8>
 8004062:	2100      	movs	r1, #0
 8004064:	f1d2 0800 	rsbs	r8, r2, #0
 8004068:	eb61 0903 	sbc.w	r9, r1, r3
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	0fc9      	lsrs	r1, r1, #31
 8004074:	b2c9      	uxtb	r1, r1
 8004076:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004078:	2400      	movs	r4, #0
 800407a:	4682      	mov	sl, r0
 800407c:	46a3      	mov	fp, r4
 800407e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004080:	9008      	str	r0, [sp, #32]
 8004082:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004084:	9007      	str	r0, [sp, #28]
 8004086:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004088:	9006      	str	r0, [sp, #24]
 800408a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800408e:	9102      	str	r1, [sp, #8]
 8004090:	e9cd 2300 	strd	r2, r3, [sp]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004098:	6939      	ldr	r1, [r7, #16]
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7ff f825 	bl	80030ea <_ntoa_long_long>
 80040a0:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80040a2:	e0da      	b.n	800425a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80040a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d020      	beq.n	80040f0 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 80040ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfb8      	it	lt
 80040c2:	425b      	neglt	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	0fdb      	lsrs	r3, r3, #31
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ce:	9205      	str	r2, [sp, #20]
 80040d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d2:	9204      	str	r2, [sp, #16]
 80040d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040d6:	9203      	str	r2, [sp, #12]
 80040d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040da:	9202      	str	r2, [sp, #8]
 80040dc:	9301      	str	r3, [sp, #4]
 80040de:	9100      	str	r1, [sp, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e4:	6939      	ldr	r1, [r7, #16]
 80040e6:	6978      	ldr	r0, [r7, #20]
 80040e8:	f7fe ff99 	bl	800301e <_ntoa_long>
 80040ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80040ee:	e0b4      	b.n	800425a <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80040f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <_vsnprintf+0x572>
 80040fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e012      	b.n	8004130 <_vsnprintf+0x598>
 800410a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <_vsnprintf+0x58c>
 8004114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004118:	1d1a      	adds	r2, r3, #4
 800411a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b21b      	sxth	r3, r3
 8004122:	e005      	b.n	8004130 <_vsnprintf+0x598>
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004128:	1d1a      	adds	r2, r3, #4
 800412a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	bfb8      	it	lt
 8004138:	425b      	neglt	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	0fdb      	lsrs	r3, r3, #31
 8004140:	b2db      	uxtb	r3, r3
 8004142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004144:	9205      	str	r2, [sp, #20]
 8004146:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004148:	9204      	str	r2, [sp, #16]
 800414a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800414c:	9203      	str	r2, [sp, #12]
 800414e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004150:	9202      	str	r2, [sp, #8]
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	9100      	str	r1, [sp, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800415a:	6939      	ldr	r1, [r7, #16]
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f7fe ff5e 	bl	800301e <_ntoa_long>
 8004162:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004164:	e079      	b.n	800425a <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8004166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004170:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004174:	3307      	adds	r3, #7
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	f103 0208 	add.w	r2, r3, #8
 800417e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004188:	2000      	movs	r0, #0
 800418a:	460d      	mov	r5, r1
 800418c:	4606      	mov	r6, r0
 800418e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004190:	9108      	str	r1, [sp, #32]
 8004192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004194:	9107      	str	r1, [sp, #28]
 8004196:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004198:	9106      	str	r1, [sp, #24]
 800419a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800419e:	2100      	movs	r1, #0
 80041a0:	9102      	str	r1, [sp, #8]
 80041a2:	e9cd 2300 	strd	r2, r3, [sp]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041aa:	6939      	ldr	r1, [r7, #16]
 80041ac:	6978      	ldr	r0, [r7, #20]
 80041ae:	f7fe ff9c 	bl	80030ea <_ntoa_long_long>
 80041b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80041b4:	e051      	b.n	800425a <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80041b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d018      	beq.n	80041f2 <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80041c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041c4:	1d1a      	adds	r2, r3, #4
 80041c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ce:	9205      	str	r2, [sp, #20]
 80041d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041d2:	9204      	str	r2, [sp, #16]
 80041d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041d6:	9203      	str	r2, [sp, #12]
 80041d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041da:	9202      	str	r2, [sp, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	9201      	str	r2, [sp, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041e6:	6939      	ldr	r1, [r7, #16]
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f7fe ff18 	bl	800301e <_ntoa_long>
 80041ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 80041f0:	e033      	b.n	800425a <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80041f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d007      	beq.n	800420c <_vsnprintf+0x674>
 80041fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004200:	1d1a      	adds	r2, r3, #4
 8004202:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	e012      	b.n	8004232 <_vsnprintf+0x69a>
 800420c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <_vsnprintf+0x68e>
 8004216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800421a:	1d1a      	adds	r2, r3, #4
 800421c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	e005      	b.n	8004232 <_vsnprintf+0x69a>
 8004226:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422a:	1d1a      	adds	r2, r3, #4
 800422c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	9305      	str	r3, [sp, #20]
 8004238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800423a:	9304      	str	r3, [sp, #16]
 800423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423e:	9303      	str	r3, [sp, #12]
 8004240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004242:	9302      	str	r3, [sp, #8]
 8004244:	2300      	movs	r3, #0
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	6978      	ldr	r0, [r7, #20]
 8004254:	f7fe fee3 	bl	800301e <_ntoa_long>
 8004258:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	3301      	adds	r3, #1
 800425e:	60bb      	str	r3, [r7, #8]
        break;
 8004260:	e162      	b.n	8004528 <_vsnprintf+0x990>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b46      	cmp	r3, #70	; 0x46
 8004268:	d103      	bne.n	8004272 <_vsnprintf+0x6da>
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	f043 0320 	orr.w	r3, r3, #32
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004276:	3307      	adds	r3, #7
 8004278:	f023 0307 	bic.w	r3, r3, #7
 800427c:	f103 0208 	add.w	r2, r3, #8
 8004280:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800428a:	9104      	str	r1, [sp, #16]
 800428c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800428e:	9103      	str	r1, [sp, #12]
 8004290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004292:	9102      	str	r1, [sp, #8]
 8004294:	e9cd 2300 	strd	r2, r3, [sp]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7fe ff92 	bl	80031c8 <_ftoa>
 80042a4:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	3301      	adds	r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
        break;
 80042ac:	e13c      	b.n	8004528 <_vsnprintf+0x990>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b67      	cmp	r3, #103	; 0x67
 80042b4:	d003      	beq.n	80042be <_vsnprintf+0x726>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b47      	cmp	r3, #71	; 0x47
 80042bc:	d103      	bne.n	80042c6 <_vsnprintf+0x72e>
 80042be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b45      	cmp	r3, #69	; 0x45
 80042cc:	d003      	beq.n	80042d6 <_vsnprintf+0x73e>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b47      	cmp	r3, #71	; 0x47
 80042d4:	d103      	bne.n	80042de <_vsnprintf+0x746>
 80042d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80042de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e2:	3307      	adds	r3, #7
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	f103 0208 	add.w	r2, r3, #8
 80042ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80042f6:	9104      	str	r1, [sp, #16]
 80042f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042fa:	9103      	str	r1, [sp, #12]
 80042fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042fe:	9102      	str	r1, [sp, #8]
 8004300:	e9cd 2300 	strd	r2, r3, [sp]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004308:	6939      	ldr	r1, [r7, #16]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff f9b4 	bl	8003678 <_etoa>
 8004310:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3301      	adds	r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
        break;
 8004318:	e106      	b.n	8004528 <_vsnprintf+0x990>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800431a:	2301      	movs	r3, #1
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800431e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10e      	bne.n	8004346 <_vsnprintf+0x7ae>
          while (l++ < width) {
 8004328:	e007      	b.n	800433a <_vsnprintf+0x7a2>
            out(' ', buffer, idx++, maxlen);
 800432a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800432c:	1c53      	adds	r3, r2, #1
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004330:	697c      	ldr	r4, [r7, #20]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6939      	ldr	r1, [r7, #16]
 8004336:	2020      	movs	r0, #32
 8004338:	47a0      	blx	r4
          while (l++ < width) {
 800433a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	647a      	str	r2, [r7, #68]	; 0x44
 8004340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004342:	429a      	cmp	r2, r3
 8004344:	d8f1      	bhi.n	800432a <_vsnprintf+0x792>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004346:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b2d8      	uxtb	r0, r3
 8004354:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004356:	1c53      	adds	r3, r2, #1
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
 800435a:	697c      	ldr	r4, [r7, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6939      	ldr	r1, [r7, #16]
 8004360:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <_vsnprintf+0x7f2>
          while (l++ < width) {
 800436c:	e007      	b.n	800437e <_vsnprintf+0x7e6>
            out(' ', buffer, idx++, maxlen);
 800436e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004370:	1c53      	adds	r3, r2, #1
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004374:	697c      	ldr	r4, [r7, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6939      	ldr	r1, [r7, #16]
 800437a:	2020      	movs	r0, #32
 800437c:	47a0      	blx	r4
          while (l++ < width) {
 800437e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	647a      	str	r2, [r7, #68]	; 0x44
 8004384:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004386:	429a      	cmp	r2, r3
 8004388:	d8f1      	bhi.n	800436e <_vsnprintf+0x7d6>
          }
        }
        format++;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	60bb      	str	r3, [r7, #8]
        break;
 8004390:	e0ca      	b.n	8004528 <_vsnprintf+0x990>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 80043a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <_vsnprintf+0x812>
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	e001      	b.n	80043ae <_vsnprintf+0x816>
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	4619      	mov	r1, r3
 80043b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80043b2:	f7fe fcb2 	bl	8002d1a <_strnlen_s>
 80043b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <_vsnprintf+0x836>
          l = (l < precision ? l : precision);
 80043c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c6:	4293      	cmp	r3, r2
 80043c8:	bf28      	it	cs
 80043ca:	4613      	movcs	r3, r2
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80043ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11a      	bne.n	800440e <_vsnprintf+0x876>
          while (l++ < width) {
 80043d8:	e007      	b.n	80043ea <_vsnprintf+0x852>
            out(' ', buffer, idx++, maxlen);
 80043da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043dc:	1c53      	adds	r3, r2, #1
 80043de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e0:	697c      	ldr	r4, [r7, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6939      	ldr	r1, [r7, #16]
 80043e6:	2020      	movs	r0, #32
 80043e8:	47a0      	blx	r4
          while (l++ < width) {
 80043ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d8f1      	bhi.n	80043da <_vsnprintf+0x842>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80043f6:	e00a      	b.n	800440e <_vsnprintf+0x876>
          out(*(p++), buffer, idx++, maxlen);
 80043f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	643a      	str	r2, [r7, #64]	; 0x40
 80043fe:	7818      	ldrb	r0, [r3, #0]
 8004400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004402:	1c53      	adds	r3, r2, #1
 8004404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004406:	697c      	ldr	r4, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800440e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <_vsnprintf+0x892>
 8004416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0eb      	beq.n	80043f8 <_vsnprintf+0x860>
 8004420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	657a      	str	r2, [r7, #84]	; 0x54
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e6      	bne.n	80043f8 <_vsnprintf+0x860>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800442a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00e      	beq.n	8004452 <_vsnprintf+0x8ba>
          while (l++ < width) {
 8004434:	e007      	b.n	8004446 <_vsnprintf+0x8ae>
            out(' ', buffer, idx++, maxlen);
 8004436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004438:	1c53      	adds	r3, r2, #1
 800443a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800443c:	697c      	ldr	r4, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6939      	ldr	r1, [r7, #16]
 8004442:	2020      	movs	r0, #32
 8004444:	47a0      	blx	r4
          while (l++ < width) {
 8004446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800444c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800444e:	429a      	cmp	r2, r3
 8004450:	d8f1      	bhi.n	8004436 <_vsnprintf+0x89e>
          }
        }
        format++;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3301      	adds	r3, #1
 8004456:	60bb      	str	r3, [r7, #8]
        break;
 8004458:	e066      	b.n	8004528 <_vsnprintf+0x990>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800445a:	2308      	movs	r3, #8
 800445c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800445e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004460:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004464:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 800446c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004470:	2b00      	cmp	r3, #0
 8004472:	d023      	beq.n	80044bc <_vsnprintf+0x924>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004478:	1d1a      	adds	r2, r3, #4
 800447a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	2300      	movs	r3, #0
 8004484:	603a      	str	r2, [r7, #0]
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448a:	9308      	str	r3, [sp, #32]
 800448c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800448e:	9307      	str	r3, [sp, #28]
 8004490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	f04f 0210 	mov.w	r2, #16
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044a0:	2300      	movs	r3, #0
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044a8:	e9cd 3400 	strd	r3, r4, [sp]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b0:	6939      	ldr	r1, [r7, #16]
 80044b2:	6978      	ldr	r0, [r7, #20]
 80044b4:	f7fe fe19 	bl	80030ea <_ntoa_long_long>
 80044b8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80044ba:	e018      	b.n	80044ee <_vsnprintf+0x956>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 80044bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c0:	1d1a      	adds	r2, r3, #4
 80044c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	9303      	str	r3, [sp, #12]
 80044d6:	2310      	movs	r3, #16
 80044d8:	9302      	str	r3, [sp, #8]
 80044da:	2300      	movs	r3, #0
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	9200      	str	r2, [sp, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044e4:	6939      	ldr	r1, [r7, #16]
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7fe fd99 	bl	800301e <_ntoa_long>
 80044ec:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
        break;
 80044f4:	e018      	b.n	8004528 <_vsnprintf+0x990>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80044f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f8:	1c53      	adds	r3, r2, #1
 80044fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044fc:	697c      	ldr	r4, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6939      	ldr	r1, [r7, #16]
 8004502:	2025      	movs	r0, #37	; 0x25
 8004504:	47a0      	blx	r4
        format++;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
        break;
 800450c:	e00c      	b.n	8004528 <_vsnprintf+0x990>

      default :
        out(*format, buffer, idx++, maxlen);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	7818      	ldrb	r0, [r3, #0]
 8004512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004514:	1c53      	adds	r3, r2, #1
 8004516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004518:	697c      	ldr	r4, [r7, #20]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6939      	ldr	r1, [r7, #16]
 800451e:	47a0      	blx	r4
        format++;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	3301      	adds	r3, #1
 8004524:	60bb      	str	r3, [r7, #8]
        break;
 8004526:	bf00      	nop
  while (*format)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f47f ab45 	bne.w	8003bbc <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d302      	bcc.n	8004540 <_vsnprintf+0x9a8>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	e000      	b.n	8004542 <_vsnprintf+0x9aa>
 8004540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004542:	697c      	ldr	r4, [r7, #20]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6939      	ldr	r1, [r7, #16]
 8004548:	2000      	movs	r0, #0
 800454a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800454c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800454e:	4618      	mov	r0, r3
 8004550:	3764      	adds	r7, #100	; 0x64
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004558 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8004558:	b40c      	push	{r2, r3}
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af02      	add	r7, sp, #8
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 8004564:	f107 031c 	add.w	r3, r7, #28
 8004568:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4805      	ldr	r0, [pc, #20]	; (800458c <snprintf_+0x34>)
 8004576:	f7ff fb0f 	bl	8003b98 <_vsnprintf>
 800457a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800457c:	68fb      	ldr	r3, [r7, #12]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004588:	b002      	add	sp, #8
 800458a:	4770      	bx	lr
 800458c:	08002cd5 	.word	0x08002cd5

08004590 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8004594:	2201      	movs	r2, #1
 8004596:	2102      	movs	r1, #2
 8004598:	480a      	ldr	r0, [pc, #40]	; (80045c4 <ssd1306_Reset+0x34>)
 800459a:	f001 fb96 	bl	8005cca <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 800459e:	2200      	movs	r2, #0
 80045a0:	2101      	movs	r1, #1
 80045a2:	4808      	ldr	r0, [pc, #32]	; (80045c4 <ssd1306_Reset+0x34>)
 80045a4:	f001 fb91 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80045a8:	200a      	movs	r0, #10
 80045aa:	f000 faef 	bl	8004b8c <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80045ae:	2201      	movs	r2, #1
 80045b0:	2101      	movs	r1, #1
 80045b2:	4804      	ldr	r0, [pc, #16]	; (80045c4 <ssd1306_Reset+0x34>)
 80045b4:	f001 fb89 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80045b8:	200a      	movs	r0, #10
 80045ba:	f000 fae7 	bl	8004b8c <HAL_Delay>
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40010c00 	.word	0x40010c00

080045c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80045d2:	2200      	movs	r2, #0
 80045d4:	2102      	movs	r1, #2
 80045d6:	480c      	ldr	r0, [pc, #48]	; (8004608 <ssd1306_WriteCommand+0x40>)
 80045d8:	f001 fb77 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80045dc:	2200      	movs	r2, #0
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	480a      	ldr	r0, [pc, #40]	; (800460c <ssd1306_WriteCommand+0x44>)
 80045e2:	f001 fb72 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80045e6:	1df9      	adds	r1, r7, #7
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ec:	2201      	movs	r2, #1
 80045ee:	4808      	ldr	r0, [pc, #32]	; (8004610 <ssd1306_WriteCommand+0x48>)
 80045f0:	f002 f818 	bl	8006624 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80045f4:	2201      	movs	r2, #1
 80045f6:	2102      	movs	r1, #2
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <ssd1306_WriteCommand+0x40>)
 80045fa:	f001 fb66 	bl	8005cca <HAL_GPIO_WritePin>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40010c00 	.word	0x40010c00
 800460c:	40010800 	.word	0x40010800
 8004610:	20000098 	.word	0x20000098

08004614 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800461e:	2200      	movs	r2, #0
 8004620:	2102      	movs	r1, #2
 8004622:	480c      	ldr	r0, [pc, #48]	; (8004654 <ssd1306_WriteData+0x40>)
 8004624:	f001 fb51 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8004628:	2201      	movs	r2, #1
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	480a      	ldr	r0, [pc, #40]	; (8004658 <ssd1306_WriteData+0x44>)
 800462e:	f001 fb4c 	bl	8005cca <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	b29a      	uxth	r2, r3
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4807      	ldr	r0, [pc, #28]	; (800465c <ssd1306_WriteData+0x48>)
 800463e:	f001 fff1 	bl	8006624 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004642:	2201      	movs	r2, #1
 8004644:	2102      	movs	r1, #2
 8004646:	4803      	ldr	r0, [pc, #12]	; (8004654 <ssd1306_WriteData+0x40>)
 8004648:	f001 fb3f 	bl	8005cca <HAL_GPIO_WritePin>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40010c00 	.word	0x40010c00
 8004658:	40010800 	.word	0x40010800
 800465c:	20000098 	.word	0x20000098

08004660 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004664:	f7ff ff94 	bl	8004590 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004668:	2064      	movs	r0, #100	; 0x64
 800466a:	f000 fa8f 	bl	8004b8c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800466e:	2000      	movs	r0, #0
 8004670:	f000 f9e6 	bl	8004a40 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004674:	2020      	movs	r0, #32
 8004676:	f7ff ffa7 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800467a:	2000      	movs	r0, #0
 800467c:	f7ff ffa4 	bl	80045c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004680:	20b0      	movs	r0, #176	; 0xb0
 8004682:	f7ff ffa1 	bl	80045c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004686:	20c8      	movs	r0, #200	; 0xc8
 8004688:	f7ff ff9e 	bl	80045c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800468c:	2000      	movs	r0, #0
 800468e:	f7ff ff9b 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004692:	2010      	movs	r0, #16
 8004694:	f7ff ff98 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004698:	2040      	movs	r0, #64	; 0x40
 800469a:	f7ff ff95 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800469e:	20ff      	movs	r0, #255	; 0xff
 80046a0:	f000 f9ba 	bl	8004a18 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80046a4:	20a1      	movs	r0, #161	; 0xa1
 80046a6:	f7ff ff8f 	bl	80045c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80046aa:	20a6      	movs	r0, #166	; 0xa6
 80046ac:	f7ff ff8c 	bl	80045c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80046b0:	20a8      	movs	r0, #168	; 0xa8
 80046b2:	f7ff ff89 	bl	80045c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80046b6:	203f      	movs	r0, #63	; 0x3f
 80046b8:	f7ff ff86 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80046bc:	20a4      	movs	r0, #164	; 0xa4
 80046be:	f7ff ff83 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80046c2:	20d3      	movs	r0, #211	; 0xd3
 80046c4:	f7ff ff80 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80046c8:	2000      	movs	r0, #0
 80046ca:	f7ff ff7d 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80046ce:	20d5      	movs	r0, #213	; 0xd5
 80046d0:	f7ff ff7a 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80046d4:	20f0      	movs	r0, #240	; 0xf0
 80046d6:	f7ff ff77 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80046da:	20d9      	movs	r0, #217	; 0xd9
 80046dc:	f7ff ff74 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80046e0:	2022      	movs	r0, #34	; 0x22
 80046e2:	f7ff ff71 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80046e6:	20da      	movs	r0, #218	; 0xda
 80046e8:	f7ff ff6e 	bl	80045c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80046ec:	2012      	movs	r0, #18
 80046ee:	f7ff ff6b 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80046f2:	20db      	movs	r0, #219	; 0xdb
 80046f4:	f7ff ff68 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80046f8:	2020      	movs	r0, #32
 80046fa:	f7ff ff65 	bl	80045c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80046fe:	208d      	movs	r0, #141	; 0x8d
 8004700:	f7ff ff62 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004704:	2014      	movs	r0, #20
 8004706:	f7ff ff5f 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800470a:	2001      	movs	r0, #1
 800470c:	f000 f998 	bl	8004a40 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004710:	2000      	movs	r0, #0
 8004712:	f000 f80f 	bl	8004734 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004716:	f000 f82f 	bl	8004778 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <ssd1306_Init+0xd0>)
 800471c:	2200      	movs	r2, #0
 800471e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <ssd1306_Init+0xd0>)
 8004722:	2200      	movs	r2, #0
 8004724:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004726:	4b02      	ldr	r3, [pc, #8]	; (8004730 <ssd1306_Init+0xd0>)
 8004728:	2201      	movs	r2, #1
 800472a:	711a      	strb	r2, [r3, #4]
}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000780 	.word	0x20000780

08004734 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	4603      	mov	r3, r0
 800473c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e00d      	b.n	8004760 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004744:	79fb      	ldrb	r3, [r7, #7]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <ssd1306_Fill+0x1a>
 800474a:	2100      	movs	r1, #0
 800474c:	e000      	b.n	8004750 <ssd1306_Fill+0x1c>
 800474e:	21ff      	movs	r1, #255	; 0xff
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <ssd1306_Fill+0x40>)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	460a      	mov	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	3301      	adds	r3, #1
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004766:	d3ed      	bcc.n	8004744 <ssd1306_Fill+0x10>
    }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr
 8004774:	20000370 	.word	0x20000370

08004778 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800477e:	2300      	movs	r3, #0
 8004780:	71fb      	strb	r3, [r7, #7]
 8004782:	e01a      	b.n	80047ba <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	3b50      	subs	r3, #80	; 0x50
 8004788:	b2db      	uxtb	r3, r3
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff1c 	bl	80045c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004790:	2000      	movs	r0, #0
 8004792:	f7ff ff19 	bl	80045c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004796:	2010      	movs	r0, #16
 8004798:	f7ff ff16 	bl	80045c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800479c:	79fa      	ldrb	r2, [r7, #7]
 800479e:	4613      	mov	r3, r2
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	4413      	add	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b08      	ldr	r3, [pc, #32]	; (80047cc <ssd1306_UpdateScreen+0x54>)
 80047aa:	4413      	add	r3, r2
 80047ac:	2182      	movs	r1, #130	; 0x82
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff30 	bl	8004614 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	3301      	adds	r3, #1
 80047b8:	71fb      	strb	r3, [r7, #7]
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b07      	cmp	r3, #7
 80047be:	d9e1      	bls.n	8004784 <ssd1306_UpdateScreen+0xc>
    }
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000370 	.word	0x20000370

080047d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80047d0:	b490      	push	{r4, r7}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
 80047da:	460b      	mov	r3, r1
 80047dc:	71bb      	strb	r3, [r7, #6]
 80047de:	4613      	mov	r3, r2
 80047e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b81      	cmp	r3, #129	; 0x81
 80047e6:	d849      	bhi.n	800487c <ssd1306_DrawPixel+0xac>
 80047e8:	79bb      	ldrb	r3, [r7, #6]
 80047ea:	2b3f      	cmp	r3, #63	; 0x3f
 80047ec:	d846      	bhi.n	800487c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80047ee:	797b      	ldrb	r3, [r7, #5]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d120      	bne.n	8004836 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80047f4:	79fa      	ldrb	r2, [r7, #7]
 80047f6:	79bb      	ldrb	r3, [r7, #6]
 80047f8:	08db      	lsrs	r3, r3, #3
 80047fa:	b2d8      	uxtb	r0, r3
 80047fc:	4601      	mov	r1, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	440b      	add	r3, r1
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	4a1f      	ldr	r2, [pc, #124]	; (8004888 <ssd1306_DrawPixel+0xb8>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	b25a      	sxtb	r2, r3
 800480e:	79bb      	ldrb	r3, [r7, #6]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	b25b      	sxtb	r3, r3
 800481c:	4313      	orrs	r3, r2
 800481e:	b25c      	sxtb	r4, r3
 8004820:	79fa      	ldrb	r2, [r7, #7]
 8004822:	4601      	mov	r1, r0
 8004824:	460b      	mov	r3, r1
 8004826:	019b      	lsls	r3, r3, #6
 8004828:	440b      	add	r3, r1
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	b2e1      	uxtb	r1, r4
 8004830:	4a15      	ldr	r2, [pc, #84]	; (8004888 <ssd1306_DrawPixel+0xb8>)
 8004832:	54d1      	strb	r1, [r2, r3]
 8004834:	e023      	b.n	800487e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004836:	79fa      	ldrb	r2, [r7, #7]
 8004838:	79bb      	ldrb	r3, [r7, #6]
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	b2d8      	uxtb	r0, r3
 800483e:	4601      	mov	r1, r0
 8004840:	460b      	mov	r3, r1
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	440b      	add	r3, r1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <ssd1306_DrawPixel+0xb8>)
 800484c:	5cd3      	ldrb	r3, [r2, r3]
 800484e:	b25a      	sxtb	r2, r3
 8004850:	79bb      	ldrb	r3, [r7, #6]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2101      	movs	r1, #1
 8004858:	fa01 f303 	lsl.w	r3, r1, r3
 800485c:	b25b      	sxtb	r3, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	b25b      	sxtb	r3, r3
 8004862:	4013      	ands	r3, r2
 8004864:	b25c      	sxtb	r4, r3
 8004866:	79fa      	ldrb	r2, [r7, #7]
 8004868:	4601      	mov	r1, r0
 800486a:	460b      	mov	r3, r1
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	440b      	add	r3, r1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	b2e1      	uxtb	r1, r4
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <ssd1306_DrawPixel+0xb8>)
 8004878:	54d1      	strb	r1, [r2, r3]
 800487a:	e000      	b.n	800487e <ssd1306_DrawPixel+0xae>
        return;
 800487c:	bf00      	nop
    }
}
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bc90      	pop	{r4, r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000370 	.word	0x20000370

0800488c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
 8004892:	4604      	mov	r4, r0
 8004894:	1d38      	adds	r0, r7, #4
 8004896:	e880 0006 	stmia.w	r0, {r1, r2}
 800489a:	461a      	mov	r2, r3
 800489c:	4623      	mov	r3, r4
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	4613      	mov	r3, r2
 80048a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b1f      	cmp	r3, #31
 80048a8:	d902      	bls.n	80048b0 <ssd1306_WriteChar+0x24>
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b7e      	cmp	r3, #126	; 0x7e
 80048ae:	d901      	bls.n	80048b4 <ssd1306_WriteChar+0x28>
        return 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e06d      	b.n	8004990 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80048b4:	4b38      	ldr	r3, [pc, #224]	; (8004998 <ssd1306_WriteChar+0x10c>)
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	793b      	ldrb	r3, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	2b82      	cmp	r3, #130	; 0x82
 80048c0:	dc06      	bgt.n	80048d0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80048c2:	4b35      	ldr	r3, [pc, #212]	; (8004998 <ssd1306_WriteChar+0x10c>)
 80048c4:	885b      	ldrh	r3, [r3, #2]
 80048c6:	461a      	mov	r2, r3
 80048c8:	797b      	ldrb	r3, [r7, #5]
 80048ca:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	dd01      	ble.n	80048d4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e05d      	b.n	8004990 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e04c      	b.n	8004974 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	3b20      	subs	r3, #32
 80048e0:	7979      	ldrb	r1, [r7, #5]
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	440b      	add	r3, r1
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e034      	b.n	8004964 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d012      	beq.n	8004930 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800490a:	4b23      	ldr	r3, [pc, #140]	; (8004998 <ssd1306_WriteChar+0x10c>)
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4413      	add	r3, r2
 8004916:	b2d8      	uxtb	r0, r3
 8004918:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <ssd1306_WriteChar+0x10c>)
 800491a:	885b      	ldrh	r3, [r3, #2]
 800491c:	b2da      	uxtb	r2, r3
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	b2db      	uxtb	r3, r3
 8004922:	4413      	add	r3, r2
 8004924:	b2db      	uxtb	r3, r3
 8004926:	7bba      	ldrb	r2, [r7, #14]
 8004928:	4619      	mov	r1, r3
 800492a:	f7ff ff51 	bl	80047d0 <ssd1306_DrawPixel>
 800492e:	e016      	b.n	800495e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <ssd1306_WriteChar+0x10c>)
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4413      	add	r3, r2
 800493c:	b2d8      	uxtb	r0, r3
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <ssd1306_WriteChar+0x10c>)
 8004940:	885b      	ldrh	r3, [r3, #2]
 8004942:	b2da      	uxtb	r2, r3
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	4413      	add	r3, r2
 800494a:	b2d9      	uxtb	r1, r3
 800494c:	7bbb      	ldrb	r3, [r7, #14]
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	f7ff ff39 	bl	80047d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	3301      	adds	r3, #1
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	793b      	ldrb	r3, [r7, #4]
 8004966:	461a      	mov	r2, r3
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	4293      	cmp	r3, r2
 800496c:	d3c5      	bcc.n	80048fa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3301      	adds	r3, #1
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	797b      	ldrb	r3, [r7, #5]
 8004976:	461a      	mov	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4293      	cmp	r3, r2
 800497c:	d3ad      	bcc.n	80048da <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <ssd1306_WriteChar+0x10c>)
 8004980:	881a      	ldrh	r2, [r3, #0]
 8004982:	793b      	ldrb	r3, [r7, #4]
 8004984:	b29b      	uxth	r3, r3
 8004986:	4413      	add	r3, r2
 8004988:	b29a      	uxth	r2, r3
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <ssd1306_WriteChar+0x10c>)
 800498c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3724      	adds	r7, #36	; 0x24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}
 8004998:	20000780 	.word	0x20000780

0800499c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	1d38      	adds	r0, r7, #4
 80049a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80049aa:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80049ac:	e012      	b.n	80049d4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	7818      	ldrb	r0, [r3, #0]
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	1d3a      	adds	r2, r7, #4
 80049b6:	ca06      	ldmia	r2, {r1, r2}
 80049b8:	f7ff ff68 	bl	800488c <ssd1306_WriteChar>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d002      	beq.n	80049ce <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	e008      	b.n	80049e0 <ssd1306_WriteString+0x44>
        }
        str++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e8      	bne.n	80049ae <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	781b      	ldrb	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	460a      	mov	r2, r1
 80049f2:	71fb      	strb	r3, [r7, #7]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <ssd1306_SetCursor+0x2c>)
 80049fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004a00:	79bb      	ldrb	r3, [r7, #6]
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <ssd1306_SetCursor+0x2c>)
 8004a06:	805a      	strh	r2, [r3, #2]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000780 	.word	0x20000780

08004a18 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004a22:	2381      	movs	r3, #129	; 0x81
 8004a24:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fdcd 	bl	80045c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fdc9 	bl	80045c8 <ssd1306_WriteCommand>
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004a50:	23af      	movs	r3, #175	; 0xaf
 8004a52:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <ssd1306_SetDisplayOn+0x38>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	715a      	strb	r2, [r3, #5]
 8004a5a:	e004      	b.n	8004a66 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004a5c:	23ae      	movs	r3, #174	; 0xae
 8004a5e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <ssd1306_SetDisplayOn+0x38>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fdad 	bl	80045c8 <ssd1306_WriteCommand>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000780 	.word	0x20000780

08004a7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a7c:	f7fe f924 	bl	8002cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a80:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004a82:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004a84:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a88:	e002      	b.n	8004a90 <LoopCopyDataInit>

08004a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a8e:	3304      	adds	r3, #4

08004a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a94:	d3f9      	bcc.n	8004a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a96:	4a09      	ldr	r2, [pc, #36]	; (8004abc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004a98:	4c09      	ldr	r4, [pc, #36]	; (8004ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a9c:	e001      	b.n	8004aa2 <LoopFillZerobss>

08004a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa0:	3204      	adds	r2, #4

08004aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aa4:	d3fb      	bcc.n	8004a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aa6:	f003 f9f9 	bl	8007e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004aaa:	f7fd fcb1 	bl	8002410 <main>
  bx lr
 8004aae:	4770      	bx	lr
  ldr r0, =_sdata
 8004ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ab4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8004ab8:	0800c078 	.word	0x0800c078
  ldr r2, =_sbss
 8004abc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8004ac0:	2000078c 	.word	0x2000078c

08004ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ac4:	e7fe      	b.n	8004ac4 <ADC1_2_IRQHandler>
	...

08004ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004acc:	4b08      	ldr	r3, [pc, #32]	; (8004af0 <HAL_Init+0x28>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a07      	ldr	r2, [pc, #28]	; (8004af0 <HAL_Init+0x28>)
 8004ad2:	f043 0310 	orr.w	r3, r3, #16
 8004ad6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ad8:	2003      	movs	r0, #3
 8004ada:	f000 fc77 	bl	80053cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ade:	200f      	movs	r0, #15
 8004ae0:	f000 f808 	bl	8004af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ae4:	f7fd ff28 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40022000 	.word	0x40022000

08004af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004afc:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_InitTick+0x54>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_InitTick+0x58>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fc8f 	bl	8005436 <HAL_SYSTICK_Config>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00e      	b.n	8004b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d80a      	bhi.n	8004b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	f000 fc57 	bl	80053e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b34:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <HAL_InitTick+0x5c>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000020 	.word	0x20000020
 8004b4c:	20000050 	.word	0x20000050
 8004b50:	2000004c 	.word	0x2000004c

08004b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_IncTick+0x1c>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_IncTick+0x20>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4413      	add	r3, r2
 8004b64:	4a03      	ldr	r2, [pc, #12]	; (8004b74 <HAL_IncTick+0x20>)
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	20000050 	.word	0x20000050
 8004b74:	20000788 	.word	0x20000788

08004b78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <HAL_GetTick+0x10>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	20000788 	.word	0x20000788

08004b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d005      	beq.n	8004bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ba6:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_Delay+0x44>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bb2:	bf00      	nop
 8004bb4:	f7ff ffe0 	bl	8004b78 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d8f7      	bhi.n	8004bb4 <HAL_Delay+0x28>
  {
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	bf00      	nop
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000050 	.word	0x20000050

08004bd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0ed      	b.n	8004dc2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fd fed2 	bl	800299c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c08:	f7ff ffb6 	bl	8004b78 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c0e:	e012      	b.n	8004c36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c10:	f7ff ffb2 	bl	8004b78 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b0a      	cmp	r3, #10
 8004c1c:	d90b      	bls.n	8004c36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2205      	movs	r2, #5
 8004c2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e0c5      	b.n	8004dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0e5      	beq.n	8004c10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0202 	bic.w	r2, r2, #2
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c54:	f7ff ff90 	bl	8004b78 <HAL_GetTick>
 8004c58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c5a:	e012      	b.n	8004c82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c5c:	f7ff ff8c 	bl	8004b78 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b0a      	cmp	r3, #10
 8004c68:	d90b      	bls.n	8004c82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2205      	movs	r2, #5
 8004c7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e09f      	b.n	8004dc2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1e5      	bne.n	8004c5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	7e1b      	ldrb	r3, [r3, #24]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d108      	bne.n	8004caa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e007      	b.n	8004cba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	7e5b      	ldrb	r3, [r3, #25]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d108      	bne.n	8004cd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e007      	b.n	8004ce4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7e9b      	ldrb	r3, [r3, #26]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d108      	bne.n	8004cfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0220 	orr.w	r2, r2, #32
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e007      	b.n	8004d0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0220 	bic.w	r2, r2, #32
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	7edb      	ldrb	r3, [r3, #27]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d108      	bne.n	8004d28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0210 	bic.w	r2, r2, #16
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e007      	b.n	8004d38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0210 	orr.w	r2, r2, #16
 8004d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	7f1b      	ldrb	r3, [r3, #28]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d108      	bne.n	8004d52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0208 	orr.w	r2, r2, #8
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e007      	b.n	8004d62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0208 	bic.w	r2, r2, #8
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	7f5b      	ldrb	r3, [r3, #29]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d108      	bne.n	8004d7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0204 	orr.w	r2, r2, #4
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e007      	b.n	8004d8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	ea42 0103 	orr.w	r1, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	1e5a      	subs	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b087      	sub	sp, #28
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d003      	beq.n	8004df0 <HAL_CAN_ConfigFilter+0x26>
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	f040 80aa 	bne.w	8004f44 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2201      	movs	r2, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d123      	bne.n	8004e72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	43db      	mvns	r3, r3
 8004e34:	401a      	ands	r2, r3
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004e4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	3248      	adds	r2, #72	; 0x48
 8004e52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004e66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004e68:	6979      	ldr	r1, [r7, #20]
 8004e6a:	3348      	adds	r3, #72	; 0x48
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d122      	bne.n	8004ec0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004e9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3248      	adds	r2, #72	; 0x48
 8004ea0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004eb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004eb6:	6979      	ldr	r1, [r7, #20]
 8004eb8:	3348      	adds	r3, #72	; 0x48
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004eda:	e007      	b.n	8004eec <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	401a      	ands	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004f06:	e007      	b.n	8004f18 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e006      	b.n	8004f52 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
  }
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d12e      	bne.n	8004fce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0201 	bic.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f88:	f7ff fdf6 	bl	8004b78 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004f8e:	e012      	b.n	8004fb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004f90:	f7ff fdf2 	bl	8004b78 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b0a      	cmp	r3, #10
 8004f9c:	d90b      	bls.n	8004fb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2205      	movs	r2, #5
 8004fae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e012      	b.n	8004fdc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e006      	b.n	8004fdc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
  }
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005002:	7ffb      	ldrb	r3, [r7, #31]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d003      	beq.n	8005010 <HAL_CAN_AddTxMessage+0x2c>
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b02      	cmp	r3, #2
 800500c:	f040 80ad 	bne.w	800516a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10a      	bne.n	8005030 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8095 	beq.w	800515a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	0e1b      	lsrs	r3, r3, #24
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800503a:	2201      	movs	r2, #1
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	409a      	lsls	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10d      	bne.n	8005068 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	6809      	ldr	r1, [r1, #0]
 800505a:	431a      	orrs	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3318      	adds	r3, #24
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	440b      	add	r3, r1
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e00f      	b.n	8005088 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005072:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005078:	68f9      	ldr	r1, [r7, #12]
 800507a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800507c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	3318      	adds	r3, #24
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	440b      	add	r3, r1
 8005086:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3318      	adds	r3, #24
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	440b      	add	r3, r1
 8005098:	3304      	adds	r3, #4
 800509a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	7d1b      	ldrb	r3, [r3, #20]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d111      	bne.n	80050c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3318      	adds	r3, #24
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4413      	add	r3, r2
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	6811      	ldr	r1, [r2, #0]
 80050b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3318      	adds	r3, #24
 80050c0:	011b      	lsls	r3, r3, #4
 80050c2:	440b      	add	r3, r1
 80050c4:	3304      	adds	r3, #4
 80050c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3307      	adds	r3, #7
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	061a      	lsls	r2, r3, #24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3306      	adds	r3, #6
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	041b      	lsls	r3, r3, #16
 80050d8:	431a      	orrs	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3305      	adds	r3, #5
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	4313      	orrs	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	3204      	adds	r2, #4
 80050e8:	7812      	ldrb	r2, [r2, #0]
 80050ea:	4610      	mov	r0, r2
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	ea43 0200 	orr.w	r2, r3, r0
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	440b      	add	r3, r1
 80050fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80050fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3303      	adds	r3, #3
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	061a      	lsls	r2, r3, #24
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3302      	adds	r3, #2
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3301      	adds	r3, #1
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	4313      	orrs	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	7812      	ldrb	r2, [r2, #0]
 8005120:	4610      	mov	r0, r2
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	ea43 0200 	orr.w	r2, r3, r0
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	440b      	add	r3, r1
 8005130:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005134:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	3318      	adds	r3, #24
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	4413      	add	r3, r2
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	6811      	ldr	r1, [r2, #0]
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	3318      	adds	r3, #24
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	440b      	add	r3, r1
 8005154:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005156:	2300      	movs	r3, #0
 8005158:	e00e      	b.n	8005178 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e006      	b.n	8005178 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3724      	adds	r7, #36	; 0x24
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005194:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8005196:	7afb      	ldrb	r3, [r7, #11]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d002      	beq.n	80051a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800519c:	7afb      	ldrb	r3, [r7, #11]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d11d      	bne.n	80051de <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d002      	beq.n	8005208 <HAL_CAN_ActivateNotification+0x1e>
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d109      	bne.n	800521c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6959      	ldr	r1, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e006      	b.n	800522a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
  }
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005244:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <__NVIC_SetPriorityGrouping+0x44>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005250:	4013      	ands	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800525c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005266:	4a04      	ldr	r2, [pc, #16]	; (8005278 <__NVIC_SetPriorityGrouping+0x44>)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	60d3      	str	r3, [r2, #12]
}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <__NVIC_GetPriorityGrouping+0x18>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	0a1b      	lsrs	r3, r3, #8
 8005286:	f003 0307 	and.w	r3, r3, #7
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	db0b      	blt.n	80052c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	4906      	ldr	r1, [pc, #24]	; (80052cc <__NVIC_EnableIRQ+0x34>)
 80052b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2001      	movs	r0, #1
 80052ba:	fa00 f202 	lsl.w	r2, r0, r2
 80052be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc80      	pop	{r7}
 80052ca:	4770      	bx	lr
 80052cc:	e000e100 	.word	0xe000e100

080052d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	6039      	str	r1, [r7, #0]
 80052da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	db0a      	blt.n	80052fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	490c      	ldr	r1, [pc, #48]	; (800531c <__NVIC_SetPriority+0x4c>)
 80052ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ee:	0112      	lsls	r2, r2, #4
 80052f0:	b2d2      	uxtb	r2, r2
 80052f2:	440b      	add	r3, r1
 80052f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052f8:	e00a      	b.n	8005310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4908      	ldr	r1, [pc, #32]	; (8005320 <__NVIC_SetPriority+0x50>)
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	3b04      	subs	r3, #4
 8005308:	0112      	lsls	r2, r2, #4
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	440b      	add	r3, r1
 800530e:	761a      	strb	r2, [r3, #24]
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e100 	.word	0xe000e100
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	; 0x24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f1c3 0307 	rsb	r3, r3, #7
 800533e:	2b04      	cmp	r3, #4
 8005340:	bf28      	it	cs
 8005342:	2304      	movcs	r3, #4
 8005344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3304      	adds	r3, #4
 800534a:	2b06      	cmp	r3, #6
 800534c:	d902      	bls.n	8005354 <NVIC_EncodePriority+0x30>
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3b03      	subs	r3, #3
 8005352:	e000      	b.n	8005356 <NVIC_EncodePriority+0x32>
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	f04f 32ff 	mov.w	r2, #4294967295
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43da      	mvns	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	401a      	ands	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800536c:	f04f 31ff 	mov.w	r1, #4294967295
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	fa01 f303 	lsl.w	r3, r1, r3
 8005376:	43d9      	mvns	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800537c:	4313      	orrs	r3, r2
         );
}
 800537e:	4618      	mov	r0, r3
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3b01      	subs	r3, #1
 8005394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005398:	d301      	bcc.n	800539e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800539a:	2301      	movs	r3, #1
 800539c:	e00f      	b.n	80053be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <SysTick_Config+0x40>)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053a6:	210f      	movs	r1, #15
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	f7ff ff90 	bl	80052d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <SysTick_Config+0x40>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053b6:	4b04      	ldr	r3, [pc, #16]	; (80053c8 <SysTick_Config+0x40>)
 80053b8:	2207      	movs	r2, #7
 80053ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	e000e010 	.word	0xe000e010

080053cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff ff2d 	bl	8005234 <__NVIC_SetPriorityGrouping>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	4603      	mov	r3, r0
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053f4:	f7ff ff42 	bl	800527c <__NVIC_GetPriorityGrouping>
 80053f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	6978      	ldr	r0, [r7, #20]
 8005400:	f7ff ff90 	bl	8005324 <NVIC_EncodePriority>
 8005404:	4602      	mov	r2, r0
 8005406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ff5f 	bl	80052d0 <__NVIC_SetPriority>
}
 8005412:	bf00      	nop
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	4603      	mov	r3, r0
 8005422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff ff35 	bl	8005298 <__NVIC_EnableIRQ>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b082      	sub	sp, #8
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff ffa2 	bl	8005388 <SysTick_Config>
 8005444:	4603      	mov	r3, r0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e043      	b.n	80054ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	4b22      	ldr	r3, [pc, #136]	; (80054f8 <HAL_DMA_Init+0xa8>)
 800546e:	4413      	add	r3, r2
 8005470:	4a22      	ldr	r2, [pc, #136]	; (80054fc <HAL_DMA_Init+0xac>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	009a      	lsls	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_DMA_Init+0xb0>)
 8005482:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800549a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800549e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80054a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	bffdfff8 	.word	0xbffdfff8
 80054fc:	cccccccd 	.word	0xcccccccd
 8005500:	40020000 	.word	0x40020000

08005504 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_DMA_Start_IT+0x20>
 8005520:	2302      	movs	r3, #2
 8005522:	e04b      	b.n	80055bc <HAL_DMA_Start_IT+0xb8>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d13a      	bne.n	80055ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 f9eb 	bl	8005938 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 020e 	orr.w	r2, r2, #14
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e00f      	b.n	800559c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 020a 	orr.w	r2, r2, #10
 800559a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e005      	b.n	80055ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
 80055b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d008      	beq.n	80055ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2204      	movs	r2, #4
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e020      	b.n	8005630 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 020e 	bic.w	r2, r2, #14
 80055fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2101      	movs	r1, #1
 8005618:	fa01 f202 	lsl.w	r2, r1, r2
 800561c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
	...

0800563c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d005      	beq.n	8005660 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2204      	movs	r2, #4
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	e051      	b.n	8005704 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 020e 	bic.w	r2, r2, #14
 800566e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <HAL_DMA_Abort_IT+0xd4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d029      	beq.n	80056de <HAL_DMA_Abort_IT+0xa2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a21      	ldr	r2, [pc, #132]	; (8005714 <HAL_DMA_Abort_IT+0xd8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMA_Abort_IT+0x9e>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <HAL_DMA_Abort_IT+0xdc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01a      	beq.n	80056d4 <HAL_DMA_Abort_IT+0x98>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	; (800571c <HAL_DMA_Abort_IT+0xe0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d012      	beq.n	80056ce <HAL_DMA_Abort_IT+0x92>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_DMA_Abort_IT+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00a      	beq.n	80056c8 <HAL_DMA_Abort_IT+0x8c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_DMA_Abort_IT+0xe8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d102      	bne.n	80056c2 <HAL_DMA_Abort_IT+0x86>
 80056bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056c0:	e00e      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056c6:	e00b      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056cc:	e008      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056d2:	e005      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056d8:	e002      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056da:	2310      	movs	r3, #16
 80056dc:	e000      	b.n	80056e0 <HAL_DMA_Abort_IT+0xa4>
 80056de:	2301      	movs	r3, #1
 80056e0:	4a11      	ldr	r2, [pc, #68]	; (8005728 <HAL_DMA_Abort_IT+0xec>)
 80056e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
    } 
  }
  return status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40020008 	.word	0x40020008
 8005714:	4002001c 	.word	0x4002001c
 8005718:	40020030 	.word	0x40020030
 800571c:	40020044 	.word	0x40020044
 8005720:	40020058 	.word	0x40020058
 8005724:	4002006c 	.word	0x4002006c
 8005728:	40020000 	.word	0x40020000

0800572c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2204      	movs	r2, #4
 800574a:	409a      	lsls	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d04f      	beq.n	80057f4 <HAL_DMA_IRQHandler+0xc8>
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0304 	and.w	r3, r3, #4
 800575a:	2b00      	cmp	r3, #0
 800575c:	d04a      	beq.n	80057f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d107      	bne.n	800577c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0204 	bic.w	r2, r2, #4
 800577a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a66      	ldr	r2, [pc, #408]	; (800591c <HAL_DMA_IRQHandler+0x1f0>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d029      	beq.n	80057da <HAL_DMA_IRQHandler+0xae>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a65      	ldr	r2, [pc, #404]	; (8005920 <HAL_DMA_IRQHandler+0x1f4>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d022      	beq.n	80057d6 <HAL_DMA_IRQHandler+0xaa>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a63      	ldr	r2, [pc, #396]	; (8005924 <HAL_DMA_IRQHandler+0x1f8>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01a      	beq.n	80057d0 <HAL_DMA_IRQHandler+0xa4>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a62      	ldr	r2, [pc, #392]	; (8005928 <HAL_DMA_IRQHandler+0x1fc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d012      	beq.n	80057ca <HAL_DMA_IRQHandler+0x9e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a60      	ldr	r2, [pc, #384]	; (800592c <HAL_DMA_IRQHandler+0x200>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00a      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x98>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5f      	ldr	r2, [pc, #380]	; (8005930 <HAL_DMA_IRQHandler+0x204>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d102      	bne.n	80057be <HAL_DMA_IRQHandler+0x92>
 80057b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80057bc:	e00e      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80057c2:	e00b      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057c8:	e008      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057ce:	e005      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d4:	e002      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	e000      	b.n	80057dc <HAL_DMA_IRQHandler+0xb0>
 80057da:	2304      	movs	r3, #4
 80057dc:	4a55      	ldr	r2, [pc, #340]	; (8005934 <HAL_DMA_IRQHandler+0x208>)
 80057de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8094 	beq.w	8005912 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80057f2:	e08e      	b.n	8005912 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	2202      	movs	r2, #2
 80057fa:	409a      	lsls	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d056      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x186>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d051      	beq.n	80058b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 020a 	bic.w	r2, r2, #10
 800582a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_DMA_IRQHandler+0x1f0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d029      	beq.n	8005892 <HAL_DMA_IRQHandler+0x166>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a37      	ldr	r2, [pc, #220]	; (8005920 <HAL_DMA_IRQHandler+0x1f4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_IRQHandler+0x162>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a35      	ldr	r2, [pc, #212]	; (8005924 <HAL_DMA_IRQHandler+0x1f8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01a      	beq.n	8005888 <HAL_DMA_IRQHandler+0x15c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a34      	ldr	r2, [pc, #208]	; (8005928 <HAL_DMA_IRQHandler+0x1fc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d012      	beq.n	8005882 <HAL_DMA_IRQHandler+0x156>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a32      	ldr	r2, [pc, #200]	; (800592c <HAL_DMA_IRQHandler+0x200>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00a      	beq.n	800587c <HAL_DMA_IRQHandler+0x150>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a31      	ldr	r2, [pc, #196]	; (8005930 <HAL_DMA_IRQHandler+0x204>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d102      	bne.n	8005876 <HAL_DMA_IRQHandler+0x14a>
 8005870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005874:	e00e      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 8005876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587a:	e00b      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 800587c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005880:	e008      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 8005882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005886:	e005      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 8005888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800588c:	e002      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 800588e:	2320      	movs	r3, #32
 8005890:	e000      	b.n	8005894 <HAL_DMA_IRQHandler+0x168>
 8005892:	2302      	movs	r3, #2
 8005894:	4a27      	ldr	r2, [pc, #156]	; (8005934 <HAL_DMA_IRQHandler+0x208>)
 8005896:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d034      	beq.n	8005912 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80058b0:	e02f      	b.n	8005912 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2208      	movs	r2, #8
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4013      	ands	r3, r2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d028      	beq.n	8005914 <HAL_DMA_IRQHandler+0x1e8>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d023      	beq.n	8005914 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 020e 	bic.w	r2, r2, #14
 80058da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f202 	lsl.w	r2, r1, r2
 80058ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
    }
  }
  return;
 8005912:	bf00      	nop
 8005914:	bf00      	nop
}
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40020008 	.word	0x40020008
 8005920:	4002001c 	.word	0x4002001c
 8005924:	40020030 	.word	0x40020030
 8005928:	40020044 	.word	0x40020044
 800592c:	40020058 	.word	0x40020058
 8005930:	4002006c 	.word	0x4002006c
 8005934:	40020000 	.word	0x40020000

08005938 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	2101      	movs	r1, #1
 8005950:	fa01 f202 	lsl.w	r2, r1, r2
 8005954:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b10      	cmp	r3, #16
 8005964:	d108      	bne.n	8005978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005976:	e007      	b.n	8005988 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	60da      	str	r2, [r3, #12]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
	...

08005994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005994:	b480      	push	{r7}
 8005996:	b08b      	sub	sp, #44	; 0x2c
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059a2:	2300      	movs	r3, #0
 80059a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059a6:	e169      	b.n	8005c7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80059a8:	2201      	movs	r2, #1
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	f040 8158 	bne.w	8005c76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4a9a      	ldr	r2, [pc, #616]	; (8005c34 <HAL_GPIO_Init+0x2a0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d05e      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
 80059d0:	4a98      	ldr	r2, [pc, #608]	; (8005c34 <HAL_GPIO_Init+0x2a0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d875      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 80059d6:	4a98      	ldr	r2, [pc, #608]	; (8005c38 <HAL_GPIO_Init+0x2a4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d058      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
 80059dc:	4a96      	ldr	r2, [pc, #600]	; (8005c38 <HAL_GPIO_Init+0x2a4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d86f      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 80059e2:	4a96      	ldr	r2, [pc, #600]	; (8005c3c <HAL_GPIO_Init+0x2a8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d052      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
 80059e8:	4a94      	ldr	r2, [pc, #592]	; (8005c3c <HAL_GPIO_Init+0x2a8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d869      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 80059ee:	4a94      	ldr	r2, [pc, #592]	; (8005c40 <HAL_GPIO_Init+0x2ac>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04c      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
 80059f4:	4a92      	ldr	r2, [pc, #584]	; (8005c40 <HAL_GPIO_Init+0x2ac>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d863      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 80059fa:	4a92      	ldr	r2, [pc, #584]	; (8005c44 <HAL_GPIO_Init+0x2b0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d046      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
 8005a00:	4a90      	ldr	r2, [pc, #576]	; (8005c44 <HAL_GPIO_Init+0x2b0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d85d      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 8005a06:	2b12      	cmp	r3, #18
 8005a08:	d82a      	bhi.n	8005a60 <HAL_GPIO_Init+0xcc>
 8005a0a:	2b12      	cmp	r3, #18
 8005a0c:	d859      	bhi.n	8005ac2 <HAL_GPIO_Init+0x12e>
 8005a0e:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <HAL_GPIO_Init+0x80>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a8f 	.word	0x08005a8f
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a7b 	.word	0x08005a7b
 8005a20:	08005abd 	.word	0x08005abd
 8005a24:	08005ac3 	.word	0x08005ac3
 8005a28:	08005ac3 	.word	0x08005ac3
 8005a2c:	08005ac3 	.word	0x08005ac3
 8005a30:	08005ac3 	.word	0x08005ac3
 8005a34:	08005ac3 	.word	0x08005ac3
 8005a38:	08005ac3 	.word	0x08005ac3
 8005a3c:	08005ac3 	.word	0x08005ac3
 8005a40:	08005ac3 	.word	0x08005ac3
 8005a44:	08005ac3 	.word	0x08005ac3
 8005a48:	08005ac3 	.word	0x08005ac3
 8005a4c:	08005ac3 	.word	0x08005ac3
 8005a50:	08005ac3 	.word	0x08005ac3
 8005a54:	08005ac3 	.word	0x08005ac3
 8005a58:	08005a71 	.word	0x08005a71
 8005a5c:	08005a85 	.word	0x08005a85
 8005a60:	4a79      	ldr	r2, [pc, #484]	; (8005c48 <HAL_GPIO_Init+0x2b4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a66:	e02c      	b.n	8005ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	623b      	str	r3, [r7, #32]
          break;
 8005a6e:	e029      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	3304      	adds	r3, #4
 8005a76:	623b      	str	r3, [r7, #32]
          break;
 8005a78:	e024      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	3308      	adds	r3, #8
 8005a80:	623b      	str	r3, [r7, #32]
          break;
 8005a82:	e01f      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	623b      	str	r3, [r7, #32]
          break;
 8005a8c:	e01a      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d102      	bne.n	8005a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a96:	2304      	movs	r3, #4
 8005a98:	623b      	str	r3, [r7, #32]
          break;
 8005a9a:	e013      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d105      	bne.n	8005ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aa4:	2308      	movs	r3, #8
 8005aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	611a      	str	r2, [r3, #16]
          break;
 8005aae:	e009      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	615a      	str	r2, [r3, #20]
          break;
 8005aba:	e003      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005abc:	2300      	movs	r3, #0
 8005abe:	623b      	str	r3, [r7, #32]
          break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_GPIO_Init+0x130>
          break;
 8005ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	d801      	bhi.n	8005ace <HAL_GPIO_Init+0x13a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	e001      	b.n	8005ad2 <HAL_GPIO_Init+0x13e>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2bff      	cmp	r3, #255	; 0xff
 8005ad8:	d802      	bhi.n	8005ae0 <HAL_GPIO_Init+0x14c>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	e002      	b.n	8005ae6 <HAL_GPIO_Init+0x152>
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	3b08      	subs	r3, #8
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	210f      	movs	r1, #15
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	fa01 f303 	lsl.w	r3, r1, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	6a39      	ldr	r1, [r7, #32]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	431a      	orrs	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80b1 	beq.w	8005c76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b14:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <HAL_GPIO_Init+0x2b8>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	4a4c      	ldr	r2, [pc, #304]	; (8005c4c <HAL_GPIO_Init+0x2b8>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	6193      	str	r3, [r2, #24]
 8005b20:	4b4a      	ldr	r3, [pc, #296]	; (8005c4c <HAL_GPIO_Init+0x2b8>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b2c:	4a48      	ldr	r2, [pc, #288]	; (8005c50 <HAL_GPIO_Init+0x2bc>)
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	3302      	adds	r3, #2
 8005b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	220f      	movs	r2, #15
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <HAL_GPIO_Init+0x2c0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_GPIO_Init+0x1ec>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <HAL_GPIO_Init+0x2c4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00d      	beq.n	8005b7c <HAL_GPIO_Init+0x1e8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a3e      	ldr	r2, [pc, #248]	; (8005c5c <HAL_GPIO_Init+0x2c8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <HAL_GPIO_Init+0x1e4>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a3d      	ldr	r2, [pc, #244]	; (8005c60 <HAL_GPIO_Init+0x2cc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <HAL_GPIO_Init+0x1e0>
 8005b70:	2303      	movs	r3, #3
 8005b72:	e006      	b.n	8005b82 <HAL_GPIO_Init+0x1ee>
 8005b74:	2304      	movs	r3, #4
 8005b76:	e004      	b.n	8005b82 <HAL_GPIO_Init+0x1ee>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	e002      	b.n	8005b82 <HAL_GPIO_Init+0x1ee>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_GPIO_Init+0x1ee>
 8005b80:	2300      	movs	r3, #0
 8005b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b84:	f002 0203 	and.w	r2, r2, #3
 8005b88:	0092      	lsls	r2, r2, #2
 8005b8a:	4093      	lsls	r3, r2
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b92:	492f      	ldr	r1, [pc, #188]	; (8005c50 <HAL_GPIO_Init+0x2bc>)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	3302      	adds	r3, #2
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bac:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	492c      	ldr	r1, [pc, #176]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	608b      	str	r3, [r1, #8]
 8005bb8:	e006      	b.n	8005bc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005bba:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	4928      	ldr	r1, [pc, #160]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d006      	beq.n	8005be2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005bd4:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4922      	ldr	r1, [pc, #136]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60cb      	str	r3, [r1, #12]
 8005be0:	e006      	b.n	8005bf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005be2:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	491e      	ldr	r1, [pc, #120]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4918      	ldr	r1, [pc, #96]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
 8005c08:	e006      	b.n	8005c18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c0a:	4b16      	ldr	r3, [pc, #88]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	4914      	ldr	r1, [pc, #80]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d021      	beq.n	8005c68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <HAL_GPIO_Init+0x2d0>)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	600b      	str	r3, [r1, #0]
 8005c30:	e021      	b.n	8005c76 <HAL_GPIO_Init+0x2e2>
 8005c32:	bf00      	nop
 8005c34:	10320000 	.word	0x10320000
 8005c38:	10310000 	.word	0x10310000
 8005c3c:	10220000 	.word	0x10220000
 8005c40:	10210000 	.word	0x10210000
 8005c44:	10120000 	.word	0x10120000
 8005c48:	10110000 	.word	0x10110000
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40010800 	.word	0x40010800
 8005c58:	40010c00 	.word	0x40010c00
 8005c5c:	40011000 	.word	0x40011000
 8005c60:	40011400 	.word	0x40011400
 8005c64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_GPIO_Init+0x304>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	4909      	ldr	r1, [pc, #36]	; (8005c98 <HAL_GPIO_Init+0x304>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	3301      	adds	r3, #1
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f47f ae8e 	bne.w	80059a8 <HAL_GPIO_Init+0x14>
  }
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	372c      	adds	r7, #44	; 0x2c
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr
 8005c98:	40010400 	.word	0x40010400

08005c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	887b      	ldrh	r3, [r7, #2]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	e001      	b.n	8005cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	807b      	strh	r3, [r7, #2]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cda:	787b      	ldrb	r3, [r7, #1]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce0:	887a      	ldrh	r2, [r7, #2]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005ce6:	e003      	b.n	8005cf0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005ce8:	887b      	ldrh	r3, [r7, #2]
 8005cea:	041a      	lsls	r2, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	611a      	str	r2, [r3, #16]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bc80      	pop	{r7}
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e272      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8087 	beq.w	8005e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d1c:	4b92      	ldr	r3, [pc, #584]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 030c 	and.w	r3, r3, #12
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d00c      	beq.n	8005d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d28:	4b8f      	ldr	r3, [pc, #572]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f003 030c 	and.w	r3, r3, #12
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d112      	bne.n	8005d5a <HAL_RCC_OscConfig+0x5e>
 8005d34:	4b8c      	ldr	r3, [pc, #560]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d10b      	bne.n	8005d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d42:	4b89      	ldr	r3, [pc, #548]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d06c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x12c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d168      	bne.n	8005e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e24c      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x76>
 8005d64:	4b80      	ldr	r3, [pc, #512]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a7f      	ldr	r2, [pc, #508]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	e02e      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x98>
 8005d7a:	4b7b      	ldr	r3, [pc, #492]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a7a      	ldr	r2, [pc, #488]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4b78      	ldr	r3, [pc, #480]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a77      	ldr	r2, [pc, #476]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0xbc>
 8005d9e:	4b72      	ldr	r3, [pc, #456]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a71      	ldr	r2, [pc, #452]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6e      	ldr	r2, [pc, #440]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd4>
 8005db8:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a6a      	ldr	r2, [pc, #424]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b68      	ldr	r3, [pc, #416]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a67      	ldr	r2, [pc, #412]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fece 	bl	8004b78 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe feca 	bl	8004b78 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	; 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e200      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005df2:	4b5d      	ldr	r3, [pc, #372]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0xe4>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fe feba 	bl	8004b78 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fe feb6 	bl	8004b78 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e1ec      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e1a:	4b53      	ldr	r3, [pc, #332]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x10c>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d063      	beq.n	8005efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e36:	4b4c      	ldr	r3, [pc, #304]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e42:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d11c      	bne.n	8005e88 <HAL_RCC_OscConfig+0x18c>
 8005e4e:	4b46      	ldr	r3, [pc, #280]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d116      	bne.n	8005e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5a:	4b43      	ldr	r3, [pc, #268]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_RCC_OscConfig+0x176>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d001      	beq.n	8005e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e1c0      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e72:	4b3d      	ldr	r3, [pc, #244]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4939      	ldr	r1, [pc, #228]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e86:	e03a      	b.n	8005efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e90:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RCC_OscConfig+0x270>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fe fe6f 	bl	8004b78 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e9e:	f7fe fe6b 	bl	8004b78 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e1a1      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb0:	4b2d      	ldr	r3, [pc, #180]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b2a      	ldr	r3, [pc, #168]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4927      	ldr	r1, [pc, #156]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	600b      	str	r3, [r1, #0]
 8005ed0:	e015      	b.n	8005efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ed2:	4b26      	ldr	r3, [pc, #152]	; (8005f6c <HAL_RCC_OscConfig+0x270>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed8:	f7fe fe4e 	bl	8004b78 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee0:	f7fe fe4a 	bl	8004b78 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e180      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ef2:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d03a      	beq.n	8005f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d019      	beq.n	8005f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f12:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <HAL_RCC_OscConfig+0x274>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f18:	f7fe fe2e 	bl	8004b78 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f20:	f7fe fe2a 	bl	8004b78 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e160      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <HAL_RCC_OscConfig+0x26c>)
 8005f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f0      	beq.n	8005f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f3e:	2001      	movs	r0, #1
 8005f40:	f000 face 	bl	80064e0 <RCC_Delay>
 8005f44:	e01c      	b.n	8005f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_RCC_OscConfig+0x274>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f4c:	f7fe fe14 	bl	8004b78 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f52:	e00f      	b.n	8005f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f54:	f7fe fe10 	bl	8004b78 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d908      	bls.n	8005f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e146      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
 8005f66:	bf00      	nop
 8005f68:	40021000 	.word	0x40021000
 8005f6c:	42420000 	.word	0x42420000
 8005f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f74:	4b92      	ldr	r3, [pc, #584]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e9      	bne.n	8005f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 80a6 	beq.w	80060da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f92:	4b8b      	ldr	r3, [pc, #556]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10d      	bne.n	8005fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9e:	4b88      	ldr	r3, [pc, #544]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	4a87      	ldr	r2, [pc, #540]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	61d3      	str	r3, [r2, #28]
 8005faa:	4b85      	ldr	r3, [pc, #532]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	60bb      	str	r3, [r7, #8]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fba:	4b82      	ldr	r3, [pc, #520]	; (80061c4 <HAL_RCC_OscConfig+0x4c8>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d118      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc6:	4b7f      	ldr	r3, [pc, #508]	; (80061c4 <HAL_RCC_OscConfig+0x4c8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <HAL_RCC_OscConfig+0x4c8>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd2:	f7fe fdd1 	bl	8004b78 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fda:	f7fe fdcd 	bl	8004b78 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b64      	cmp	r3, #100	; 0x64
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e103      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <HAL_RCC_OscConfig+0x4c8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_OscConfig+0x312>
 8006000:	4b6f      	ldr	r3, [pc, #444]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	4a6e      	ldr	r2, [pc, #440]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	6213      	str	r3, [r2, #32]
 800600c:	e02d      	b.n	800606a <HAL_RCC_OscConfig+0x36e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x334>
 8006016:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	6213      	str	r3, [r2, #32]
 8006022:	4b67      	ldr	r3, [pc, #412]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	4a66      	ldr	r2, [pc, #408]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	f023 0304 	bic.w	r3, r3, #4
 800602c:	6213      	str	r3, [r2, #32]
 800602e:	e01c      	b.n	800606a <HAL_RCC_OscConfig+0x36e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b05      	cmp	r3, #5
 8006036:	d10c      	bne.n	8006052 <HAL_RCC_OscConfig+0x356>
 8006038:	4b61      	ldr	r3, [pc, #388]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	4a60      	ldr	r2, [pc, #384]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800603e:	f043 0304 	orr.w	r3, r3, #4
 8006042:	6213      	str	r3, [r2, #32]
 8006044:	4b5e      	ldr	r3, [pc, #376]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	4a5d      	ldr	r2, [pc, #372]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6213      	str	r3, [r2, #32]
 8006050:	e00b      	b.n	800606a <HAL_RCC_OscConfig+0x36e>
 8006052:	4b5b      	ldr	r3, [pc, #364]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	4a5a      	ldr	r2, [pc, #360]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	6213      	str	r3, [r2, #32]
 800605e:	4b58      	ldr	r3, [pc, #352]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	4a57      	ldr	r2, [pc, #348]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006064:	f023 0304 	bic.w	r3, r3, #4
 8006068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d015      	beq.n	800609e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006072:	f7fe fd81 	bl	8004b78 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006078:	e00a      	b.n	8006090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fe fd7d 	bl	8004b78 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0b1      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006090:	4b4b      	ldr	r3, [pc, #300]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0ee      	beq.n	800607a <HAL_RCC_OscConfig+0x37e>
 800609c:	e014      	b.n	80060c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609e:	f7fe fd6b 	bl	8004b78 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a4:	e00a      	b.n	80060bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060a6:	f7fe fd67 	bl	8004b78 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e09b      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060bc:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1ee      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ce:	4b3c      	ldr	r3, [pc, #240]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8087 	beq.w	80061f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060e4:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d061      	beq.n	80061b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d146      	bne.n	8006186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f8:	4b33      	ldr	r3, [pc, #204]	; (80061c8 <HAL_RCC_OscConfig+0x4cc>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fe:	f7fe fd3b 	bl	8004b78 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006106:	f7fe fd37 	bl	8004b78 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e06d      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006118:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f0      	bne.n	8006106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d108      	bne.n	8006140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	4921      	ldr	r1, [pc, #132]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	4313      	orrs	r3, r2
 800613e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006140:	4b1f      	ldr	r3, [pc, #124]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a19      	ldr	r1, [r3, #32]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006150:	430b      	orrs	r3, r1
 8006152:	491b      	ldr	r1, [pc, #108]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 8006154:	4313      	orrs	r3, r2
 8006156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCC_OscConfig+0x4cc>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fe fd0b 	bl	8004b78 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006164:	e008      	b.n	8006178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006166:	f7fe fd07 	bl	8004b78 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d901      	bls.n	8006178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e03d      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0f0      	beq.n	8006166 <HAL_RCC_OscConfig+0x46a>
 8006184:	e035      	b.n	80061f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <HAL_RCC_OscConfig+0x4cc>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800618c:	f7fe fcf4 	bl	8004b78 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006194:	f7fe fcf0 	bl	8004b78 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e026      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <HAL_RCC_OscConfig+0x4c4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x498>
 80061b2:	e01e      	b.n	80061f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d107      	bne.n	80061cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e019      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40007000 	.word	0x40007000
 80061c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <HAL_RCC_OscConfig+0x500>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d106      	bne.n	80061ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000

08006200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e0d0      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006214:	4b6a      	ldr	r3, [pc, #424]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d910      	bls.n	8006244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 0207 	bic.w	r2, r3, #7
 800622a:	4965      	ldr	r1, [pc, #404]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b63      	ldr	r3, [pc, #396]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e0b8      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d020      	beq.n	8006292 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0304 	and.w	r3, r3, #4
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800625c:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a58      	ldr	r2, [pc, #352]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006266:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006274:	4b53      	ldr	r3, [pc, #332]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a52      	ldr	r2, [pc, #328]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800627a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800627e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006280:	4b50      	ldr	r3, [pc, #320]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	494d      	ldr	r1, [pc, #308]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d040      	beq.n	8006320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	4b47      	ldr	r3, [pc, #284]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d115      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e07f      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062be:	4b41      	ldr	r3, [pc, #260]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e073      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ce:	4b3d      	ldr	r3, [pc, #244]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e06b      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062de:	4b39      	ldr	r3, [pc, #228]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f023 0203 	bic.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	4936      	ldr	r1, [pc, #216]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062f0:	f7fe fc42 	bl	8004b78 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f6:	e00a      	b.n	800630e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f8:	f7fe fc3e 	bl	8004b78 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e053      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f003 020c 	and.w	r2, r3, #12
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	429a      	cmp	r2, r3
 800631e:	d1eb      	bne.n	80062f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d210      	bcs.n	8006350 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b24      	ldr	r3, [pc, #144]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 0207 	bic.w	r2, r3, #7
 8006336:	4922      	ldr	r1, [pc, #136]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	4313      	orrs	r3, r2
 800633c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e032      	b.n	80063b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4916      	ldr	r1, [pc, #88]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800636a:	4313      	orrs	r3, r2
 800636c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	490e      	ldr	r1, [pc, #56]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 800638a:	4313      	orrs	r3, r2
 800638c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800638e:	f000 f821 	bl	80063d4 <HAL_RCC_GetSysClockFreq>
 8006392:	4602      	mov	r2, r0
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_RCC_ClockConfig+0x1c4>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	091b      	lsrs	r3, r3, #4
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	490a      	ldr	r1, [pc, #40]	; (80063c8 <HAL_RCC_ClockConfig+0x1c8>)
 80063a0:	5ccb      	ldrb	r3, [r1, r3]
 80063a2:	fa22 f303 	lsr.w	r3, r2, r3
 80063a6:	4a09      	ldr	r2, [pc, #36]	; (80063cc <HAL_RCC_ClockConfig+0x1cc>)
 80063a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063aa:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <HAL_RCC_ClockConfig+0x1d0>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fba0 	bl	8004af4 <HAL_InitTick>

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40022000 	.word	0x40022000
 80063c4:	40021000 	.word	0x40021000
 80063c8:	08008018 	.word	0x08008018
 80063cc:	20000020 	.word	0x20000020
 80063d0:	2000004c 	.word	0x2000004c

080063d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	2300      	movs	r3, #0
 80063e0:	60bb      	str	r3, [r7, #8]
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <HAL_RCC_GetSysClockFreq+0x94>)
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d002      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x30>
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d003      	beq.n	800640a <HAL_RCC_GetSysClockFreq+0x36>
 8006402:	e027      	b.n	8006454 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006404:	4b19      	ldr	r3, [pc, #100]	; (800646c <HAL_RCC_GetSysClockFreq+0x98>)
 8006406:	613b      	str	r3, [r7, #16]
      break;
 8006408:	e027      	b.n	800645a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	0c9b      	lsrs	r3, r3, #18
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	4a17      	ldr	r2, [pc, #92]	; (8006470 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006414:	5cd3      	ldrb	r3, [r2, r3]
 8006416:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d010      	beq.n	8006444 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006422:	4b11      	ldr	r3, [pc, #68]	; (8006468 <HAL_RCC_GetSysClockFreq+0x94>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	0c5b      	lsrs	r3, r3, #17
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	4a11      	ldr	r2, [pc, #68]	; (8006474 <HAL_RCC_GetSysClockFreq+0xa0>)
 800642e:	5cd3      	ldrb	r3, [r2, r3]
 8006430:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a0d      	ldr	r2, [pc, #52]	; (800646c <HAL_RCC_GetSysClockFreq+0x98>)
 8006436:	fb03 f202 	mul.w	r2, r3, r2
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	e004      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a0c      	ldr	r2, [pc, #48]	; (8006478 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006448:	fb02 f303 	mul.w	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	613b      	str	r3, [r7, #16]
      break;
 8006452:	e002      	b.n	800645a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <HAL_RCC_GetSysClockFreq+0x98>)
 8006456:	613b      	str	r3, [r7, #16]
      break;
 8006458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800645a:	693b      	ldr	r3, [r7, #16]
}
 800645c:	4618      	mov	r0, r3
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40021000 	.word	0x40021000
 800646c:	007a1200 	.word	0x007a1200
 8006470:	0800c054 	.word	0x0800c054
 8006474:	0800c064 	.word	0x0800c064
 8006478:	003d0900 	.word	0x003d0900

0800647c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006480:	4b02      	ldr	r3, [pc, #8]	; (800648c <HAL_RCC_GetHCLKFreq+0x10>)
 8006482:	681b      	ldr	r3, [r3, #0]
}
 8006484:	4618      	mov	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	bc80      	pop	{r7}
 800648a:	4770      	bx	lr
 800648c:	20000020 	.word	0x20000020

08006490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006494:	f7ff fff2 	bl	800647c <HAL_RCC_GetHCLKFreq>
 8006498:	4602      	mov	r2, r0
 800649a:	4b05      	ldr	r3, [pc, #20]	; (80064b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064a6:	5ccb      	ldrb	r3, [r1, r3]
 80064a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40021000 	.word	0x40021000
 80064b4:	08008028 	.word	0x08008028

080064b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064bc:	f7ff ffde 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064c0:	4602      	mov	r2, r0
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	0adb      	lsrs	r3, r3, #11
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ce:	5ccb      	ldrb	r3, [r1, r3]
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40021000 	.word	0x40021000
 80064dc:	08008028 	.word	0x08008028

080064e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <RCC_Delay+0x34>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0a      	ldr	r2, [pc, #40]	; (8006518 <RCC_Delay+0x38>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	0a5b      	lsrs	r3, r3, #9
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064fc:	bf00      	nop
  }
  while (Delay --);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	60fa      	str	r2, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f9      	bne.n	80064fc <RCC_Delay+0x1c>
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr
 8006514:	20000020 	.word	0x20000020
 8006518:	10624dd3 	.word	0x10624dd3

0800651c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e076      	b.n	800661c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2b00      	cmp	r3, #0
 8006534:	d108      	bne.n	8006548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800653e:	d009      	beq.n	8006554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
 8006546:	e005      	b.n	8006554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fc fa74 	bl	8002a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800658a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d8:	ea42 0103 	orr.w	r1, r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	0c1a      	lsrs	r2, r3, #16
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f002 0204 	and.w	r2, r2, #4
 80065fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69da      	ldr	r2, [r3, #28]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800660a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800663e:	2b01      	cmp	r3, #1
 8006640:	d101      	bne.n	8006646 <HAL_SPI_Transmit+0x22>
 8006642:	2302      	movs	r3, #2
 8006644:	e12d      	b.n	80068a2 <HAL_SPI_Transmit+0x27e>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800664e:	f7fe fa93 	bl	8004b78 <HAL_GetTick>
 8006652:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d002      	beq.n	800666a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006664:	2302      	movs	r3, #2
 8006666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006668:	e116      	b.n	8006898 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SPI_Transmit+0x52>
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d102      	bne.n	800667c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	77fb      	strb	r3, [r7, #31]
    goto error;
 800667a:	e10d      	b.n	8006898 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2203      	movs	r2, #3
 8006680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c2:	d10f      	bne.n	80066e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d007      	beq.n	8006702 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006700:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670a:	d14f      	bne.n	80067ac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_SPI_Transmit+0xf6>
 8006714:	8afb      	ldrh	r3, [r7, #22]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d142      	bne.n	80067a0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	881a      	ldrh	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	b29a      	uxth	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800673e:	e02f      	b.n	80067a0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b02      	cmp	r3, #2
 800674c:	d112      	bne.n	8006774 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	881a      	ldrh	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	1c9a      	adds	r2, r3, #2
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006768:	b29b      	uxth	r3, r3
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	86da      	strh	r2, [r3, #54]	; 0x36
 8006772:	e015      	b.n	80067a0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006774:	f7fe fa00 	bl	8004b78 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	429a      	cmp	r2, r3
 8006782:	d803      	bhi.n	800678c <HAL_SPI_Transmit+0x168>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678a:	d102      	bne.n	8006792 <HAL_SPI_Transmit+0x16e>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800679e:	e07b      	b.n	8006898 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ca      	bne.n	8006740 <HAL_SPI_Transmit+0x11c>
 80067aa:	e050      	b.n	800684e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_SPI_Transmit+0x196>
 80067b4:	8afb      	ldrh	r3, [r7, #22]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d144      	bne.n	8006844 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067e0:	e030      	b.n	8006844 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d113      	bne.n	8006818 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	86da      	strh	r2, [r3, #54]	; 0x36
 8006816:	e015      	b.n	8006844 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006818:	f7fe f9ae 	bl	8004b78 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d803      	bhi.n	8006830 <HAL_SPI_Transmit+0x20c>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682e:	d102      	bne.n	8006836 <HAL_SPI_Transmit+0x212>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006842:	e029      	b.n	8006898 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1c9      	bne.n	80067e2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f8b2 	bl	80069bc <SPI_EndRxTxTransaction>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e003      	b.n	8006898 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068bc:	f7fe f95c 	bl	8004b78 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	4413      	add	r3, r2
 80068ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068cc:	f7fe f954 	bl	8004b78 <HAL_GetTick>
 80068d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068d2:	4b39      	ldr	r3, [pc, #228]	; (80069b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	015b      	lsls	r3, r3, #5
 80068d8:	0d1b      	lsrs	r3, r3, #20
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	fb02 f303 	mul.w	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068e2:	e054      	b.n	800698e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d050      	beq.n	800698e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ec:	f7fe f944 	bl	8004b78 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d902      	bls.n	8006902 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d13d      	bne.n	800697e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006910:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800691a:	d111      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x94>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006924:	d004      	beq.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692e:	d107      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006948:	d10f      	bne.n	800696a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006968:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e017      	b.n	80069ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	3b01      	subs	r3, #1
 800698c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4013      	ands	r3, r2
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	429a      	cmp	r2, r3
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d19b      	bne.n	80068e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000020 	.word	0x20000020

080069bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2200      	movs	r2, #0
 80069d0:	2180      	movs	r1, #128	; 0x80
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f7ff ff6a 	bl	80068ac <SPI_WaitFlagStateUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	f043 0220 	orr.w	r2, r3, #32
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e000      	b.n	80069f0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e093      	b.n	8006b34 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7fc f859 	bl	8002ad8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3c:	f023 0307 	bic.w	r3, r3, #7
 8006a40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f000 f903 	bl	8006c58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7a:	f023 0303 	bic.w	r3, r3, #3
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a98:	f023 030c 	bic.w	r3, r3, #12
 8006a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	011a      	lsls	r2, r3, #4
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	031b      	lsls	r3, r3, #12
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ad6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d110      	bne.n	8006b8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d102      	bne.n	8006b78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b72:	7b7b      	ldrb	r3, [r7, #13]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d001      	beq.n	8006b7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e069      	b.n	8006c50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b8c:	e031      	b.n	8006bf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d110      	bne.n	8006bb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d102      	bne.n	8006ba0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b9a:	7b3b      	ldrb	r3, [r7, #12]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d001      	beq.n	8006ba4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e055      	b.n	8006c50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bb4:	e01d      	b.n	8006bf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d108      	bne.n	8006bce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d105      	bne.n	8006bce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d102      	bne.n	8006bce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006bc8:	7b3b      	ldrb	r3, [r7, #12]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d001      	beq.n	8006bd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e03e      	b.n	8006c50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2202      	movs	r2, #2
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_TIM_Encoder_Start+0xc4>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d008      	beq.n	8006c10 <HAL_TIM_Encoder_Start+0xd4>
 8006bfe:	e00f      	b.n	8006c20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2201      	movs	r2, #1
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 f887 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8006c0e:	e016      	b.n	8006c3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2201      	movs	r2, #1
 8006c16:	2104      	movs	r1, #4
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 f87f 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8006c1e:	e00e      	b.n	8006c3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	2100      	movs	r1, #0
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f877 	bl	8006d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2201      	movs	r2, #1
 8006c34:	2104      	movs	r1, #4
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f870 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8006c3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c76:	d007      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a26      	ldr	r2, [pc, #152]	; (8006d14 <TIM_Base_SetConfig+0xbc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_Base_SetConfig+0x30>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a25      	ldr	r2, [pc, #148]	; (8006d18 <TIM_Base_SetConfig+0xc0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d108      	bne.n	8006c9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca8:	d007      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <TIM_Base_SetConfig+0xbc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_Base_SetConfig+0x62>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <TIM_Base_SetConfig+0xc0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d108      	bne.n	8006ccc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a07      	ldr	r2, [pc, #28]	; (8006d10 <TIM_Base_SetConfig+0xb8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d103      	bne.n	8006d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	615a      	str	r2, [r3, #20]
}
 8006d06:	bf00      	nop
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40000400 	.word	0x40000400
 8006d18:	40000800 	.word	0x40000800

08006d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e046      	b.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a16      	ldr	r2, [pc, #88]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d00e      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d009      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a12      	ldr	r2, [pc, #72]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d004      	beq.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d10c      	bne.n	8006df8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800

08006e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e042      	b.n	8006eb8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7fb fe84 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2224      	movs	r2, #36	; 0x24
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 ff8b 	bl	8007d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	695a      	ldr	r2, [r3, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	603b      	str	r3, [r7, #0]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d16d      	bne.n	8006fbc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d002      	beq.n	8006eec <HAL_UART_Transmit+0x2c>
 8006ee6:	88fb      	ldrh	r3, [r7, #6]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e066      	b.n	8006fbe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2221      	movs	r2, #33	; 0x21
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efe:	f7fd fe3b 	bl	8004b78 <HAL_GetTick>
 8006f02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	88fa      	ldrh	r2, [r7, #6]
 8006f08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	88fa      	ldrh	r2, [r7, #6]
 8006f0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d108      	bne.n	8006f2c <HAL_UART_Transmit+0x6c>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e003      	b.n	8006f34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f34:	e02a      	b.n	8006f8c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2180      	movs	r1, #128	; 0x80
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fc53 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e036      	b.n	8006fbe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3302      	adds	r3, #2
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e007      	b.n	8006f7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1cf      	bne.n	8006f36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2140      	movs	r1, #64	; 0x40
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fc23 	bl	80077ec <UART_WaitOnFlagUntilTimeout>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d001      	beq.n	8006fb0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e006      	b.n	8006fbe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e000      	b.n	8006fbe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b08c      	sub	sp, #48	; 0x30
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	60f8      	str	r0, [r7, #12]
 8006fce:	60b9      	str	r1, [r7, #8]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d14a      	bne.n	8007076 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e043      	b.n	8007078 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	461a      	mov	r2, r3
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fc60 	bl	80078c8 <UART_Start_Receive_DMA>
 8007008:	4603      	mov	r3, r0
 800700a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800700e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007012:	2b00      	cmp	r3, #0
 8007014:	d12c      	bne.n	8007070 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	2b01      	cmp	r3, #1
 800701c:	d125      	bne.n	800706a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	617b      	str	r3, [r7, #20]
   return(result);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f043 0310 	orr.w	r3, r3, #16
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007054:	627a      	str	r2, [r7, #36]	; 0x24
 8007056:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6a39      	ldr	r1, [r7, #32]
 800705a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	61fb      	str	r3, [r7, #28]
   return(result);
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007068:	e002      	b.n	8007070 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007074:	e000      	b.n	8007078 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
  }
}
 8007078:	4618      	mov	r0, r3
 800707a:	3730      	adds	r7, #48	; 0x30
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b0ba      	sub	sp, #232	; 0xe8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10f      	bne.n	80070e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d009      	beq.n	80070e6 <HAL_UART_IRQHandler+0x66>
 80070d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fd90 	bl	8007c04 <UART_Receive_IT>
      return;
 80070e4:	e25b      	b.n	800759e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 80de 	beq.w	80072ac <HAL_UART_IRQHandler+0x22c>
 80070f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007100:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007104:	2b00      	cmp	r3, #0
 8007106:	f000 80d1 	beq.w	80072ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800710a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00b      	beq.n	800712e <HAL_UART_IRQHandler+0xae>
 8007116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <HAL_UART_IRQHandler+0xd2>
 800713a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	f043 0202 	orr.w	r2, r3, #2
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007156:	f003 0302 	and.w	r3, r3, #2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
 800715e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	f043 0204 	orr.w	r2, r3, #4
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d011      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d105      	bne.n	800719a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800718e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	f043 0208 	orr.w	r2, r3, #8
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 81f2 	beq.w	8007594 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d008      	beq.n	80071ce <HAL_UART_IRQHandler+0x14e>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	f003 0320 	and.w	r3, r3, #32
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fd1b 	bl	8007c04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bf14      	ite	ne
 80071dc:	2301      	movne	r3, #1
 80071de:	2300      	moveq	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <HAL_UART_IRQHandler+0x17a>
 80071f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d04f      	beq.n	800729a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fc25 	bl	8007a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b00      	cmp	r3, #0
 800720c:	d041      	beq.n	8007292 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3314      	adds	r3, #20
 8007214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800722c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3314      	adds	r3, #20
 8007236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800723a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800723e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1d9      	bne.n	800720e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d013      	beq.n	800728a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	4a7e      	ldr	r2, [pc, #504]	; (8007460 <HAL_UART_IRQHandler+0x3e0>)
 8007268:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe f9e4 	bl	800563c <HAL_DMA_Abort_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d016      	beq.n	80072a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007288:	e00e      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7f9 fdd2 	bl	8000e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007290:	e00a      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7f9 fdce 	bl	8000e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	e006      	b.n	80072a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7f9 fdca 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072a6:	e175      	b.n	8007594 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a8:	bf00      	nop
    return;
 80072aa:	e173      	b.n	8007594 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 814f 	bne.w	8007554 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8148 	beq.w	8007554 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8141 	beq.w	8007554 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072d2:	2300      	movs	r3, #0
 80072d4:	60bb      	str	r3, [r7, #8]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80b6 	beq.w	8007464 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007304:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8145 	beq.w	8007598 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007316:	429a      	cmp	r2, r3
 8007318:	f080 813e 	bcs.w	8007598 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007322:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b20      	cmp	r3, #32
 800732c:	f000 8088 	beq.w	8007440 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007346:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800734a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	330c      	adds	r3, #12
 8007358:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800735c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007360:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007368:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007374:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1d9      	bne.n	8007330 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3314      	adds	r3, #20
 8007382:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800738c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	3314      	adds	r3, #20
 800739c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ac:	e841 2300 	strex	r3, r2, [r1]
 80073b0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e1      	bne.n	800737c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3314      	adds	r3, #20
 80073be:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073c2:	e853 3f00 	ldrex	r3, [r3]
 80073c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3314      	adds	r3, #20
 80073d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e3      	bne.n	80073b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	330c      	adds	r3, #12
 8007404:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800740e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007410:	f023 0310 	bic.w	r3, r3, #16
 8007414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	330c      	adds	r3, #12
 800741e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007422:	65ba      	str	r2, [r7, #88]	; 0x58
 8007424:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007426:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800742a:	e841 2300 	strex	r3, r2, [r1]
 800742e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1e3      	bne.n	80073fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe f8c2 	bl	80055c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800744e:	b29b      	uxth	r3, r3
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	b29b      	uxth	r3, r3
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7f9 fd80 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800745c:	e09c      	b.n	8007598 <HAL_UART_IRQHandler+0x518>
 800745e:	bf00      	nop
 8007460:	08007b0f 	.word	0x08007b0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800746c:	b29b      	uxth	r3, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 808e 	beq.w	800759c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8089 	beq.w	800759c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	330c      	adds	r3, #12
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	330c      	adds	r3, #12
 80074aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074ae:	647a      	str	r2, [r7, #68]	; 0x44
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3314      	adds	r3, #20
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	623b      	str	r3, [r7, #32]
   return(result);
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f023 0301 	bic.w	r3, r3, #1
 80074d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3314      	adds	r3, #20
 80074e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074e6:	633a      	str	r2, [r7, #48]	; 0x30
 80074e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1e3      	bne.n	80074c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	60fb      	str	r3, [r7, #12]
   return(result);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f023 0310 	bic.w	r3, r3, #16
 800751e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800752c:	61fa      	str	r2, [r7, #28]
 800752e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	69b9      	ldr	r1, [r7, #24]
 8007532:	69fa      	ldr	r2, [r7, #28]
 8007534:	e841 2300 	strex	r3, r2, [r1]
 8007538:	617b      	str	r3, [r7, #20]
   return(result);
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e3      	bne.n	8007508 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7f9 fd05 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007552:	e023      	b.n	800759c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755c:	2b00      	cmp	r3, #0
 800755e:	d009      	beq.n	8007574 <HAL_UART_IRQHandler+0x4f4>
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fae2 	bl	8007b36 <UART_Transmit_IT>
    return;
 8007572:	e014      	b.n	800759e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <HAL_UART_IRQHandler+0x51e>
 8007580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb21 	bl	8007bd4 <UART_EndTransmit_IT>
    return;
 8007592:	e004      	b.n	800759e <HAL_UART_IRQHandler+0x51e>
    return;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_UART_IRQHandler+0x51e>
      return;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_UART_IRQHandler+0x51e>
      return;
 800759c:	bf00      	nop
  }
}
 800759e:	37e8      	adds	r7, #232	; 0xe8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr

080075da <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bc80      	pop	{r7}
 80075ee:	4770      	bx	lr

080075f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b09c      	sub	sp, #112	; 0x70
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d172      	bne.n	80076f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800760c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760e:	2200      	movs	r2, #0
 8007610:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007628:	66bb      	str	r3, [r7, #104]	; 0x68
 800762a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007632:	65ba      	str	r2, [r7, #88]	; 0x58
 8007634:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e5      	bne.n	8007612 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	667b      	str	r3, [r7, #100]	; 0x64
 800765e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3314      	adds	r3, #20
 8007664:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007666:	647a      	str	r2, [r7, #68]	; 0x44
 8007668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800766c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800767a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3314      	adds	r3, #20
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	623b      	str	r3, [r7, #32]
   return(result);
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007690:	663b      	str	r3, [r7, #96]	; 0x60
 8007692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	3314      	adds	r3, #20
 8007698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800769a:	633a      	str	r2, [r7, #48]	; 0x30
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e5      	bne.n	800767a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d119      	bne.n	80076f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	e853 3f00 	ldrex	r3, [r3]
 80076cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f023 0310 	bic.w	r3, r3, #16
 80076d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076de:	61fa      	str	r2, [r7, #28]
 80076e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	69b9      	ldr	r1, [r7, #24]
 80076e4:	69fa      	ldr	r2, [r7, #28]
 80076e6:	e841 2300 	strex	r3, r2, [r1]
 80076ea:	617b      	str	r3, [r7, #20]
   return(result);
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1e5      	bne.n	80076be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f4:	2200      	movs	r2, #0
 80076f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d106      	bne.n	800770e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007702:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007704:	4619      	mov	r1, r3
 8007706:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007708:	f7f9 fc28 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800770c:	e002      	b.n	8007714 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800770e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007710:	f7ff ff51 	bl	80075b6 <HAL_UART_RxCpltCallback>
}
 8007714:	bf00      	nop
 8007716:	3770      	adds	r7, #112	; 0x70
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	2b01      	cmp	r3, #1
 8007736:	d108      	bne.n	800774a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800773c:	085b      	lsrs	r3, r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	4619      	mov	r1, r3
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7f9 fc0a 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007748:	e002      	b.n	8007750 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff ff3c 	bl	80075c8 <HAL_UART_RxHalfCpltCallback>
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b00      	cmp	r3, #0
 8007776:	bf14      	ite	ne
 8007778:	2301      	movne	r3, #1
 800777a:	2300      	moveq	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b21      	cmp	r3, #33	; 0x21
 800778a:	d108      	bne.n	800779e <UART_DMAError+0x46>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2200      	movs	r2, #0
 8007796:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007798:	68b8      	ldr	r0, [r7, #8]
 800779a:	f000 f92f 	bl	80079fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b22      	cmp	r3, #34	; 0x22
 80077be:	d108      	bne.n	80077d2 <UART_DMAError+0x7a>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077cc:	68b8      	ldr	r0, [r7, #8]
 80077ce:	f000 f93c 	bl	8007a4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d6:	f043 0210 	orr.w	r2, r3, #16
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077de:	68b8      	ldr	r0, [r7, #8]
 80077e0:	f7f9 fb28 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b090      	sub	sp, #64	; 0x40
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fc:	e050      	b.n	80078a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d04c      	beq.n	80078a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <UART_WaitOnFlagUntilTimeout+0x30>
 800780c:	f7fd f9b4 	bl	8004b78 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007818:	429a      	cmp	r2, r3
 800781a:	d241      	bcs.n	80078a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	330c      	adds	r3, #12
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800783c:	637a      	str	r2, [r7, #52]	; 0x34
 800783e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3314      	adds	r3, #20
 8007856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	613b      	str	r3, [r7, #16]
   return(result);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	63bb      	str	r3, [r7, #56]	; 0x38
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3314      	adds	r3, #20
 800786e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007870:	623a      	str	r2, [r7, #32]
 8007872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	69f9      	ldr	r1, [r7, #28]
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	61bb      	str	r3, [r7, #24]
   return(result);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e00f      	b.n	80078c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4013      	ands	r3, r2
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	bf0c      	ite	eq
 80078b0:	2301      	moveq	r3, #1
 80078b2:	2300      	movne	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	79fb      	ldrb	r3, [r7, #7]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d09f      	beq.n	80077fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3740      	adds	r7, #64	; 0x40
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b098      	sub	sp, #96	; 0x60
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2222      	movs	r2, #34	; 0x22
 80078ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	4a3e      	ldr	r2, [pc, #248]	; (80079f0 <UART_Start_Receive_DMA+0x128>)
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	4a3d      	ldr	r2, [pc, #244]	; (80079f4 <UART_Start_Receive_DMA+0x12c>)
 80078fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	4a3c      	ldr	r2, [pc, #240]	; (80079f8 <UART_Start_Receive_DMA+0x130>)
 8007906:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790c:	2200      	movs	r2, #0
 800790e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007910:	f107 0308 	add.w	r3, r7, #8
 8007914:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	f7fd fdec 	bl	8005504 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800792c:	2300      	movs	r3, #0
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	613b      	str	r3, [r7, #16]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d019      	beq.n	800797e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	330c      	adds	r3, #12
 8007950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007960:	65bb      	str	r3, [r7, #88]	; 0x58
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	330c      	adds	r3, #12
 8007968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800796a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e5      	bne.n	800794a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3314      	adds	r3, #20
 8007984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	657b      	str	r3, [r7, #84]	; 0x54
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3314      	adds	r3, #20
 800799c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800799e:	63ba      	str	r2, [r7, #56]	; 0x38
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80079a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3314      	adds	r3, #20
 80079b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	617b      	str	r3, [r7, #20]
   return(result);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c8:	653b      	str	r3, [r7, #80]	; 0x50
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3314      	adds	r3, #20
 80079d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079d2:	627a      	str	r2, [r7, #36]	; 0x24
 80079d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6a39      	ldr	r1, [r7, #32]
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	61fb      	str	r3, [r7, #28]
   return(result);
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e5      	bne.n	80079b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3760      	adds	r7, #96	; 0x60
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	080075f1 	.word	0x080075f1
 80079f4:	0800771d 	.word	0x0800771d
 80079f8:	08007759 	.word	0x08007759

080079fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	330c      	adds	r3, #12
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	61ba      	str	r2, [r7, #24]
 8007a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6979      	ldr	r1, [r7, #20]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	613b      	str	r3, [r7, #16]
   return(result);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e5      	bne.n	8007a04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007a40:	bf00      	nop
 8007a42:	3724      	adds	r7, #36	; 0x24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b095      	sub	sp, #84	; 0x54
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	330c      	adds	r3, #12
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a72:	643a      	str	r2, [r7, #64]	; 0x40
 8007a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e5      	bne.n	8007a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3314      	adds	r3, #20
 8007a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d119      	bne.n	8007af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	e853 3f00 	ldrex	r3, [r3]
 8007ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f023 0310 	bic.w	r3, r3, #16
 8007ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae2:	61ba      	str	r2, [r7, #24]
 8007ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae6:	6979      	ldr	r1, [r7, #20]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	613b      	str	r3, [r7, #16]
   return(result);
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e5      	bne.n	8007ac2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b04:	bf00      	nop
 8007b06:	3754      	adds	r7, #84	; 0x54
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7f9 f983 	bl	8000e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b21      	cmp	r3, #33	; 0x21
 8007b48:	d13e      	bne.n	8007bc8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b52:	d114      	bne.n	8007b7e <UART_Transmit_IT+0x48>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d110      	bne.n	8007b7e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	1c9a      	adds	r2, r3, #2
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	621a      	str	r2, [r3, #32]
 8007b7c:	e008      	b.n	8007b90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	1c59      	adds	r1, r3, #1
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6211      	str	r1, [r2, #32]
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10f      	bne.n	8007bc4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bc2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	e000      	b.n	8007bca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr

08007bd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fcd5 	bl	80075a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3708      	adds	r7, #8
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08c      	sub	sp, #48	; 0x30
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b22      	cmp	r3, #34	; 0x22
 8007c16:	f040 80ae 	bne.w	8007d76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c22:	d117      	bne.n	8007c54 <UART_Receive_IT+0x50>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	1c9a      	adds	r2, r3, #2
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	629a      	str	r2, [r3, #40]	; 0x28
 8007c52:	e026      	b.n	8007ca2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d007      	beq.n	8007c78 <UART_Receive_IT+0x74>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <UART_Receive_IT+0x82>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d106      	bne.n	8007c86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e008      	b.n	8007c98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d15d      	bne.n	8007d72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0220 	bic.w	r2, r2, #32
 8007cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	695a      	ldr	r2, [r3, #20]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0201 	bic.w	r2, r2, #1
 8007ce4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2220      	movs	r2, #32
 8007cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d135      	bne.n	8007d68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	330c      	adds	r3, #12
 8007d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	613b      	str	r3, [r7, #16]
   return(result);
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f023 0310 	bic.w	r3, r3, #16
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	330c      	adds	r3, #12
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	623a      	str	r2, [r7, #32]
 8007d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	69f9      	ldr	r1, [r7, #28]
 8007d28:	6a3a      	ldr	r2, [r7, #32]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e5      	bne.n	8007d02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b10      	cmp	r3, #16
 8007d42:	d10a      	bne.n	8007d5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d44:	2300      	movs	r3, #0
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7f9 f8fb 	bl	8000f5c <HAL_UARTEx_RxEventCallback>
 8007d66:	e002      	b.n	8007d6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff fc24 	bl	80075b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e002      	b.n	8007d78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	e000      	b.n	8007d78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
  }
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3730      	adds	r7, #48	; 0x30
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007dba:	f023 030c 	bic.w	r3, r3, #12
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6812      	ldr	r2, [r2, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	430b      	orrs	r3, r1
 8007dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <UART_SetConfig+0x114>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d103      	bne.n	8007df0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007de8:	f7fe fb66 	bl	80064b8 <HAL_RCC_GetPCLK2Freq>
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	e002      	b.n	8007df6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007df0:	f7fe fb4e 	bl	8006490 <HAL_RCC_GetPCLK1Freq>
 8007df4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	009a      	lsls	r2, r3, #2
 8007e00:	441a      	add	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0c:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <UART_SetConfig+0x118>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	0119      	lsls	r1, r3, #4
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009a      	lsls	r2, r3, #2
 8007e20:	441a      	add	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e2c:	4b1a      	ldr	r3, [pc, #104]	; (8007e98 <UART_SetConfig+0x118>)
 8007e2e:	fba3 0302 	umull	r0, r3, r3, r2
 8007e32:	095b      	lsrs	r3, r3, #5
 8007e34:	2064      	movs	r0, #100	; 0x64
 8007e36:	fb00 f303 	mul.w	r3, r0, r3
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	3332      	adds	r3, #50	; 0x32
 8007e40:	4a15      	ldr	r2, [pc, #84]	; (8007e98 <UART_SetConfig+0x118>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e4c:	4419      	add	r1, r3
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009a      	lsls	r2, r3, #2
 8007e58:	441a      	add	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e64:	4b0c      	ldr	r3, [pc, #48]	; (8007e98 <UART_SetConfig+0x118>)
 8007e66:	fba3 0302 	umull	r0, r3, r3, r2
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	2064      	movs	r0, #100	; 0x64
 8007e6e:	fb00 f303 	mul.w	r3, r0, r3
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	3332      	adds	r3, #50	; 0x32
 8007e78:	4a07      	ldr	r2, [pc, #28]	; (8007e98 <UART_SetConfig+0x118>)
 8007e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	f003 020f 	and.w	r2, r3, #15
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	440a      	add	r2, r1
 8007e8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40013800 	.word	0x40013800
 8007e98:	51eb851f 	.word	0x51eb851f

08007e9c <__libc_init_array>:
 8007e9c:	b570      	push	{r4, r5, r6, lr}
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	4d0c      	ldr	r5, [pc, #48]	; (8007ed4 <__libc_init_array+0x38>)
 8007ea2:	4c0d      	ldr	r4, [pc, #52]	; (8007ed8 <__libc_init_array+0x3c>)
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	42a6      	cmp	r6, r4
 8007eaa:	d109      	bne.n	8007ec0 <__libc_init_array+0x24>
 8007eac:	f000 f822 	bl	8007ef4 <_init>
 8007eb0:	2600      	movs	r6, #0
 8007eb2:	4d0a      	ldr	r5, [pc, #40]	; (8007edc <__libc_init_array+0x40>)
 8007eb4:	4c0a      	ldr	r4, [pc, #40]	; (8007ee0 <__libc_init_array+0x44>)
 8007eb6:	1b64      	subs	r4, r4, r5
 8007eb8:	10a4      	asrs	r4, r4, #2
 8007eba:	42a6      	cmp	r6, r4
 8007ebc:	d105      	bne.n	8007eca <__libc_init_array+0x2e>
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ec4:	4798      	blx	r3
 8007ec6:	3601      	adds	r6, #1
 8007ec8:	e7ee      	b.n	8007ea8 <__libc_init_array+0xc>
 8007eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ece:	4798      	blx	r3
 8007ed0:	3601      	adds	r6, #1
 8007ed2:	e7f2      	b.n	8007eba <__libc_init_array+0x1e>
 8007ed4:	0800c070 	.word	0x0800c070
 8007ed8:	0800c070 	.word	0x0800c070
 8007edc:	0800c070 	.word	0x0800c070
 8007ee0:	0800c074 	.word	0x0800c074

08007ee4 <memset>:
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	4402      	add	r2, r0
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d100      	bne.n	8007eee <memset+0xa>
 8007eec:	4770      	bx	lr
 8007eee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef2:	e7f9      	b.n	8007ee8 <memset+0x4>

08007ef4 <_init>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr

08007f00 <_fini>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr
